{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/image/image-20210109161316294.png","path":"image/image-20210109161316294.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/step/俱乐部管理小程序.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1620957677148},{"_id":"source/step/免费制作电子书.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1620957677148},{"_id":"source/step/国旗猜猜猜.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1620957677148},{"_id":"source/step/车标猜猜猜.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1620957677148},{"_id":"source/step/制作个人导航网站.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1620957677148},{"_id":"source/_posts/APP中常用的混合加密.md","hash":"e89d1d5e540103ed2d5fa956438582926c54fb32","modified":1620957677069},{"_id":"source/_posts/CSS-over-flow的使用.md","hash":"e2841c7738717809abfeeeb828f1a8d19ebdf1d9","modified":1620957677069},{"_id":"source/_posts/.DS_Store","hash":"0831d972b2b236d16fbe2d18ec4e752da2fd93f8","modified":1620957677069},{"_id":"source/_posts/Chrom-Vimium实现全键盘操作.md","hash":"3cd48eecdcace3b06e6e46bdf053ee3d2bf838db","modified":1620957677069},{"_id":"source/_posts/Hexo使用方法.md","hash":"8d3038dabe6a66825f4c0e15a31dbc5080e1e418","modified":1620957677073},{"_id":"source/_posts/JS严格模式有哪些限制.md","hash":"e635381ff7f7059151cc44ecf69252e4148bee08","modified":1620957677073},{"_id":"source/_posts/Hexi.md","hash":"897a6ab823885f75d2fef65ccd8d41b24161ba74","modified":1620957677069},{"_id":"source/_posts/JS头像显示居中部分.md","hash":"7543f9a1f3e235c904406d39b6b5b69371805908","modified":1620957677073},{"_id":"source/_posts/JS图片压缩.md","hash":"9c4b49cfa45660ed0577d9325f1274972f2045fe","modified":1620957677073},{"_id":"source/_posts/JS的Dom操作.md","hash":"0a87235b120518964716f3cbe65fcb17e0475db4","modified":1620957677073},{"_id":"source/_posts/JS随机数生成.md","hash":"764287b3f478e844b8ef97341bcea6aea980428d","modified":1620957677073},{"_id":"source/_posts/MVC的理解与运用总结.md","hash":"f25a9a5d429bc0c74b75af68f170483d6352a999","modified":1620957677073},{"_id":"source/_posts/Mac环境下安装NVM.md","hash":"7fbb338944e4878a2887e9a3b0ced8a19ac41b8c","modified":1620957677073},{"_id":"source/_posts/Mac常用快捷键.md","hash":"b88b8b9f5698266f2cf2a51ef01aaaaac5ead734","modified":1620957677073},{"_id":"source/_posts/Jenv管理Java.md","hash":"1ef339cb21e25f1e9729f59debbbfc0af19ac287","modified":1620957677073},{"_id":"source/_posts/OC项目开发常用宏定义.md","hash":"4b3217b97d6bc1d5a6ba184d8b4e168cc8495912","modified":1620957677078},{"_id":"source/_posts/git操作.md","hash":"b5b07f52f625f2d0ceaed238504375c88e4536eb","modified":1620957677078},{"_id":"source/_posts/Swift起步.md","hash":"48c5b6eee26ca0cf5e381a0abbfbadf60da43415","modified":1620957677078},{"_id":"source/_posts/RVM管理Ruby.md","hash":"d2fb0c46406d93179ab6fa9f772cf40c6bbab123","modified":1620957677078},{"_id":"source/_posts/haofenqi.md","hash":"54f9da5562c187e8f69e538de3d08ff1bda0f8a9","modified":1620957677081},{"_id":"source/_posts/heidakeng.md","hash":"8636e983d113cc322fbe92bbc24ffc8e693383a3","modified":1620957677081},{"_id":"source/_posts/OC常用格式检查.md","hash":"a25c46d273f9b7edc6a9b6b817fa2c1e23f072ce","modified":1620957677078},{"_id":"source/_posts/hexi-assist.md","hash":"51a2d8366303d6f518bd8da4732006764128a261","modified":1620957677125},{"_id":"source/_posts/hexi-travel.md","hash":"126a564c948de4bf3e40ec4412c18b5853767e8c","modified":1620957677127},{"_id":"source/_posts/hexo博客配置.md","hash":"fb5f9d8e21bee51a5fe57b1e8f1f7b97f878a3c3","modified":1620957677135},{"_id":"source/_posts/iOS再次打开推送总结.md","hash":"1e2f95e6e29b204d75a4274191b1cf2edd95fb63","modified":1620957677135},{"_id":"source/_posts/homeBrew.md","hash":"36396fd226d774e76c25031a673e32dc73c55e48","modified":1620957677135},{"_id":"source/_posts/iOS-AlertController使用方法.md","hash":"223eb4d7d48787a8bc12031971296444b5f4203d","modified":1620957677135},{"_id":"source/_posts/item的简单高效使用.md","hash":"e746f52587fe0ccbff72d0915df7f19a6ba65a9e","modified":1620957677135},{"_id":"source/_posts/iOS面试被问到的问题.md","hash":"b677b0646d8477aa05e4b8521f2cd8bf4cbf6c6b","modified":1620957677135},{"_id":"source/_posts/iOS端本地sqlite批量插入对比.md","hash":"5c26afae3da8f1eb51ff0e2e1d285477a308ca68","modified":1620957677135},{"_id":"source/_posts/npm配置文件及包管理.md","hash":"ed0b0dd3b706b0b9f53ae1d216cc5fe95550bed4","modified":1620957677135},{"_id":"source/_posts/pm2-Vue进程管理工具.md","hash":"61ab4daba2569eb90302f01754e26dfe48aac47f","modified":1620957677135},{"_id":"source/_posts/vue-draggable使用.md","hash":"e2da8f6614c52603976c32ef775554b2fa4b0362","modified":1620957677136},{"_id":"source/_posts/vs code快捷键.md","hash":"a9decab493c609837cf6666c3aa4590ad2609d10","modified":1620957677136},{"_id":"source/_posts/npm-npm-link使用方法.md","hash":"747c35f081c91fa955897e81660c1ef595dff8d2","modified":1620957677135},{"_id":"source/_posts/vim操作.md","hash":"04dfcf36391f6c8881e95899d8e5f79a744a4635","modified":1620957677135},{"_id":"source/_posts/关于技术实验室网站的创建设想.md","hash":"ca49036902e39694e3f80dfda9d218f6cbf111cd","modified":1620957677139},{"_id":"source/_posts/wordpress安装步骤.md","hash":"f3a32a6b76750f465f05b8938cd98b155ba6a93c","modified":1620957677136},{"_id":"source/_posts/使用protobuf统一创建项目类.md","hash":"e1d99d9b48064c45ead7f65278e2e0239242c48e","modified":1620957677138},{"_id":"source/_posts/程序员修炼之道-从小工到专家读书感悟.md","hash":"a247fd698f9066915f805e1ed0ec86ba327fe709","modified":1620957677145},{"_id":"source/_posts/跨平台开发手机网页调试技巧.md","hash":"979f4acb85f83dd1f4fe89ff29e496b19c4fa321","modified":1620957677147},{"_id":"source/_posts/成为更好的程序员要做到的10个方法.md","hash":"156bf2a747d642f83cb5f332fd366dccd6dd7bc7","modified":1620957677141},{"_id":"source/step/免费博客搭建.md","hash":"3a07aa4dc13cad5096ed2db01c9ef4185ed594a0","modified":1620957677148},{"_id":"source/categories/index.md","hash":"067d518399bb8ef8b56e9c8ab4a040bf8948dc7b","modified":1620957677147},{"_id":"source/tags/index.md","hash":"11c52e0eca2b23e76523864575ab508649425bbc","modified":1620957677148},{"_id":"source/about/index.md","hash":"9aaf8102ad192be2a22b0f068cd54f621e8a1a05","modified":1620957677147},{"_id":"source/image/image-20210109161316294.png","hash":"d9a9bd60acdc71ad3ae8c84b19a51f88cbd372e6","modified":1620957677147},{"_id":"source/_posts/Hexi/3.jpg","hash":"40b818091d61bc97ba3f53ba5d39568da9f18a24","modified":1620957677072},{"_id":"source/_posts/Hexi/5.jpg","hash":"74a04dc2cc62ba86690d19330da2d5607cea030e","modified":1620957677073},{"_id":"source/_posts/Mac环境下安装NVM/image-20210110194349971.png","hash":"70ec179a1c43ebc62cb565ce4f26c2afa89446c7","modified":1620957677074},{"_id":"source/_posts/Mac电脑安装Node环境/20190108223140793.png","hash":"63256a26388cf1cc9ff3619a38b54e7d3d44ca81","modified":1620957677074},{"_id":"source/_posts/Mac电脑安装Node环境/20190108223140593.png","hash":"01b8dbb5a40fe441d10c2b31b868e35834b77267","modified":1620957677074},{"_id":"source/_posts/Mac电脑安装Node环境/20190108223140800.png","hash":"9c42ca53c5421330e1ccf893c46d89d09637a0a9","modified":1620957677074},{"_id":"source/_posts/Mac电脑安装Node环境/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FudG1h,size_16,color_FFFFFF,t_70-20210110193527423.png","hash":"f3a989d86fbd73c4e55ce022c154b9a22f1bc2e3","modified":1620957677075},{"_id":"source/_posts/Mac电脑安装Node环境/20190108223140830.png","hash":"d0be341f4a4dbe67bd448cacc8f3e023e70a6f54","modified":1620957677074},{"_id":"source/_posts/Mac电脑安装Node环境/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FudG1h,size_16,color_FFFFFF,t_70-20210110193527366.png","hash":"501a10a5da9c598860bde7f5d7f9fefaeb53aaca","modified":1620957677074},{"_id":"source/_posts/Mac电脑安装Node环境/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FudG1h,size_16,color_FFFFFF,t_70-20210110193527424.png","hash":"c2d6b6ec262cd941f6afe9ba50cdbb42edf93557","modified":1620957677075},{"_id":"source/_posts/Mac电脑安装Node环境/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FudG1h,size_16,color_FFFFFF,t_70-20210110193527429.png","hash":"93f75d261bb6e42a98db98576ef31d5b5c1889c4","modified":1620957677075},{"_id":"source/_posts/Mac电脑安装Node环境/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FudG1h,size_16,color_FFFFFF,t_70-20210110193527432.png","hash":"3f80c2c6776a49748839c547d49209185c91702d","modified":1620957677075},{"_id":"source/_posts/Mac电脑安装Node环境/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FudG1h,size_16,color_FFFFFF,t_70-20210110193527478.png","hash":"e89ee57b894d222cbe22b123a15de6e014a98f1b","modified":1620957677076},{"_id":"source/_posts/Mac电脑安装Node环境/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FudG1h,size_16,color_FFFFFF,t_70-20210110193527515.png","hash":"0f634f568326f3bb7e7ab9c6a9887b2edc193018","modified":1620957677077},{"_id":"source/_posts/Mac电脑安装Node环境/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FudG1h,size_16,color_FFFFFF,t_70-20210110193527511.png","hash":"bde14a684c85d621c7d27c819480e037d94691e6","modified":1620957677077},{"_id":"source/_posts/Mac电脑安装Node环境/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FudG1h,size_16,color_FFFFFF,t_70-20210110193527553.png","hash":"7ccd4aff755e557bcd5ede4b6fd364fefd075705","modified":1620957677077},{"_id":"source/_posts/Mac电脑安装Node环境/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FudG1h,size_16,color_FFFFFF,t_70-20210110193527474.png","hash":"21c3cb121a93c810565e4c2d65666499892adb79","modified":1620957677075},{"_id":"source/_posts/haofenqi/1.png","hash":"cce7e9bc7b99bc567378538fc6c7a06eea345c1b","modified":1620957677081},{"_id":"source/_posts/heidakeng/1.png","hash":"20b9ccae600610c858d2ad12bd6533cf498437fa","modified":1620957677083},{"_id":"source/_posts/heidakeng/3.png","hash":"ec33cc44038c1bc3318c62c4dcd00ce3ee7e29c1","modified":1620957677106},{"_id":"source/_posts/heidakeng/4.png","hash":"b9a0e2749e12370bc4a45f57e9daf821fb29495c","modified":1620957677121},{"_id":"source/_posts/heidakeng/5.png","hash":"db4668baaf7c827775f235b52a584866794ee35f","modified":1620957677121},{"_id":"source/_posts/hexi-assist/4.jpg","hash":"c088a2f3283416a07b77dc64421d89a7714813ab","modified":1620957677127},{"_id":"source/_posts/hexi-assist/3.jpg","hash":"051675e0587a898dbb716909ef62ac83738a8424","modified":1620957677127},{"_id":"source/_posts/hexi-assist/2.jpg","hash":"f7b1f747b348e2c45ebd9ca27ddfe4ea6dd0ef4e","modified":1620957677127},{"_id":"source/_posts/hexo博客配置/image-20210109161634042.png","hash":"d9a9bd60acdc71ad3ae8c84b19a51f88cbd372e6","modified":1620957677135},{"_id":"source/_posts/Hexi/2.jpg","hash":"57dc9f5770a29e045914cffc7cfcc4c4a22c6689","modified":1620957677071},{"_id":"source/_posts/Hexi/4.jpg","hash":"6d1db6ec447913c0bb773d51eb2ce6e30a642aec","modified":1620957677072},{"_id":"source/_posts/Mac电脑安装Node环境/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FudG1h,size_16,color_FFFFFF,t_70-20210110193527509.png","hash":"625b44bb616dc45e23dd6b55c2f62419bf1aa739","modified":1620957677076},{"_id":"source/_posts/Mac电脑安装Node环境/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FudG1h,size_16,color_FFFFFF,t_70.png","hash":"a9850497320354f2925285ae9b337e49239a84d1","modified":1620957677078},{"_id":"source/_posts/heidakeng/10.png","hash":"ed39d064354434f4d919d409a65c8f7b26138e1c","modified":1620957677083},{"_id":"source/_posts/wordpress安装步骤/1240-20210110191959901.png","hash":"ede0715ab80eb4a50f02956a4d223b41fb5f6308","modified":1620957677137},{"_id":"source/_posts/wordpress安装步骤/1240-20210110192000056.png","hash":"4d1b512b2706e676eff4e80379a9ee5ad86f64c9","modified":1620957677138},{"_id":"source/_posts/程序员修炼之道-从小工到专家读书感悟/1.jpg","hash":"50da13d0141d4eaf43d371411aad60948303c1b8","modified":1620957677147},{"_id":"source/_posts/heidakeng/6.png","hash":"fa2782e191f50bff967cbe6c85f2c3e1843c3199","modified":1620957677122},{"_id":"source/_posts/heidakeng/7.png","hash":"7c4800c78d6910b09b0aa14c6ec1626d92e05bbb","modified":1620957677122},{"_id":"source/_posts/hexi-assist/1.jpg","hash":"82e7443d8eaa54325b1142fb1b737dbffe1ac3ab","modified":1620957677126},{"_id":"source/_posts/heidakeng/9.png","hash":"36e9ecdde62ebdaa54e9a653e15cd1fd97b02b75","modified":1620957677125},{"_id":"source/_posts/heidakeng/2.png","hash":"fa2782e191f50bff967cbe6c85f2c3e1843c3199","modified":1620957677101},{"_id":"source/_posts/heidakeng/8.png","hash":"9ae7cd3e0e39315294f5f27714f0efd7a119d5ab","modified":1620957677124},{"_id":"source/_posts/wordpress安装步骤/1240.png","hash":"1c790804c22cd73fef082ad847e0a3dbae00e41c","modified":1620957677138},{"_id":"source/_posts/Hexi/1.jpg","hash":"6022a77b50f5bb86e1866d6726873dbfbb0918b4","modified":1620957677071},{"_id":"source/_posts/git操作/Git操作使用.png","hash":"3a827d4df07f4084ed86b5ca4104e7d63743eec1","modified":1620957677081},{"_id":"source/_posts/hexi-travel/1.png","hash":"8f6c5e85e55adaab5f19493212c088fbd19782ca","modified":1620957677129},{"_id":"source/_posts/关于技术实验室网站的创建设想/1.jpg","hash":"c6b264e8e87ed60487ab02e4199c55487c91306a","modified":1620957677141},{"_id":"source/_posts/hexi-travel/2.png","hash":"8c695dbaa909dfe635ad5099c695f097470eed3d","modified":1620957677132},{"_id":"source/_posts/hexi-travel/3.png","hash":"8c695dbaa909dfe635ad5099c695f097470eed3d","modified":1620957677135},{"_id":"source/_posts/成为更好的程序员要做到的10个方法/1.png","hash":"83f0d1ff8d157a9a1a78bcedc0070d45e185b1e2","modified":1620957677145}],"Category":[{"name":"前端开发","_id":"ckonpno2i0008kuo4290z4scz"},{"name":"电脑操作","_id":"ckonpno2y000dkuo4zew9vdy3"},{"name":"博客建站","_id":"ckonpno34000jkuo4rs2gubfp"},{"name":"设计架构","_id":"ckonpno3a000wkuo4bd9dqs9c"},{"name":"环境搭建","_id":"ckonpno3g0015kuo4p23b3mq4"},{"name":"系统操作","_id":"ckonpno3j001bkuo4ukxo7iku"},{"name":"编程工具","_id":"ckonpno3p001ikuo483cb6t4l"},{"name":"苹果开发","_id":"ckonpno3t001pkuo4qcc19fgr"},{"name":"编程思想","_id":"ckonpno4f002ikuo4b2tc1f8s"}],"Data":[],"Page":[{"_content":"","source":"step/俱乐部管理小程序.md","raw":"","date":"2021-05-14T02:01:17.148Z","updated":"2021-05-14T02:01:17.148Z","path":"step/俱乐部管理小程序.html","title":"","comments":1,"layout":"page","_id":"ckonpno1f0000kuo4qga0gbc0","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"step/免费制作电子书.md","raw":"","date":"2021-05-14T02:01:17.148Z","updated":"2021-05-14T02:01:17.148Z","path":"step/免费制作电子书.html","title":"","comments":1,"layout":"page","_id":"ckonpno1i0001kuo40ett8dnc","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"step/国旗猜猜猜.md","raw":"","date":"2021-05-14T02:01:17.148Z","updated":"2021-05-14T02:01:17.148Z","path":"step/国旗猜猜猜.html","title":"","comments":1,"layout":"page","_id":"ckonpno1j0002kuo4a174tk0q","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"step/车标猜猜猜.md","raw":"","date":"2021-05-14T02:01:17.148Z","updated":"2021-05-14T02:01:17.148Z","path":"step/车标猜猜猜.html","title":"","comments":1,"layout":"page","_id":"ckonpno1l0003kuo4q7d42paw","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"step/制作个人导航网站.md","raw":"","date":"2021-05-14T02:01:17.148Z","updated":"2021-05-14T02:01:17.148Z","path":"step/制作个人导航网站.html","title":"","comments":1,"layout":"page","_id":"ckonpno1m0004kuo4yxmno0cv","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"**准备工作：**\n\niTerm命令行工具\n\n配置node环境\n\nhttps://www.runoob.com/w3cnote/nvm-manager-node-versions.html\n\npython环境：命令行中输入：\n\n```\npython\n```\n\nHexo npm安装包下载\n\n```\nnpm install -g hexo-cli\n```\n\ngit仓库管理\n\n```\nhttps://git-scm.com/download\n```\n\nTypora：Markdown语法工具\n\ngithub账号：www.github.com\n\n\n\n**搭建步骤：**\n\n* Hexo命令初始化博客\n* Hexo官网选择喜爱的主题\n* Hexo修改配置文件\n* github建立仓库配置page页面\n* 编写文章生成网页\n* 把网站推送到github\n\n* 搞定收工","source":"step/免费博客搭建.md","raw":"**准备工作：**\n\niTerm命令行工具\n\n配置node环境\n\nhttps://www.runoob.com/w3cnote/nvm-manager-node-versions.html\n\npython环境：命令行中输入：\n\n```\npython\n```\n\nHexo npm安装包下载\n\n```\nnpm install -g hexo-cli\n```\n\ngit仓库管理\n\n```\nhttps://git-scm.com/download\n```\n\nTypora：Markdown语法工具\n\ngithub账号：www.github.com\n\n\n\n**搭建步骤：**\n\n* Hexo命令初始化博客\n* Hexo官网选择喜爱的主题\n* Hexo修改配置文件\n* github建立仓库配置page页面\n* 编写文章生成网页\n* 把网站推送到github\n\n* 搞定收工","date":"2021-05-14T02:01:17.148Z","updated":"2021-05-14T02:01:17.148Z","path":"step/免费博客搭建.html","title":"","comments":1,"layout":"page","_id":"ckonpno5v0049kuo4nwbqr8bf","content":"<p><strong>准备工作：</strong></p>\n<p>iTerm命令行工具</p>\n<p>配置node环境</p>\n<p><a href=\"https://www.runoob.com/w3cnote/nvm-manager-node-versions.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/w3cnote/nvm-manager-node-versions.html</a></p>\n<p>python环境：命令行中输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python</span><br></pre></td></tr></table></figure>\n<p>Hexo npm安装包下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>git仓库管理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://git-scm.com/download</span><br></pre></td></tr></table></figure>\n<p>Typora：Markdown语法工具</p>\n<p>github账号：<a href=\"http://www.github.com\" target=\"_blank\" rel=\"noopener\">www.github.com</a></p>\n<p><strong>搭建步骤：</strong></p>\n<ul>\n<li>Hexo命令初始化博客</li>\n<li>Hexo官网选择喜爱的主题</li>\n<li>Hexo修改配置文件</li>\n<li>github建立仓库配置page页面</li>\n<li>编写文章生成网页</li>\n<li><p>把网站推送到github</p>\n</li>\n<li><p>搞定收工</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>准备工作：</strong></p>\n<p>iTerm命令行工具</p>\n<p>配置node环境</p>\n<p><a href=\"https://www.runoob.com/w3cnote/nvm-manager-node-versions.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/w3cnote/nvm-manager-node-versions.html</a></p>\n<p>python环境：命令行中输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python</span><br></pre></td></tr></table></figure>\n<p>Hexo npm安装包下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>git仓库管理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://git-scm.com/download</span><br></pre></td></tr></table></figure>\n<p>Typora：Markdown语法工具</p>\n<p>github账号：<a href=\"http://www.github.com\" target=\"_blank\" rel=\"noopener\">www.github.com</a></p>\n<p><strong>搭建步骤：</strong></p>\n<ul>\n<li>Hexo命令初始化博客</li>\n<li>Hexo官网选择喜爱的主题</li>\n<li>Hexo修改配置文件</li>\n<li>github建立仓库配置page页面</li>\n<li>编写文章生成网页</li>\n<li><p>把网站推送到github</p>\n</li>\n<li><p>搞定收工</p>\n</li>\n</ul>\n"},{"title":"categories","date":"2021-01-09T15:50:25.000Z","type":"categories","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-01-09 15:50:25\ntype: \"categories\"\nlayout: \"categories\"\ncomments: false    #关闭评论widget\n---","updated":"2021-05-14T02:01:17.147Z","path":"categories/index.html","_id":"ckonpno60004bkuo488wvahfu","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-01-09T15:51:39.000Z","type":"tags","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-01-09 15:51:39\ntype: \"tags\"\nlayout: \"tags\"\ncomments: false   #关闭评论widget\n---\n","updated":"2021-05-14T02:01:17.148Z","path":"tags/index.html","_id":"ckonpno61004dkuo4eklbbnxa","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"Shawn Smith\n好好学习，天天向上","source":"about/index.md","raw":"Shawn Smith\n好好学习，天天向上","date":"2021-05-14T02:01:17.147Z","updated":"2021-05-14T02:01:17.147Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"ckonpno6s004gkuo4ytb1e2w1","content":"<p>Shawn Smith<br>好好学习，天天向上</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Shawn Smith<br>好好学习，天天向上</p>\n"}],"Post":[{"title":"APP中常用的混合加密","date":"2019-03-06T17:40:49.000Z","_content":"","source":"_posts/APP中常用的混合加密.md","raw":"---\ntitle: APP中常用的混合加密\ndate: 2019-03-06 17:40:49\ntags: \n\n---\n","slug":"APP中常用的混合加密","published":1,"updated":"2021-05-14T02:01:17.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno230005kuo4dkkn43an","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"CSS over-flow的使用","date":"2021-01-16T14:07:59.000Z","_content":"\n\n\n当元素溢出内容区，需要使用overflow属性来进行裁剪\n\noverflow有以下几个可选值：\n\n| visible | 默认值。内容不会被修剪，会呈现在元素框之外。             |\n| ------- | -------------------------------------------------------- |\n| hidden  | 内容会被修剪，并且其余内容是不可见的。                   |\n| scroll  | 内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。 |\n| auto    | 如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。 |\n| inherit | 规定应该从父元素继承 overflow 属性的值。                 |\n\n**overflow-X | overflow-y**\n\n　　overflow-x和overflow-y的属性原本是IE浏览器独自拓展的属性，后来被CSS3采用，并标准化。overflow-x主要用来定义对水平方向内容溢出的剪切，而overflow-y主要用来定义对垂直方向内容溢出的剪切\n\n　　[注意]如果overflow-x和overflow-y值相同则等同于overflow。如果overflow-x和overflow-y值不同，且其中一个值显式设置为visible或未设置默认为visible，而另外一个值是非visible的值。则visible值会被重置为auto\n\n两个独有的值：\n\nno-display：如果内容不适合内容框，则删除整个框。\n\nno-content：如果内容不适合内容框，则隐藏整个内容。","source":"_posts/CSS-over-flow的使用.md","raw":"---\ntitle: CSS over-flow的使用\ndate: 2021-01-16 14:07:59\ntags: CSS\ncategories: 前端开发\n---\n\n\n\n当元素溢出内容区，需要使用overflow属性来进行裁剪\n\noverflow有以下几个可选值：\n\n| visible | 默认值。内容不会被修剪，会呈现在元素框之外。             |\n| ------- | -------------------------------------------------------- |\n| hidden  | 内容会被修剪，并且其余内容是不可见的。                   |\n| scroll  | 内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。 |\n| auto    | 如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。 |\n| inherit | 规定应该从父元素继承 overflow 属性的值。                 |\n\n**overflow-X | overflow-y**\n\n　　overflow-x和overflow-y的属性原本是IE浏览器独自拓展的属性，后来被CSS3采用，并标准化。overflow-x主要用来定义对水平方向内容溢出的剪切，而overflow-y主要用来定义对垂直方向内容溢出的剪切\n\n　　[注意]如果overflow-x和overflow-y值相同则等同于overflow。如果overflow-x和overflow-y值不同，且其中一个值显式设置为visible或未设置默认为visible，而另外一个值是非visible的值。则visible值会被重置为auto\n\n两个独有的值：\n\nno-display：如果内容不适合内容框，则删除整个框。\n\nno-content：如果内容不适合内容框，则隐藏整个内容。","slug":"CSS-over-flow的使用","published":1,"updated":"2021-05-14T02:01:17.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno2a0006kuo4ulrmuug9","content":"<p>当元素溢出内容区，需要使用overflow属性来进行裁剪</p>\n<p>overflow有以下几个可选值：</p>\n<table>\n<thead>\n<tr>\n<th>visible</th>\n<th>默认值。内容不会被修剪，会呈现在元素框之外。</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hidden</td>\n<td>内容会被修剪，并且其余内容是不可见的。</td>\n</tr>\n<tr>\n<td>scroll</td>\n<td>内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</td>\n</tr>\n<tr>\n<td>auto</td>\n<td>如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定应该从父元素继承 overflow 属性的值。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>overflow-X | overflow-y</strong></p>\n<p>　　overflow-x和overflow-y的属性原本是IE浏览器独自拓展的属性，后来被CSS3采用，并标准化。overflow-x主要用来定义对水平方向内容溢出的剪切，而overflow-y主要用来定义对垂直方向内容溢出的剪切</p>\n<p>　　[注意]如果overflow-x和overflow-y值相同则等同于overflow。如果overflow-x和overflow-y值不同，且其中一个值显式设置为visible或未设置默认为visible，而另外一个值是非visible的值。则visible值会被重置为auto</p>\n<p>两个独有的值：</p>\n<p>no-display：如果内容不适合内容框，则删除整个框。</p>\n<p>no-content：如果内容不适合内容框，则隐藏整个内容。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>当元素溢出内容区，需要使用overflow属性来进行裁剪</p>\n<p>overflow有以下几个可选值：</p>\n<table>\n<thead>\n<tr>\n<th>visible</th>\n<th>默认值。内容不会被修剪，会呈现在元素框之外。</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hidden</td>\n<td>内容会被修剪，并且其余内容是不可见的。</td>\n</tr>\n<tr>\n<td>scroll</td>\n<td>内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</td>\n</tr>\n<tr>\n<td>auto</td>\n<td>如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定应该从父元素继承 overflow 属性的值。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>overflow-X | overflow-y</strong></p>\n<p>　　overflow-x和overflow-y的属性原本是IE浏览器独自拓展的属性，后来被CSS3采用，并标准化。overflow-x主要用来定义对水平方向内容溢出的剪切，而overflow-y主要用来定义对垂直方向内容溢出的剪切</p>\n<p>　　[注意]如果overflow-x和overflow-y值相同则等同于overflow。如果overflow-x和overflow-y值不同，且其中一个值显式设置为visible或未设置默认为visible，而另外一个值是非visible的值。则visible值会被重置为auto</p>\n<p>两个独有的值：</p>\n<p>no-display：如果内容不适合内容框，则删除整个框。</p>\n<p>no-content：如果内容不适合内容框，则隐藏整个内容。</p>\n"},{"title":"Chrom+Vimium实现全键盘操作","date":"2019-03-06T17:35:33.000Z","_content":"\n不用移动，确定，点击，全键盘搞定，不过部分文本选中这块要使用鼠标进行选中，当习惯键盘操作后会发现非常的快捷 \n####Tab and window shortcuts窗口标签快捷键\n| 快捷键组合                                                   | 功能                     | 说明               |      |\n| ------------------------------------------------------------ | ------------------------ | ------------------ | ---- |\n| Open a new window                                            | ⌘ + n                    | 新开窗口           |      |\n| Open a new window in Incognito mode                          | ⌘ + Shift + n            | 新建窗口匿名模式   |      |\n| Open a new tab, and jump to it                               | ⌘ + t                    | 进入新建标签       |      |\n| Reopen the last closed tab, and jump to it                   | ⌘ + Shift + t            | 进入上次关闭标签   |      |\n| Jump to the next open tab                                    | ⌘ + Option + Right arrow | 标签切换向后       |      |\n| Jump to the previous open tab                                | ⌘ + Option + Left arrow  | 标签切换向前       |      |\n| Jump to a specific tab                                       | ⌘ + 1 through ⌘ + 8      | 进入指定标签       |      |\n| Jump to the last tab                                         | ⌘ + 9                    | 进入最后一个标签   |      |\n| Open the previous page in your browsing history for the current tab | ⌘ + [ or ⌘ + Left arrow  | 向前               |      |\n| Open the next page in your browsing history for the current tab | ⌘ + ] or ⌘ + Right arrow | 向后               |      |\n| Closes the current tab or pop-up                             | ⌘ + w                    | 关闭标签或弹出     |      |\n| Closes the current window                                    | ⌘ + Shift + w            | 关闭当前窗口       |      |\n| Minimize the window                                          | ⌘ + m                    | 最小化Chrome       |      |\n| Hide Google Chrome                                           | ⌘ + h                    | 隐藏               |      |\n| Quit Google Chrome                                           | ⌘ + q                    | 关闭所有Chrome窗口 |      |\n\n####Google Chrome feature shortcuts工具快捷键\n| 功能                                               | 快捷键组合         | 说明           |      |\n| -------------------------------------------------- | ------------------ | -------------- | ---- |\n| Show or hide the Bookmarks Bar                     | ⌘ + Shift + b      | 显示隐藏书签   |      |\n| Open the Bookmark Manager                          | ⌘ + Option + b     | 书签栏管理     |      |\n| Open the Settings page in a new tab                | ⌘ + ,              | 打开设置页面   |      |\n| Open the History page in a new tab                 | ⌘ + y              | 打开历史页面   |      |\n| Open the Downloads page in a new tab               | ⌘ + Shift + j      | 打开下载页面   |      |\n| Open the Find Bar to search the current page       | ⌘ + f              | 当前查找       |      |\n| Jump to the next match to your Find Bar search     | ⌘ + g              | 查找下一个     |      |\n| Jump to the previous match to your Find Bar search | ⌘ + Shift + g      | 想找前一个     |      |\n| When Find Bar is open, search for selected text    | ⌘ + e              | 查找选中字段   |      |\n| Open Developer Tools                               | ⌘ + Option + i     | 打开开发者工具 |      |\n| Open the Clear Browsing Data options               | ⌘ + Shift + Delete | 清除记录       |      |\n| Log in as a different user or browse as a Guest    | ⌘ + Shift + m      | 登录           |      |\n\n####Address bar shortcuts\n| 功能                    | 快捷键组合 | 说明         |      |\n| ----------------------- | ---------- | ------------ | ---- |\n| Jump to the Address Bar | ⌘ + l      | 跳转到地址栏 |      |\n\n###Webpage shortcuts\n| 功能                                                       | 快捷键组合            | 说明                   |      |\n| ---------------------------------------------------------- | --------------------- | ---------------------- | ---- |\n| Open options to print the current page                     | ⌘ + p                 | 打印                   |      |\n| Open options to save the current page                      | ⌘ + s                 | 保存                   |      |\n| Reload your current page\t\t\t⌘ + r                  | 重新加载              |                        |      |\n| Reload your current page, ignoring cached content          | ⌘ + Shift + r         | 忽略缓存重新加载       |      |\n| Stop the page loading                                      | Esc                   | 停止加载               |      |\n| Browse clickable items moving forward                      | Tab                   | 切换                   |      |\n| Browse clickable items moving backward                     | Shift + Tab           | 向后切换               |      |\n| Open a file from your computer in Google Chrome            | ⌘ + o + Select a file | 浏览器打开             |      |\n| Display non-editable HTML source code for the current page | ⌘ + Option + u        | 显示源码               |      |\n| Open the JavaScript Console                                | ⌘ + Option + j        | 打开脚本编辑器         |      |\n| Save your current webpage as a bookmark                    | ⌘ + d                 | 保存为书签             |      |\n| Save all open tabs as bookmarks in a new folder            | ⌘ + Shift + d         | 保存所有打开页面为书签 |      |\n| Turn full-screen mode on or off                            | ⌘ + Ctrl + f          | 全屏                   |      |\n| Make everything on the page bigger                         | ⌘ and +               | 放大                   |      |\n| Make everything on the page smaller                        | ⌘ and -               | 缩小                   |      |\n| Return everything on the page to the default size          | ⌘ + 0                 | 还原                   |      |\n| Scroll down a webpage, a screen at a time                  | Space                 | 向下                   |      |\n| Scroll up a webpage, a screen at a time                    | Shift + Space         | 向上                   |      |\n| Search the web                                             | ⌘ + Option + f        | 搜索                   |      |\n| Open your home page in the current tab                     | ⌘ + Shift + h         | 打开首页               |      |\n\n##Vimnum\n作为Chrome的强大快捷器插件，实现快速浏览访问\n\n![Screen Shot 2017-03-22 at 15.13.40.png](http://upload-images.jianshu.io/upload_images/4767765-f7b06159d95572d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","source":"_posts/Chrom-Vimium实现全键盘操作.md","raw":"---\ntitle: Chrom+Vimium实现全键盘操作\ndate: 2019-03-06 17:35:33\ntags: 快捷键\ncategories: 电脑操作 \n---\n\n不用移动，确定，点击，全键盘搞定，不过部分文本选中这块要使用鼠标进行选中，当习惯键盘操作后会发现非常的快捷 \n####Tab and window shortcuts窗口标签快捷键\n| 快捷键组合                                                   | 功能                     | 说明               |      |\n| ------------------------------------------------------------ | ------------------------ | ------------------ | ---- |\n| Open a new window                                            | ⌘ + n                    | 新开窗口           |      |\n| Open a new window in Incognito mode                          | ⌘ + Shift + n            | 新建窗口匿名模式   |      |\n| Open a new tab, and jump to it                               | ⌘ + t                    | 进入新建标签       |      |\n| Reopen the last closed tab, and jump to it                   | ⌘ + Shift + t            | 进入上次关闭标签   |      |\n| Jump to the next open tab                                    | ⌘ + Option + Right arrow | 标签切换向后       |      |\n| Jump to the previous open tab                                | ⌘ + Option + Left arrow  | 标签切换向前       |      |\n| Jump to a specific tab                                       | ⌘ + 1 through ⌘ + 8      | 进入指定标签       |      |\n| Jump to the last tab                                         | ⌘ + 9                    | 进入最后一个标签   |      |\n| Open the previous page in your browsing history for the current tab | ⌘ + [ or ⌘ + Left arrow  | 向前               |      |\n| Open the next page in your browsing history for the current tab | ⌘ + ] or ⌘ + Right arrow | 向后               |      |\n| Closes the current tab or pop-up                             | ⌘ + w                    | 关闭标签或弹出     |      |\n| Closes the current window                                    | ⌘ + Shift + w            | 关闭当前窗口       |      |\n| Minimize the window                                          | ⌘ + m                    | 最小化Chrome       |      |\n| Hide Google Chrome                                           | ⌘ + h                    | 隐藏               |      |\n| Quit Google Chrome                                           | ⌘ + q                    | 关闭所有Chrome窗口 |      |\n\n####Google Chrome feature shortcuts工具快捷键\n| 功能                                               | 快捷键组合         | 说明           |      |\n| -------------------------------------------------- | ------------------ | -------------- | ---- |\n| Show or hide the Bookmarks Bar                     | ⌘ + Shift + b      | 显示隐藏书签   |      |\n| Open the Bookmark Manager                          | ⌘ + Option + b     | 书签栏管理     |      |\n| Open the Settings page in a new tab                | ⌘ + ,              | 打开设置页面   |      |\n| Open the History page in a new tab                 | ⌘ + y              | 打开历史页面   |      |\n| Open the Downloads page in a new tab               | ⌘ + Shift + j      | 打开下载页面   |      |\n| Open the Find Bar to search the current page       | ⌘ + f              | 当前查找       |      |\n| Jump to the next match to your Find Bar search     | ⌘ + g              | 查找下一个     |      |\n| Jump to the previous match to your Find Bar search | ⌘ + Shift + g      | 想找前一个     |      |\n| When Find Bar is open, search for selected text    | ⌘ + e              | 查找选中字段   |      |\n| Open Developer Tools                               | ⌘ + Option + i     | 打开开发者工具 |      |\n| Open the Clear Browsing Data options               | ⌘ + Shift + Delete | 清除记录       |      |\n| Log in as a different user or browse as a Guest    | ⌘ + Shift + m      | 登录           |      |\n\n####Address bar shortcuts\n| 功能                    | 快捷键组合 | 说明         |      |\n| ----------------------- | ---------- | ------------ | ---- |\n| Jump to the Address Bar | ⌘ + l      | 跳转到地址栏 |      |\n\n###Webpage shortcuts\n| 功能                                                       | 快捷键组合            | 说明                   |      |\n| ---------------------------------------------------------- | --------------------- | ---------------------- | ---- |\n| Open options to print the current page                     | ⌘ + p                 | 打印                   |      |\n| Open options to save the current page                      | ⌘ + s                 | 保存                   |      |\n| Reload your current page\t\t\t⌘ + r                  | 重新加载              |                        |      |\n| Reload your current page, ignoring cached content          | ⌘ + Shift + r         | 忽略缓存重新加载       |      |\n| Stop the page loading                                      | Esc                   | 停止加载               |      |\n| Browse clickable items moving forward                      | Tab                   | 切换                   |      |\n| Browse clickable items moving backward                     | Shift + Tab           | 向后切换               |      |\n| Open a file from your computer in Google Chrome            | ⌘ + o + Select a file | 浏览器打开             |      |\n| Display non-editable HTML source code for the current page | ⌘ + Option + u        | 显示源码               |      |\n| Open the JavaScript Console                                | ⌘ + Option + j        | 打开脚本编辑器         |      |\n| Save your current webpage as a bookmark                    | ⌘ + d                 | 保存为书签             |      |\n| Save all open tabs as bookmarks in a new folder            | ⌘ + Shift + d         | 保存所有打开页面为书签 |      |\n| Turn full-screen mode on or off                            | ⌘ + Ctrl + f          | 全屏                   |      |\n| Make everything on the page bigger                         | ⌘ and +               | 放大                   |      |\n| Make everything on the page smaller                        | ⌘ and -               | 缩小                   |      |\n| Return everything on the page to the default size          | ⌘ + 0                 | 还原                   |      |\n| Scroll down a webpage, a screen at a time                  | Space                 | 向下                   |      |\n| Scroll up a webpage, a screen at a time                    | Shift + Space         | 向上                   |      |\n| Search the web                                             | ⌘ + Option + f        | 搜索                   |      |\n| Open your home page in the current tab                     | ⌘ + Shift + h         | 打开首页               |      |\n\n##Vimnum\n作为Chrome的强大快捷器插件，实现快速浏览访问\n\n![Screen Shot 2017-03-22 at 15.13.40.png](http://upload-images.jianshu.io/upload_images/4767765-f7b06159d95572d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","slug":"Chrom-Vimium实现全键盘操作","published":1,"updated":"2021-05-14T02:01:17.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno2d0007kuo4i6c0rzkf","content":"<p>不用移动，确定，点击，全键盘搞定，不过部分文本选中这块要使用鼠标进行选中，当习惯键盘操作后会发现非常的快捷 </p>\n<p>####Tab and window shortcuts窗口标签快捷键<br>| 快捷键组合                                                   | 功能                     | 说明               |      |<br>| ———————————————————— | ———————— | —————— | —- |<br>| Open a new window                                            | ⌘ + n                    | 新开窗口           |      |<br>| Open a new window in Incognito mode                          | ⌘ + Shift + n            | 新建窗口匿名模式   |      |<br>| Open a new tab, and jump to it                               | ⌘ + t                    | 进入新建标签       |      |<br>| Reopen the last closed tab, and jump to it                   | ⌘ + Shift + t            | 进入上次关闭标签   |      |<br>| Jump to the next open tab                                    | ⌘ + Option + Right arrow | 标签切换向后       |      |<br>| Jump to the previous open tab                                | ⌘ + Option + Left arrow  | 标签切换向前       |      |<br>| Jump to a specific tab                                       | ⌘ + 1 through ⌘ + 8      | 进入指定标签       |      |<br>| Jump to the last tab                                         | ⌘ + 9                    | 进入最后一个标签   |      |<br>| Open the previous page in your browsing history for the current tab | ⌘ + [ or ⌘ + Left arrow  | 向前               |      |<br>| Open the next page in your browsing history for the current tab | ⌘ + ] or ⌘ + Right arrow | 向后               |      |<br>| Closes the current tab or pop-up                             | ⌘ + w                    | 关闭标签或弹出     |      |<br>| Closes the current window                                    | ⌘ + Shift + w            | 关闭当前窗口       |      |<br>| Minimize the window                                          | ⌘ + m                    | 最小化Chrome       |      |<br>| Hide Google Chrome                                           | ⌘ + h                    | 隐藏               |      |<br>| Quit Google Chrome                                           | ⌘ + q                    | 关闭所有Chrome窗口 |      |</p>\n<p>####Google Chrome feature shortcuts工具快捷键<br>| 功能                                               | 快捷键组合         | 说明           |      |<br>| ————————————————– | —————— | ————– | —- |<br>| Show or hide the Bookmarks Bar                     | ⌘ + Shift + b      | 显示隐藏书签   |      |<br>| Open the Bookmark Manager                          | ⌘ + Option + b     | 书签栏管理     |      |<br>| Open the Settings page in a new tab                | ⌘ + ,              | 打开设置页面   |      |<br>| Open the History page in a new tab                 | ⌘ + y              | 打开历史页面   |      |<br>| Open the Downloads page in a new tab               | ⌘ + Shift + j      | 打开下载页面   |      |<br>| Open the Find Bar to search the current page       | ⌘ + f              | 当前查找       |      |<br>| Jump to the next match to your Find Bar search     | ⌘ + g              | 查找下一个     |      |<br>| Jump to the previous match to your Find Bar search | ⌘ + Shift + g      | 想找前一个     |      |<br>| When Find Bar is open, search for selected text    | ⌘ + e              | 查找选中字段   |      |<br>| Open Developer Tools                               | ⌘ + Option + i     | 打开开发者工具 |      |<br>| Open the Clear Browsing Data options               | ⌘ + Shift + Delete | 清除记录       |      |<br>| Log in as a different user or browse as a Guest    | ⌘ + Shift + m      | 登录           |      |</p>\n<p>####Address bar shortcuts<br>| 功能                    | 快捷键组合 | 说明         |      |<br>| ———————– | ———- | ———— | —- |<br>| Jump to the Address Bar | ⌘ + l      | 跳转到地址栏 |      |</p>\n<p>###Webpage shortcuts<br>| 功能                                                       | 快捷键组合            | 说明                   |      |<br>| ———————————————————- | ——————— | ———————- | —- |<br>| Open options to print the current page                     | ⌘ + p                 | 打印                   |      |<br>| Open options to save the current page                      | ⌘ + s                 | 保存                   |      |<br>| Reload your current page            ⌘ + r                  | 重新加载              |                        |      |<br>| Reload your current page, ignoring cached content          | ⌘ + Shift + r         | 忽略缓存重新加载       |      |<br>| Stop the page loading                                      | Esc                   | 停止加载               |      |<br>| Browse clickable items moving forward                      | Tab                   | 切换                   |      |<br>| Browse clickable items moving backward                     | Shift + Tab           | 向后切换               |      |<br>| Open a file from your computer in Google Chrome            | ⌘ + o + Select a file | 浏览器打开             |      |<br>| Display non-editable HTML source code for the current page | ⌘ + Option + u        | 显示源码               |      |<br>| Open the JavaScript Console                                | ⌘ + Option + j        | 打开脚本编辑器         |      |<br>| Save your current webpage as a bookmark                    | ⌘ + d                 | 保存为书签             |      |<br>| Save all open tabs as bookmarks in a new folder            | ⌘ + Shift + d         | 保存所有打开页面为书签 |      |<br>| Turn full-screen mode on or off                            | ⌘ + Ctrl + f          | 全屏                   |      |<br>| Make everything on the page bigger                         | ⌘ and +               | 放大                   |      |<br>| Make everything on the page smaller                        | ⌘ and -               | 缩小                   |      |<br>| Return everything on the page to the default size          | ⌘ + 0                 | 还原                   |      |<br>| Scroll down a webpage, a screen at a time                  | Space                 | 向下                   |      |<br>| Scroll up a webpage, a screen at a time                    | Shift + Space         | 向上                   |      |<br>| Search the web                                             | ⌘ + Option + f        | 搜索                   |      |<br>| Open your home page in the current tab                     | ⌘ + Shift + h         | 打开首页               |      |</p>\n<p>##Vimnum<br>作为Chrome的强大快捷器插件，实现快速浏览访问</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/4767765-f7b06159d95572d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2017-03-22 at 15.13.40.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>不用移动，确定，点击，全键盘搞定，不过部分文本选中这块要使用鼠标进行选中，当习惯键盘操作后会发现非常的快捷 </p>\n<p>####Tab and window shortcuts窗口标签快捷键<br>| 快捷键组合                                                   | 功能                     | 说明               |      |<br>| ———————————————————— | ———————— | —————— | —- |<br>| Open a new window                                            | ⌘ + n                    | 新开窗口           |      |<br>| Open a new window in Incognito mode                          | ⌘ + Shift + n            | 新建窗口匿名模式   |      |<br>| Open a new tab, and jump to it                               | ⌘ + t                    | 进入新建标签       |      |<br>| Reopen the last closed tab, and jump to it                   | ⌘ + Shift + t            | 进入上次关闭标签   |      |<br>| Jump to the next open tab                                    | ⌘ + Option + Right arrow | 标签切换向后       |      |<br>| Jump to the previous open tab                                | ⌘ + Option + Left arrow  | 标签切换向前       |      |<br>| Jump to a specific tab                                       | ⌘ + 1 through ⌘ + 8      | 进入指定标签       |      |<br>| Jump to the last tab                                         | ⌘ + 9                    | 进入最后一个标签   |      |<br>| Open the previous page in your browsing history for the current tab | ⌘ + [ or ⌘ + Left arrow  | 向前               |      |<br>| Open the next page in your browsing history for the current tab | ⌘ + ] or ⌘ + Right arrow | 向后               |      |<br>| Closes the current tab or pop-up                             | ⌘ + w                    | 关闭标签或弹出     |      |<br>| Closes the current window                                    | ⌘ + Shift + w            | 关闭当前窗口       |      |<br>| Minimize the window                                          | ⌘ + m                    | 最小化Chrome       |      |<br>| Hide Google Chrome                                           | ⌘ + h                    | 隐藏               |      |<br>| Quit Google Chrome                                           | ⌘ + q                    | 关闭所有Chrome窗口 |      |</p>\n<p>####Google Chrome feature shortcuts工具快捷键<br>| 功能                                               | 快捷键组合         | 说明           |      |<br>| ————————————————– | —————— | ————– | —- |<br>| Show or hide the Bookmarks Bar                     | ⌘ + Shift + b      | 显示隐藏书签   |      |<br>| Open the Bookmark Manager                          | ⌘ + Option + b     | 书签栏管理     |      |<br>| Open the Settings page in a new tab                | ⌘ + ,              | 打开设置页面   |      |<br>| Open the History page in a new tab                 | ⌘ + y              | 打开历史页面   |      |<br>| Open the Downloads page in a new tab               | ⌘ + Shift + j      | 打开下载页面   |      |<br>| Open the Find Bar to search the current page       | ⌘ + f              | 当前查找       |      |<br>| Jump to the next match to your Find Bar search     | ⌘ + g              | 查找下一个     |      |<br>| Jump to the previous match to your Find Bar search | ⌘ + Shift + g      | 想找前一个     |      |<br>| When Find Bar is open, search for selected text    | ⌘ + e              | 查找选中字段   |      |<br>| Open Developer Tools                               | ⌘ + Option + i     | 打开开发者工具 |      |<br>| Open the Clear Browsing Data options               | ⌘ + Shift + Delete | 清除记录       |      |<br>| Log in as a different user or browse as a Guest    | ⌘ + Shift + m      | 登录           |      |</p>\n<p>####Address bar shortcuts<br>| 功能                    | 快捷键组合 | 说明         |      |<br>| ———————– | ———- | ———— | —- |<br>| Jump to the Address Bar | ⌘ + l      | 跳转到地址栏 |      |</p>\n<p>###Webpage shortcuts<br>| 功能                                                       | 快捷键组合            | 说明                   |      |<br>| ———————————————————- | ——————— | ———————- | —- |<br>| Open options to print the current page                     | ⌘ + p                 | 打印                   |      |<br>| Open options to save the current page                      | ⌘ + s                 | 保存                   |      |<br>| Reload your current page            ⌘ + r                  | 重新加载              |                        |      |<br>| Reload your current page, ignoring cached content          | ⌘ + Shift + r         | 忽略缓存重新加载       |      |<br>| Stop the page loading                                      | Esc                   | 停止加载               |      |<br>| Browse clickable items moving forward                      | Tab                   | 切换                   |      |<br>| Browse clickable items moving backward                     | Shift + Tab           | 向后切换               |      |<br>| Open a file from your computer in Google Chrome            | ⌘ + o + Select a file | 浏览器打开             |      |<br>| Display non-editable HTML source code for the current page | ⌘ + Option + u        | 显示源码               |      |<br>| Open the JavaScript Console                                | ⌘ + Option + j        | 打开脚本编辑器         |      |<br>| Save your current webpage as a bookmark                    | ⌘ + d                 | 保存为书签             |      |<br>| Save all open tabs as bookmarks in a new folder            | ⌘ + Shift + d         | 保存所有打开页面为书签 |      |<br>| Turn full-screen mode on or off                            | ⌘ + Ctrl + f          | 全屏                   |      |<br>| Make everything on the page bigger                         | ⌘ and +               | 放大                   |      |<br>| Make everything on the page smaller                        | ⌘ and -               | 缩小                   |      |<br>| Return everything on the page to the default size          | ⌘ + 0                 | 还原                   |      |<br>| Scroll down a webpage, a screen at a time                  | Space                 | 向下                   |      |<br>| Scroll up a webpage, a screen at a time                    | Shift + Space         | 向上                   |      |<br>| Search the web                                             | ⌘ + Option + f        | 搜索                   |      |<br>| Open your home page in the current tab                     | ⌘ + Shift + h         | 打开首页               |      |</p>\n<p>##Vimnum<br>作为Chrome的强大快捷器插件，实现快速浏览访问</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/4767765-f7b06159d95572d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2017-03-22 at 15.13.40.png\"></p>\n"},{"title":"Hexo使用方法","date":"2019-03-06T15:25:21.000Z","_content":"\n\nHexo静态博客工具基于先安装node.js  \n什么是Node.js:  \nNode.js® is a JavaScript runtime built on Chrome's V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js' package ecosystem, npm, is the largest ecosystem of open source libraries in the world.\n![Node.js是一个Javascript运行环境(runtime)。实际上它是对Google V8引擎进行了封装。V8引 擎执行Javascript的速度非常快，性能非常好。](http://baike.baidu.com/link?url=SyWoc-jV1q9IBR9lG6X1vII3xPpd0MGrorW2H5Y_I-Hy0Ba-DEIIuPaMk1WTLrpjyfdrUhP_27Ulhl72mLNd__)\n使用brew快速安装  \nbrew install node.js  \n\n安装Hexo工具(NPM是随同NodeJS一起安装的包管理工具)  \n\n```\nnpm install -g hexo-cli --no-optional  \n```\n创建hexo博客位置 \n```\nMkdir  ~/Document/blog\n```\n进行初始化\nHexo init \n\n## Praperation\nInstall [Nodejs](https://nodejs.org/en/) or Use Command \n###安装主题\n\n```\ngit clone https://github.com/wizardforcel/hexo-theme-cyanstyle.git themes/cyanstyle\n```\n修改 Hexo 的 _config.yml 中的 theme 为 cyanstyle。\n\n```dzh\n$ brew install nodejs\n```\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Command for Hexo\n```dzh\nUsage: hexo <command>\n\nCommands:\nclean     Removed generated files and cache.\nconfig    Get or set configurations.\ndeploy    Deploy your website.\ngenerate  Generate static files.\nhelp      Get help on a command.\ninit      Create a new Hexo folder.\nlist      List the information of the site\nmigrate   Migrate your site from other system to Hexo.\nnew       Create a new post.\npublish   Moves a draft post from _drafts to _posts folder.\nrender    Render files with renderer plugins.\nserver    Start the server.\nversion   Display version information.\n\nGlobal Options:\n--config  Specify config file instead of using _config.yml\n--cwd     Specify the CWD\n--debug   Display all verbose messages in the terminal\n--draft   Display draft posts\n--safe    Disable all plugins and scripts\n--silent  Hide output on console\n\nFor more help, you can use 'hexo help [command]' for the detailed information\nor you can check the docs: http://hexo.io/docs/\n```\n\nFor more help, you can use 'hexo help [command]' for the detailed information\nor you can check the docs: http://hexo.io/docs/\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/Hexo使用方法.md","raw":"---\ntitle: Hexo使用方法\ndate: 2019-03-06 15:25:21\ntags: 项目\ncategories: 博客建站\n---\n\n\nHexo静态博客工具基于先安装node.js  \n什么是Node.js:  \nNode.js® is a JavaScript runtime built on Chrome's V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js' package ecosystem, npm, is the largest ecosystem of open source libraries in the world.\n![Node.js是一个Javascript运行环境(runtime)。实际上它是对Google V8引擎进行了封装。V8引 擎执行Javascript的速度非常快，性能非常好。](http://baike.baidu.com/link?url=SyWoc-jV1q9IBR9lG6X1vII3xPpd0MGrorW2H5Y_I-Hy0Ba-DEIIuPaMk1WTLrpjyfdrUhP_27Ulhl72mLNd__)\n使用brew快速安装  \nbrew install node.js  \n\n安装Hexo工具(NPM是随同NodeJS一起安装的包管理工具)  \n\n```\nnpm install -g hexo-cli --no-optional  \n```\n创建hexo博客位置 \n```\nMkdir  ~/Document/blog\n```\n进行初始化\nHexo init \n\n## Praperation\nInstall [Nodejs](https://nodejs.org/en/) or Use Command \n###安装主题\n\n```\ngit clone https://github.com/wizardforcel/hexo-theme-cyanstyle.git themes/cyanstyle\n```\n修改 Hexo 的 _config.yml 中的 theme 为 cyanstyle。\n\n```dzh\n$ brew install nodejs\n```\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Command for Hexo\n```dzh\nUsage: hexo <command>\n\nCommands:\nclean     Removed generated files and cache.\nconfig    Get or set configurations.\ndeploy    Deploy your website.\ngenerate  Generate static files.\nhelp      Get help on a command.\ninit      Create a new Hexo folder.\nlist      List the information of the site\nmigrate   Migrate your site from other system to Hexo.\nnew       Create a new post.\npublish   Moves a draft post from _drafts to _posts folder.\nrender    Render files with renderer plugins.\nserver    Start the server.\nversion   Display version information.\n\nGlobal Options:\n--config  Specify config file instead of using _config.yml\n--cwd     Specify the CWD\n--debug   Display all verbose messages in the terminal\n--draft   Display draft posts\n--safe    Disable all plugins and scripts\n--silent  Hide output on console\n\nFor more help, you can use 'hexo help [command]' for the detailed information\nor you can check the docs: http://hexo.io/docs/\n```\n\nFor more help, you can use 'hexo help [command]' for the detailed information\nor you can check the docs: http://hexo.io/docs/\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"Hexo使用方法","published":1,"updated":"2021-05-14T02:01:17.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno2r000akuo4n4u4mkjh","content":"<p>Hexo静态博客工具基于先安装node.js<br>什么是Node.js:<br>Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js’ package ecosystem, npm, is the largest ecosystem of open source libraries in the world.<br><img src=\"http://baike.baidu.com/link?url=SyWoc-jV1q9IBR9lG6X1vII3xPpd0MGrorW2H5Y_I-Hy0Ba-DEIIuPaMk1WTLrpjyfdrUhP_27Ulhl72mLNd__\" alt=\"Node.js是一个Javascript运行环境(runtime)。实际上它是对Google V8引擎进行了封装。V8引 擎执行Javascript的速度非常快，性能非常好。\"><br>使用brew快速安装<br>brew install node.js  </p>\n<p>安装Hexo工具(NPM是随同NodeJS一起安装的包管理工具)  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli --no-optional</span><br></pre></td></tr></table></figure>\n<p>创建hexo博客位置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mkdir  ~/Document/blog</span><br></pre></td></tr></table></figure></p>\n<p>进行初始化<br>Hexo init </p>\n<h2 id=\"Praperation\"><a href=\"#Praperation\" class=\"headerlink\" title=\"Praperation\"></a>Praperation</h2><p>Install <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Nodejs</a> or Use Command </p>\n<p>###安装主题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/wizardforcel/hexo-theme-cyanstyle.git themes/cyanstyle</span><br></pre></td></tr></table></figure>\n<p>修改 Hexo 的 _config.yml 中的 theme 为 cyanstyle。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install nodejs</span><br></pre></td></tr></table></figure>\n<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Command-for-Hexo\"><a href=\"#Command-for-Hexo\" class=\"headerlink\" title=\"Command for Hexo\"></a>Command for Hexo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: hexo &lt;command&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">clean     Removed generated files and cache.</span><br><span class=\"line\">config    Get or set configurations.</span><br><span class=\"line\">deploy    Deploy your website.</span><br><span class=\"line\">generate  Generate static files.</span><br><span class=\"line\">help      Get help on a command.</span><br><span class=\"line\">init      Create a new Hexo folder.</span><br><span class=\"line\">list      List the information of the site</span><br><span class=\"line\">migrate   Migrate your site from other system to Hexo.</span><br><span class=\"line\">new       Create a new post.</span><br><span class=\"line\">publish   Moves a draft post from _drafts to _posts folder.</span><br><span class=\"line\">render    Render files with renderer plugins.</span><br><span class=\"line\">server    Start the server.</span><br><span class=\"line\">version   Display version information.</span><br><span class=\"line\"></span><br><span class=\"line\">Global Options:</span><br><span class=\"line\">--config  Specify config file instead of using _config.yml</span><br><span class=\"line\">--cwd     Specify the CWD</span><br><span class=\"line\">--debug   Display all verbose messages in the terminal</span><br><span class=\"line\">--draft   Display draft posts</span><br><span class=\"line\">--safe    Disable all plugins and scripts</span><br><span class=\"line\">--silent  Hide output on console</span><br><span class=\"line\"></span><br><span class=\"line\">For more help, you can use &apos;hexo help [command]&apos; for the detailed information</span><br><span class=\"line\">or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure>\n<p>For more help, you can use ‘hexo help [command]’ for the detailed information<br>or you can check the docs: <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">http://hexo.io/docs/</a></p>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start-1\"><a href=\"#Quick-Start-1\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post-1\"><a href=\"#Create-a-new-post-1\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server-1\"><a href=\"#Run-server-1\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files-1\"><a href=\"#Generate-static-files-1\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites-1\"><a href=\"#Deploy-to-remote-sites-1\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hexo静态博客工具基于先安装node.js<br>什么是Node.js:<br>Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js’ package ecosystem, npm, is the largest ecosystem of open source libraries in the world.<br><img src=\"http://baike.baidu.com/link?url=SyWoc-jV1q9IBR9lG6X1vII3xPpd0MGrorW2H5Y_I-Hy0Ba-DEIIuPaMk1WTLrpjyfdrUhP_27Ulhl72mLNd__\" alt=\"Node.js是一个Javascript运行环境(runtime)。实际上它是对Google V8引擎进行了封装。V8引 擎执行Javascript的速度非常快，性能非常好。\"><br>使用brew快速安装<br>brew install node.js  </p>\n<p>安装Hexo工具(NPM是随同NodeJS一起安装的包管理工具)  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli --no-optional</span><br></pre></td></tr></table></figure>\n<p>创建hexo博客位置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mkdir  ~/Document/blog</span><br></pre></td></tr></table></figure></p>\n<p>进行初始化<br>Hexo init </p>\n<h2 id=\"Praperation\"><a href=\"#Praperation\" class=\"headerlink\" title=\"Praperation\"></a>Praperation</h2><p>Install <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Nodejs</a> or Use Command </p>\n<p>###安装主题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/wizardforcel/hexo-theme-cyanstyle.git themes/cyanstyle</span><br></pre></td></tr></table></figure>\n<p>修改 Hexo 的 _config.yml 中的 theme 为 cyanstyle。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install nodejs</span><br></pre></td></tr></table></figure>\n<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Command-for-Hexo\"><a href=\"#Command-for-Hexo\" class=\"headerlink\" title=\"Command for Hexo\"></a>Command for Hexo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: hexo &lt;command&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">clean     Removed generated files and cache.</span><br><span class=\"line\">config    Get or set configurations.</span><br><span class=\"line\">deploy    Deploy your website.</span><br><span class=\"line\">generate  Generate static files.</span><br><span class=\"line\">help      Get help on a command.</span><br><span class=\"line\">init      Create a new Hexo folder.</span><br><span class=\"line\">list      List the information of the site</span><br><span class=\"line\">migrate   Migrate your site from other system to Hexo.</span><br><span class=\"line\">new       Create a new post.</span><br><span class=\"line\">publish   Moves a draft post from _drafts to _posts folder.</span><br><span class=\"line\">render    Render files with renderer plugins.</span><br><span class=\"line\">server    Start the server.</span><br><span class=\"line\">version   Display version information.</span><br><span class=\"line\"></span><br><span class=\"line\">Global Options:</span><br><span class=\"line\">--config  Specify config file instead of using _config.yml</span><br><span class=\"line\">--cwd     Specify the CWD</span><br><span class=\"line\">--debug   Display all verbose messages in the terminal</span><br><span class=\"line\">--draft   Display draft posts</span><br><span class=\"line\">--safe    Disable all plugins and scripts</span><br><span class=\"line\">--silent  Hide output on console</span><br><span class=\"line\"></span><br><span class=\"line\">For more help, you can use &apos;hexo help [command]&apos; for the detailed information</span><br><span class=\"line\">or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure>\n<p>For more help, you can use ‘hexo help [command]’ for the detailed information<br>or you can check the docs: <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">http://hexo.io/docs/</a></p>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start-1\"><a href=\"#Quick-Start-1\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post-1\"><a href=\"#Create-a-new-post-1\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server-1\"><a href=\"#Run-server-1\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files-1\"><a href=\"#Generate-static-files-1\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites-1\"><a href=\"#Deploy-to-remote-sites-1\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"JS严格模式有哪些限制","date":"2021-01-09T18:16:31.000Z","_content":"\n严格模式的主要目标之一，是显式捕获那些容易产生但在运行时并不明显的编码错误。严格模式中添加了如下的新运行时错误：\n\n- 给未声明的标识符赋值。在旧版 JavaScript 中，对输错的变量名称进行赋值，会导致在全局对象上创建属性。\n- 给只读的自有或继承属性赋值。在旧版 JavaScript 中，这种操作会静默地不生效。\n- 尝试在不可扩展的对象上创建属性。这样的对象在 ES5 之前并不存在，但为了保持一致性，在 ES5 中的严格模式之外执行此操作时，也将会静默地不生效。\n- 将 delete 运算符应用于不可删除的属性。在旧版 JavaScript 中，这时的 delete 会返回 false。\n- 将 delete 运算符应用于变量引用会产生语法错误。在旧版 JavaScript 中，对于显式声明的变量，delete 会返回 false。如果变量引用来自与 with 语句相配合的对象，或者属于全局对象的属性，那么它在旧版 JavaScript 中将被删除。\n\n严格模式还会移除或修改那些可能使程序更混乱、更难优化或更不安全的特性：\n\n- 禁用 with 语句。with 语句提供了一种变量引用的动态作用域形式，这种形式可能会造成困扰，并且不利于各实现中的优化。\n- eval 函数不能动态添加新绑定到当前作用域。\n- eval 和 arguments 不能用作变量名或参数名。\n- 函数的 arguments 对象不与其形参相关联。作为替代，严格模式下的 arguments 对象是一个数组式（array-like）的对象，其元素是传递给函数的参数值的快照。修改其元素不会修改相应形参的值，反之亦然。\n- 严格模式下，函数的 arguments 对象没有 callee 属性。将这样的 arguments 对象传递给其他代码时，不会再隐式转移出对其上函数的调用能力[81](https://github.com/doodlewind/jshistory-cn/blob/master/notes.md#81)。\n- 严格模式下，不允许实现在函数的 arguments 对象上提供 caller 属性。 caller 属性是 ES3 的一个非标准但已广泛实现的扩展，它允许遍历函数的调用堆栈，获取到所有的调用者函数。\n- 严格模式下，调用函数时如果没有提供 this 值，全局对象对其就不可见。","source":"_posts/JS严格模式有哪些限制.md","raw":"---\ntitle: JS严格模式有哪些限制\ndate: 2021-01-09 18:16:31\ntags: js\ncategories: 前端开发\n---\n\n严格模式的主要目标之一，是显式捕获那些容易产生但在运行时并不明显的编码错误。严格模式中添加了如下的新运行时错误：\n\n- 给未声明的标识符赋值。在旧版 JavaScript 中，对输错的变量名称进行赋值，会导致在全局对象上创建属性。\n- 给只读的自有或继承属性赋值。在旧版 JavaScript 中，这种操作会静默地不生效。\n- 尝试在不可扩展的对象上创建属性。这样的对象在 ES5 之前并不存在，但为了保持一致性，在 ES5 中的严格模式之外执行此操作时，也将会静默地不生效。\n- 将 delete 运算符应用于不可删除的属性。在旧版 JavaScript 中，这时的 delete 会返回 false。\n- 将 delete 运算符应用于变量引用会产生语法错误。在旧版 JavaScript 中，对于显式声明的变量，delete 会返回 false。如果变量引用来自与 with 语句相配合的对象，或者属于全局对象的属性，那么它在旧版 JavaScript 中将被删除。\n\n严格模式还会移除或修改那些可能使程序更混乱、更难优化或更不安全的特性：\n\n- 禁用 with 语句。with 语句提供了一种变量引用的动态作用域形式，这种形式可能会造成困扰，并且不利于各实现中的优化。\n- eval 函数不能动态添加新绑定到当前作用域。\n- eval 和 arguments 不能用作变量名或参数名。\n- 函数的 arguments 对象不与其形参相关联。作为替代，严格模式下的 arguments 对象是一个数组式（array-like）的对象，其元素是传递给函数的参数值的快照。修改其元素不会修改相应形参的值，反之亦然。\n- 严格模式下，函数的 arguments 对象没有 callee 属性。将这样的 arguments 对象传递给其他代码时，不会再隐式转移出对其上函数的调用能力[81](https://github.com/doodlewind/jshistory-cn/blob/master/notes.md#81)。\n- 严格模式下，不允许实现在函数的 arguments 对象上提供 caller 属性。 caller 属性是 ES3 的一个非标准但已广泛实现的扩展，它允许遍历函数的调用堆栈，获取到所有的调用者函数。\n- 严格模式下，调用函数时如果没有提供 this 值，全局对象对其就不可见。","slug":"JS严格模式有哪些限制","published":1,"updated":"2021-05-14T02:01:17.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno2v000bkuo4unx6cijr","content":"<p>严格模式的主要目标之一，是显式捕获那些容易产生但在运行时并不明显的编码错误。严格模式中添加了如下的新运行时错误：</p>\n<ul>\n<li>给未声明的标识符赋值。在旧版 JavaScript 中，对输错的变量名称进行赋值，会导致在全局对象上创建属性。</li>\n<li>给只读的自有或继承属性赋值。在旧版 JavaScript 中，这种操作会静默地不生效。</li>\n<li>尝试在不可扩展的对象上创建属性。这样的对象在 ES5 之前并不存在，但为了保持一致性，在 ES5 中的严格模式之外执行此操作时，也将会静默地不生效。</li>\n<li>将 delete 运算符应用于不可删除的属性。在旧版 JavaScript 中，这时的 delete 会返回 false。</li>\n<li>将 delete 运算符应用于变量引用会产生语法错误。在旧版 JavaScript 中，对于显式声明的变量，delete 会返回 false。如果变量引用来自与 with 语句相配合的对象，或者属于全局对象的属性，那么它在旧版 JavaScript 中将被删除。</li>\n</ul>\n<p>严格模式还会移除或修改那些可能使程序更混乱、更难优化或更不安全的特性：</p>\n<ul>\n<li>禁用 with 语句。with 语句提供了一种变量引用的动态作用域形式，这种形式可能会造成困扰，并且不利于各实现中的优化。</li>\n<li>eval 函数不能动态添加新绑定到当前作用域。</li>\n<li>eval 和 arguments 不能用作变量名或参数名。</li>\n<li>函数的 arguments 对象不与其形参相关联。作为替代，严格模式下的 arguments 对象是一个数组式（array-like）的对象，其元素是传递给函数的参数值的快照。修改其元素不会修改相应形参的值，反之亦然。</li>\n<li>严格模式下，函数的 arguments 对象没有 callee 属性。将这样的 arguments 对象传递给其他代码时，不会再隐式转移出对其上函数的调用能力<a href=\"https://github.com/doodlewind/jshistory-cn/blob/master/notes.md#81\" target=\"_blank\" rel=\"noopener\">81</a>。</li>\n<li>严格模式下，不允许实现在函数的 arguments 对象上提供 caller 属性。 caller 属性是 ES3 的一个非标准但已广泛实现的扩展，它允许遍历函数的调用堆栈，获取到所有的调用者函数。</li>\n<li>严格模式下，调用函数时如果没有提供 this 值，全局对象对其就不可见。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>严格模式的主要目标之一，是显式捕获那些容易产生但在运行时并不明显的编码错误。严格模式中添加了如下的新运行时错误：</p>\n<ul>\n<li>给未声明的标识符赋值。在旧版 JavaScript 中，对输错的变量名称进行赋值，会导致在全局对象上创建属性。</li>\n<li>给只读的自有或继承属性赋值。在旧版 JavaScript 中，这种操作会静默地不生效。</li>\n<li>尝试在不可扩展的对象上创建属性。这样的对象在 ES5 之前并不存在，但为了保持一致性，在 ES5 中的严格模式之外执行此操作时，也将会静默地不生效。</li>\n<li>将 delete 运算符应用于不可删除的属性。在旧版 JavaScript 中，这时的 delete 会返回 false。</li>\n<li>将 delete 运算符应用于变量引用会产生语法错误。在旧版 JavaScript 中，对于显式声明的变量，delete 会返回 false。如果变量引用来自与 with 语句相配合的对象，或者属于全局对象的属性，那么它在旧版 JavaScript 中将被删除。</li>\n</ul>\n<p>严格模式还会移除或修改那些可能使程序更混乱、更难优化或更不安全的特性：</p>\n<ul>\n<li>禁用 with 语句。with 语句提供了一种变量引用的动态作用域形式，这种形式可能会造成困扰，并且不利于各实现中的优化。</li>\n<li>eval 函数不能动态添加新绑定到当前作用域。</li>\n<li>eval 和 arguments 不能用作变量名或参数名。</li>\n<li>函数的 arguments 对象不与其形参相关联。作为替代，严格模式下的 arguments 对象是一个数组式（array-like）的对象，其元素是传递给函数的参数值的快照。修改其元素不会修改相应形参的值，反之亦然。</li>\n<li>严格模式下，函数的 arguments 对象没有 callee 属性。将这样的 arguments 对象传递给其他代码时，不会再隐式转移出对其上函数的调用能力<a href=\"https://github.com/doodlewind/jshistory-cn/blob/master/notes.md#81\" target=\"_blank\" rel=\"noopener\">81</a>。</li>\n<li>严格模式下，不允许实现在函数的 arguments 对象上提供 caller 属性。 caller 属性是 ES3 的一个非标准但已广泛实现的扩展，它允许遍历函数的调用堆栈，获取到所有的调用者函数。</li>\n<li>严格模式下，调用函数时如果没有提供 this 值，全局对象对其就不可见。</li>\n</ul>\n"},{"title":"Hexi","date":"2019-03-06T12:19:44.000Z","_content":"\n{% asset_img 1.jpg 产品图片 %}\n\n\n\n### 项目概述：\n\n自从毕业就在和系网络科技股份有限公司担任iOS工程师一职，公司主要是电子商务方向。在工作上全权负责公司iOS端系列产品的开发。参与公司业务模块的技术讨论与需求分析并负责实现。重构或者优化公司的相关开发模块，最开始的时候是每周加个版本并进行更新，后面完成的差不多了基本每两周迭代一个版本添加一个功能界面模块。曾将和系从原来的80多兆（采用了PhoneGap）的体积重构优化到了20多兆(Object-C原生)并进行框架上的重构。自集成相关通用类提高开发技术。开发倾向纯代码流（受苹果原生应用与移植和适配的影响）。\n\n和系App主要是服务于广大消费者的购物平台。不同于其它常规的购物平台，和系包括了抢红包抵现、签到获得积分换购商品，9块9包邮、众筹、新人福利等一系列的吸引用户购买的功能，引入了淘宝客的商品，另外有一套比较完善的类似直销发展会员的体系。这种方式促进用户邀请自己的好友注册成为和系会员，用户保有率较高，存留方式较好。公司一直在界面设计上下功夫，从无到有，越做越好，参考了大量的同行设计，也逐渐形成了自己的一套风格。\n\n### 产品亮点：\n\n蓝莓娃娃logo:公司是集团产业，旗下拥有自己的蓝莓产业基地，从去年开始在都江堰天马镇开了第一届蓝莓采摘节，邀请网红与游客互动，增加人气。总之蓝莓娃娃形像淘气可爱，还自带叶子作的翅膀，就像一个小仙子一样生动有趣。\n\n完善的营销体系：从购物-分享-收益形成了正向循环，一方面有购物上通过红包抵销部分价格、签到积分换购商品（签到一个月可以换30元话费）等一系列方式吸引流量，另一方面分享可以提高用户等级，最高到至尊（主要是返利收益）促进用户推广，再到收益，你的下线消费后你将会获得收益。整个体系各个环节有机结合，增加用户活跃度和粘性\n\n红包：每天都会有红包，等级越高能够抢的大红包就越多，不过只能抵用部分，不像以前可以全额。\n\n### 技术难度：\n\n支付难度：自有和系支付钱包，接入第三方包括银联，微信支付宝等，银联由于大幅调整过一次，导致过之前的版本不能使用银联支付。后面采用了动态显示支付方式的办法进行后端控制。之前由于支付宝安全漏洞导致被攻击过，所面做了调整，把安全部分的计算放到了后端进行验证。\n\n### 解决办法：\n\n1.最好写个SDK用于系列产品统一调用，方便集成开发使用。另一方面方便后台统一进行支付显示控制。\n\n2.支付数据一定要做好加密处理，不能外泄。\n\n安全难度：作为电子商务平台，对安全是相关关注的，目前自己就职的瑞骐金服的拳头产品就完成了一次安全升级：放弃了.NET的后台，而采取多线程处理能力更为强大的JAVA，另外数据库也换成了Orancle（这个是重点）。所以数据库作为核心，一定要建立一套严密的防范机制，防止SQL注入和直接操作。\n\n公司之前采用的最简单http传输的办法，所有核心数据暴露无疑，所以当然成为了被练手的对象，包括被无数次的调用短信发送Api。以前被各种攻击。后台采用了混合加密的办法，但是没有考虑很关键的问题：效率，一方面App每次加密都要进行ASP加密，128位资源消耗巨大，另一方面服务器还要解密，也是需要强大的计算能力，更关系的是请求量大的时候将无从下手，另外有效保护了数据安全，但效率不敢维恭，另外不能防止重放攻击。不过也是感谢那次经历，个人对DES加密和RSA加密有了更加深入的了解，个人实现了苹果端的加密。\n\n后面进行架构调整采用HTTPS加载方式增加安全性，不过由于App端兼容性设计不到位，导致了接口一个一个的换，后台返回的数据也有较大的变化，导致还要逐个去调试，大大降低了开发效率，不过技术还是没有完全到位，只保证了传输过程中不被窃取，但是发送源头还是存在被获取源数据的风险。\n\n解决办法：为什么当时我们没有想到Token呢，早就被大量使用的技术，另外还可能 采用报头加密和前后端序列协商等一系列安全组合，保证安全。网络传输明文真的太危险，核心的支付验证一定要放在后台，还要防止中间人攻击，还有就是App端的数据收发要独立出来成为一个单独的模块，提高扩展性与灵活性，最好接口都可以放在一个专门的地方。\n\n团队配合：公司团队组合能力不够强，虽然大家都各司其职，但是缺少一个技术出身的项目经理，要是有的话在软件开发，产品设计和开发架构上一开始就\b设计好，可以减少很多不必要的重新调整，另外核心技术在外包，一定要舍得培养自己的技术队伍，搞好技术成长的建设，很多公司有自己的研发中心这是个很明显的例子，这也是我离开最主要的原因。技术上属于闭门造车，缺少技术有效交流。还有就是技术团队应该是个敢于冒风险，尝试新技术的团队。不仅仅界面上要做得好看，技术上也要跟上才行。还有就是标准化开发，后面由于后台太忙，没有时间写接口，导致苹果端需要自发去解决，导致开发落后，非常浪费时间，让人沮丧。\n\n### 开发体会：\n\n和系是我第一次接手的中型项目，也是技术成长的一个主要见证，主要对整个项目进行了两次重构，第一次是从PhoneGap框架修改为了纯原生，另一次是受框架启发，重新对项目进行调整，一方面删除了很多不用的模块，另一方面使项目更加的规范可拓展。掌握了第三方支付集成、第三方登录集成\u001d、聊天融去SDK集成、自定义聊天界面开发、混合加密、Masonry约束布局及屏幕适配还有大量其它类别的使用等相关技术。\n\n附相关App界面：\n{% asset_img 2.jpg %}\n{% asset_img 3.jpg %}\n{% asset_img 4.jpg %}\n{% asset_img 5.jpg %}","source":"_posts/Hexi.md","raw":"---\ntitle: Hexi\ndate: 2019-03-06 12:19:44\ntags: 项目经历\n---\n\n{% asset_img 1.jpg 产品图片 %}\n\n\n\n### 项目概述：\n\n自从毕业就在和系网络科技股份有限公司担任iOS工程师一职，公司主要是电子商务方向。在工作上全权负责公司iOS端系列产品的开发。参与公司业务模块的技术讨论与需求分析并负责实现。重构或者优化公司的相关开发模块，最开始的时候是每周加个版本并进行更新，后面完成的差不多了基本每两周迭代一个版本添加一个功能界面模块。曾将和系从原来的80多兆（采用了PhoneGap）的体积重构优化到了20多兆(Object-C原生)并进行框架上的重构。自集成相关通用类提高开发技术。开发倾向纯代码流（受苹果原生应用与移植和适配的影响）。\n\n和系App主要是服务于广大消费者的购物平台。不同于其它常规的购物平台，和系包括了抢红包抵现、签到获得积分换购商品，9块9包邮、众筹、新人福利等一系列的吸引用户购买的功能，引入了淘宝客的商品，另外有一套比较完善的类似直销发展会员的体系。这种方式促进用户邀请自己的好友注册成为和系会员，用户保有率较高，存留方式较好。公司一直在界面设计上下功夫，从无到有，越做越好，参考了大量的同行设计，也逐渐形成了自己的一套风格。\n\n### 产品亮点：\n\n蓝莓娃娃logo:公司是集团产业，旗下拥有自己的蓝莓产业基地，从去年开始在都江堰天马镇开了第一届蓝莓采摘节，邀请网红与游客互动，增加人气。总之蓝莓娃娃形像淘气可爱，还自带叶子作的翅膀，就像一个小仙子一样生动有趣。\n\n完善的营销体系：从购物-分享-收益形成了正向循环，一方面有购物上通过红包抵销部分价格、签到积分换购商品（签到一个月可以换30元话费）等一系列方式吸引流量，另一方面分享可以提高用户等级，最高到至尊（主要是返利收益）促进用户推广，再到收益，你的下线消费后你将会获得收益。整个体系各个环节有机结合，增加用户活跃度和粘性\n\n红包：每天都会有红包，等级越高能够抢的大红包就越多，不过只能抵用部分，不像以前可以全额。\n\n### 技术难度：\n\n支付难度：自有和系支付钱包，接入第三方包括银联，微信支付宝等，银联由于大幅调整过一次，导致过之前的版本不能使用银联支付。后面采用了动态显示支付方式的办法进行后端控制。之前由于支付宝安全漏洞导致被攻击过，所面做了调整，把安全部分的计算放到了后端进行验证。\n\n### 解决办法：\n\n1.最好写个SDK用于系列产品统一调用，方便集成开发使用。另一方面方便后台统一进行支付显示控制。\n\n2.支付数据一定要做好加密处理，不能外泄。\n\n安全难度：作为电子商务平台，对安全是相关关注的，目前自己就职的瑞骐金服的拳头产品就完成了一次安全升级：放弃了.NET的后台，而采取多线程处理能力更为强大的JAVA，另外数据库也换成了Orancle（这个是重点）。所以数据库作为核心，一定要建立一套严密的防范机制，防止SQL注入和直接操作。\n\n公司之前采用的最简单http传输的办法，所有核心数据暴露无疑，所以当然成为了被练手的对象，包括被无数次的调用短信发送Api。以前被各种攻击。后台采用了混合加密的办法，但是没有考虑很关键的问题：效率，一方面App每次加密都要进行ASP加密，128位资源消耗巨大，另一方面服务器还要解密，也是需要强大的计算能力，更关系的是请求量大的时候将无从下手，另外有效保护了数据安全，但效率不敢维恭，另外不能防止重放攻击。不过也是感谢那次经历，个人对DES加密和RSA加密有了更加深入的了解，个人实现了苹果端的加密。\n\n后面进行架构调整采用HTTPS加载方式增加安全性，不过由于App端兼容性设计不到位，导致了接口一个一个的换，后台返回的数据也有较大的变化，导致还要逐个去调试，大大降低了开发效率，不过技术还是没有完全到位，只保证了传输过程中不被窃取，但是发送源头还是存在被获取源数据的风险。\n\n解决办法：为什么当时我们没有想到Token呢，早就被大量使用的技术，另外还可能 采用报头加密和前后端序列协商等一系列安全组合，保证安全。网络传输明文真的太危险，核心的支付验证一定要放在后台，还要防止中间人攻击，还有就是App端的数据收发要独立出来成为一个单独的模块，提高扩展性与灵活性，最好接口都可以放在一个专门的地方。\n\n团队配合：公司团队组合能力不够强，虽然大家都各司其职，但是缺少一个技术出身的项目经理，要是有的话在软件开发，产品设计和开发架构上一开始就\b设计好，可以减少很多不必要的重新调整，另外核心技术在外包，一定要舍得培养自己的技术队伍，搞好技术成长的建设，很多公司有自己的研发中心这是个很明显的例子，这也是我离开最主要的原因。技术上属于闭门造车，缺少技术有效交流。还有就是技术团队应该是个敢于冒风险，尝试新技术的团队。不仅仅界面上要做得好看，技术上也要跟上才行。还有就是标准化开发，后面由于后台太忙，没有时间写接口，导致苹果端需要自发去解决，导致开发落后，非常浪费时间，让人沮丧。\n\n### 开发体会：\n\n和系是我第一次接手的中型项目，也是技术成长的一个主要见证，主要对整个项目进行了两次重构，第一次是从PhoneGap框架修改为了纯原生，另一次是受框架启发，重新对项目进行调整，一方面删除了很多不用的模块，另一方面使项目更加的规范可拓展。掌握了第三方支付集成、第三方登录集成\u001d、聊天融去SDK集成、自定义聊天界面开发、混合加密、Masonry约束布局及屏幕适配还有大量其它类别的使用等相关技术。\n\n附相关App界面：\n{% asset_img 2.jpg %}\n{% asset_img 3.jpg %}\n{% asset_img 4.jpg %}\n{% asset_img 5.jpg %}","slug":"Hexi","published":1,"updated":"2021-05-14T02:01:17.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno2x000ckuo43wjb5j0p","content":"<img src=\"/2019/03/06/Hexi/1.jpg\" title=\"产品图片\">\n<h3 id=\"项目概述：\"><a href=\"#项目概述：\" class=\"headerlink\" title=\"项目概述：\"></a>项目概述：</h3><p>自从毕业就在和系网络科技股份有限公司担任iOS工程师一职，公司主要是电子商务方向。在工作上全权负责公司iOS端系列产品的开发。参与公司业务模块的技术讨论与需求分析并负责实现。重构或者优化公司的相关开发模块，最开始的时候是每周加个版本并进行更新，后面完成的差不多了基本每两周迭代一个版本添加一个功能界面模块。曾将和系从原来的80多兆（采用了PhoneGap）的体积重构优化到了20多兆(Object-C原生)并进行框架上的重构。自集成相关通用类提高开发技术。开发倾向纯代码流（受苹果原生应用与移植和适配的影响）。</p>\n<p>和系App主要是服务于广大消费者的购物平台。不同于其它常规的购物平台，和系包括了抢红包抵现、签到获得积分换购商品，9块9包邮、众筹、新人福利等一系列的吸引用户购买的功能，引入了淘宝客的商品，另外有一套比较完善的类似直销发展会员的体系。这种方式促进用户邀请自己的好友注册成为和系会员，用户保有率较高，存留方式较好。公司一直在界面设计上下功夫，从无到有，越做越好，参考了大量的同行设计，也逐渐形成了自己的一套风格。</p>\n<h3 id=\"产品亮点：\"><a href=\"#产品亮点：\" class=\"headerlink\" title=\"产品亮点：\"></a>产品亮点：</h3><p>蓝莓娃娃logo:公司是集团产业，旗下拥有自己的蓝莓产业基地，从去年开始在都江堰天马镇开了第一届蓝莓采摘节，邀请网红与游客互动，增加人气。总之蓝莓娃娃形像淘气可爱，还自带叶子作的翅膀，就像一个小仙子一样生动有趣。</p>\n<p>完善的营销体系：从购物-分享-收益形成了正向循环，一方面有购物上通过红包抵销部分价格、签到积分换购商品（签到一个月可以换30元话费）等一系列方式吸引流量，另一方面分享可以提高用户等级，最高到至尊（主要是返利收益）促进用户推广，再到收益，你的下线消费后你将会获得收益。整个体系各个环节有机结合，增加用户活跃度和粘性</p>\n<p>红包：每天都会有红包，等级越高能够抢的大红包就越多，不过只能抵用部分，不像以前可以全额。</p>\n<h3 id=\"技术难度：\"><a href=\"#技术难度：\" class=\"headerlink\" title=\"技术难度：\"></a>技术难度：</h3><p>支付难度：自有和系支付钱包，接入第三方包括银联，微信支付宝等，银联由于大幅调整过一次，导致过之前的版本不能使用银联支付。后面采用了动态显示支付方式的办法进行后端控制。之前由于支付宝安全漏洞导致被攻击过，所面做了调整，把安全部分的计算放到了后端进行验证。</p>\n<h3 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"解决办法：\"></a>解决办法：</h3><p>1.最好写个SDK用于系列产品统一调用，方便集成开发使用。另一方面方便后台统一进行支付显示控制。</p>\n<p>2.支付数据一定要做好加密处理，不能外泄。</p>\n<p>安全难度：作为电子商务平台，对安全是相关关注的，目前自己就职的瑞骐金服的拳头产品就完成了一次安全升级：放弃了.NET的后台，而采取多线程处理能力更为强大的JAVA，另外数据库也换成了Orancle（这个是重点）。所以数据库作为核心，一定要建立一套严密的防范机制，防止SQL注入和直接操作。</p>\n<p>公司之前采用的最简单http传输的办法，所有核心数据暴露无疑，所以当然成为了被练手的对象，包括被无数次的调用短信发送Api。以前被各种攻击。后台采用了混合加密的办法，但是没有考虑很关键的问题：效率，一方面App每次加密都要进行ASP加密，128位资源消耗巨大，另一方面服务器还要解密，也是需要强大的计算能力，更关系的是请求量大的时候将无从下手，另外有效保护了数据安全，但效率不敢维恭，另外不能防止重放攻击。不过也是感谢那次经历，个人对DES加密和RSA加密有了更加深入的了解，个人实现了苹果端的加密。</p>\n<p>后面进行架构调整采用HTTPS加载方式增加安全性，不过由于App端兼容性设计不到位，导致了接口一个一个的换，后台返回的数据也有较大的变化，导致还要逐个去调试，大大降低了开发效率，不过技术还是没有完全到位，只保证了传输过程中不被窃取，但是发送源头还是存在被获取源数据的风险。</p>\n<p>解决办法：为什么当时我们没有想到Token呢，早就被大量使用的技术，另外还可能 采用报头加密和前后端序列协商等一系列安全组合，保证安全。网络传输明文真的太危险，核心的支付验证一定要放在后台，还要防止中间人攻击，还有就是App端的数据收发要独立出来成为一个单独的模块，提高扩展性与灵活性，最好接口都可以放在一个专门的地方。</p>\n<p>团队配合：公司团队组合能力不够强，虽然大家都各司其职，但是缺少一个技术出身的项目经理，要是有的话在软件开发，产品设计和开发架构上一开始就\b设计好，可以减少很多不必要的重新调整，另外核心技术在外包，一定要舍得培养自己的技术队伍，搞好技术成长的建设，很多公司有自己的研发中心这是个很明显的例子，这也是我离开最主要的原因。技术上属于闭门造车，缺少技术有效交流。还有就是技术团队应该是个敢于冒风险，尝试新技术的团队。不仅仅界面上要做得好看，技术上也要跟上才行。还有就是标准化开发，后面由于后台太忙，没有时间写接口，导致苹果端需要自发去解决，导致开发落后，非常浪费时间，让人沮丧。</p>\n<h3 id=\"开发体会：\"><a href=\"#开发体会：\" class=\"headerlink\" title=\"开发体会：\"></a>开发体会：</h3><p>和系是我第一次接手的中型项目，也是技术成长的一个主要见证，主要对整个项目进行了两次重构，第一次是从PhoneGap框架修改为了纯原生，另一次是受框架启发，重新对项目进行调整，一方面删除了很多不用的模块，另一方面使项目更加的规范可拓展。掌握了第三方支付集成、第三方登录集成\u001d、聊天融去SDK集成、自定义聊天界面开发、混合加密、Masonry约束布局及屏幕适配还有大量其它类别的使用等相关技术。</p>\n<p>附相关App界面：<br><img src=\"/2019/03/06/Hexi/2.jpg\"><br><img src=\"/2019/03/06/Hexi/3.jpg\"><br><img src=\"/2019/03/06/Hexi/4.jpg\"><br><img src=\"/2019/03/06/Hexi/5.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/2019/03/06/Hexi/1.jpg\" title=\"产品图片\">\n<h3 id=\"项目概述：\"><a href=\"#项目概述：\" class=\"headerlink\" title=\"项目概述：\"></a>项目概述：</h3><p>自从毕业就在和系网络科技股份有限公司担任iOS工程师一职，公司主要是电子商务方向。在工作上全权负责公司iOS端系列产品的开发。参与公司业务模块的技术讨论与需求分析并负责实现。重构或者优化公司的相关开发模块，最开始的时候是每周加个版本并进行更新，后面完成的差不多了基本每两周迭代一个版本添加一个功能界面模块。曾将和系从原来的80多兆（采用了PhoneGap）的体积重构优化到了20多兆(Object-C原生)并进行框架上的重构。自集成相关通用类提高开发技术。开发倾向纯代码流（受苹果原生应用与移植和适配的影响）。</p>\n<p>和系App主要是服务于广大消费者的购物平台。不同于其它常规的购物平台，和系包括了抢红包抵现、签到获得积分换购商品，9块9包邮、众筹、新人福利等一系列的吸引用户购买的功能，引入了淘宝客的商品，另外有一套比较完善的类似直销发展会员的体系。这种方式促进用户邀请自己的好友注册成为和系会员，用户保有率较高，存留方式较好。公司一直在界面设计上下功夫，从无到有，越做越好，参考了大量的同行设计，也逐渐形成了自己的一套风格。</p>\n<h3 id=\"产品亮点：\"><a href=\"#产品亮点：\" class=\"headerlink\" title=\"产品亮点：\"></a>产品亮点：</h3><p>蓝莓娃娃logo:公司是集团产业，旗下拥有自己的蓝莓产业基地，从去年开始在都江堰天马镇开了第一届蓝莓采摘节，邀请网红与游客互动，增加人气。总之蓝莓娃娃形像淘气可爱，还自带叶子作的翅膀，就像一个小仙子一样生动有趣。</p>\n<p>完善的营销体系：从购物-分享-收益形成了正向循环，一方面有购物上通过红包抵销部分价格、签到积分换购商品（签到一个月可以换30元话费）等一系列方式吸引流量，另一方面分享可以提高用户等级，最高到至尊（主要是返利收益）促进用户推广，再到收益，你的下线消费后你将会获得收益。整个体系各个环节有机结合，增加用户活跃度和粘性</p>\n<p>红包：每天都会有红包，等级越高能够抢的大红包就越多，不过只能抵用部分，不像以前可以全额。</p>\n<h3 id=\"技术难度：\"><a href=\"#技术难度：\" class=\"headerlink\" title=\"技术难度：\"></a>技术难度：</h3><p>支付难度：自有和系支付钱包，接入第三方包括银联，微信支付宝等，银联由于大幅调整过一次，导致过之前的版本不能使用银联支付。后面采用了动态显示支付方式的办法进行后端控制。之前由于支付宝安全漏洞导致被攻击过，所面做了调整，把安全部分的计算放到了后端进行验证。</p>\n<h3 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"解决办法：\"></a>解决办法：</h3><p>1.最好写个SDK用于系列产品统一调用，方便集成开发使用。另一方面方便后台统一进行支付显示控制。</p>\n<p>2.支付数据一定要做好加密处理，不能外泄。</p>\n<p>安全难度：作为电子商务平台，对安全是相关关注的，目前自己就职的瑞骐金服的拳头产品就完成了一次安全升级：放弃了.NET的后台，而采取多线程处理能力更为强大的JAVA，另外数据库也换成了Orancle（这个是重点）。所以数据库作为核心，一定要建立一套严密的防范机制，防止SQL注入和直接操作。</p>\n<p>公司之前采用的最简单http传输的办法，所有核心数据暴露无疑，所以当然成为了被练手的对象，包括被无数次的调用短信发送Api。以前被各种攻击。后台采用了混合加密的办法，但是没有考虑很关键的问题：效率，一方面App每次加密都要进行ASP加密，128位资源消耗巨大，另一方面服务器还要解密，也是需要强大的计算能力，更关系的是请求量大的时候将无从下手，另外有效保护了数据安全，但效率不敢维恭，另外不能防止重放攻击。不过也是感谢那次经历，个人对DES加密和RSA加密有了更加深入的了解，个人实现了苹果端的加密。</p>\n<p>后面进行架构调整采用HTTPS加载方式增加安全性，不过由于App端兼容性设计不到位，导致了接口一个一个的换，后台返回的数据也有较大的变化，导致还要逐个去调试，大大降低了开发效率，不过技术还是没有完全到位，只保证了传输过程中不被窃取，但是发送源头还是存在被获取源数据的风险。</p>\n<p>解决办法：为什么当时我们没有想到Token呢，早就被大量使用的技术，另外还可能 采用报头加密和前后端序列协商等一系列安全组合，保证安全。网络传输明文真的太危险，核心的支付验证一定要放在后台，还要防止中间人攻击，还有就是App端的数据收发要独立出来成为一个单独的模块，提高扩展性与灵活性，最好接口都可以放在一个专门的地方。</p>\n<p>团队配合：公司团队组合能力不够强，虽然大家都各司其职，但是缺少一个技术出身的项目经理，要是有的话在软件开发，产品设计和开发架构上一开始就\b设计好，可以减少很多不必要的重新调整，另外核心技术在外包，一定要舍得培养自己的技术队伍，搞好技术成长的建设，很多公司有自己的研发中心这是个很明显的例子，这也是我离开最主要的原因。技术上属于闭门造车，缺少技术有效交流。还有就是技术团队应该是个敢于冒风险，尝试新技术的团队。不仅仅界面上要做得好看，技术上也要跟上才行。还有就是标准化开发，后面由于后台太忙，没有时间写接口，导致苹果端需要自发去解决，导致开发落后，非常浪费时间，让人沮丧。</p>\n<h3 id=\"开发体会：\"><a href=\"#开发体会：\" class=\"headerlink\" title=\"开发体会：\"></a>开发体会：</h3><p>和系是我第一次接手的中型项目，也是技术成长的一个主要见证，主要对整个项目进行了两次重构，第一次是从PhoneGap框架修改为了纯原生，另一次是受框架启发，重新对项目进行调整，一方面删除了很多不用的模块，另一方面使项目更加的规范可拓展。掌握了第三方支付集成、第三方登录集成\u001d、聊天融去SDK集成、自定义聊天界面开发、混合加密、Masonry约束布局及屏幕适配还有大量其它类别的使用等相关技术。</p>\n<p>附相关App界面：<br><img src=\"/2019/03/06/Hexi/2.jpg\"><br><img src=\"/2019/03/06/Hexi/3.jpg\"><br><img src=\"/2019/03/06/Hexi/4.jpg\"><br><img src=\"/2019/03/06/Hexi/5.jpg\"></p>\n"},{"title":"JS头像显示居中部分","date":"2021-01-09T18:38:28.000Z","_content":"\n\n\n在图片全屏轮播时，为了兼容更大的屏幕，我们常常把图片设置为很大，但是在显示的过程中，如果让图片随浏览器自动变化的话，常常会把图片压缩变形，影响显示，在不压缩图片的情况下，如何只显示图片的中间部分呢？\n目前提供两种解决方案：\n\n方案一：引入css\n\n```\n.parent {\n    position: relative;\n    overflow: hidden;\n 　　width:400px;\n　 　height:300px;\n}\n\n.child {\n    position: absolute;\n    top: -9999px;\n    bottom: -9999px;\n    left: -9999px;\n    right: -9999px;\n    margin: auto;\n\n}\n\n\n相应的html代码为：\n<!DOCTYPE html>\n<html lang=\"en\">\n　　<head>\n　　<meta charset=\"UTF-8\">\n　　<title>Document</title>\n　　<style type=\"text/css\">\n　　　　.parent {\n　　　　　　position: relative;\n　　　　　　overflow: hidden;\n　　　　　　height: 300px;\n　　　　　　width: 400px;\n　　　　}\n　　　　.child {\n　　　　　　position: absolute;\n　　　　　　top: -9999px;\n　　　　　　bottom: -9999px;\n　　　　　　left: -9999px;\n　　　　　　right: -9999px;\n　　　　　　margin: auto;\n　　　　}\n　　</style>\n</head>\n<body>\n<div class=\"parent\">\n　　<img class=\"child\" src=\"http://c11.eoemarket.com/upload/apps/2013/0420/131329/screenshots/21bf3021-aeef-4dbf-fd5c-6dd7c24cb1f3.jpg\">\n</div>\n</body>\n</html>\n```\n\n方案二：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <style type=\"text/css\">\n        body{\n            text-align: center;\n        }\n        .container{\n            width: 100%;\n            height: 400px;\n            margin: 0 auto;\n            overflow: hidden;\n        }\n        .container img{\n            margin: 0 -100% 0 -100%;\n            vertical-align: top;\n        }\n    </style>\n</head>\n<body>\n    <!-- 屏幕的放大或缩小都不会压缩里面的图片，里面的图片一直会在内容区域居中显示 -->\n    <div class=\"container\">\n        <img src=\"http://a.hiphotos.baidu.com/zhidao/pic/item/72f082025aafa40fa38bfc55a964034f79f019ec.jpg\" alt=\"\">\n    </div>\n</body>\n</html>\n```\n\n","source":"_posts/JS头像显示居中部分.md","raw":"---\ntitle: JS头像显示居中部分\ndate: 2021-01-09 18:38:28\ntags: JS\ncategories: 前端开发\n---\n\n\n\n在图片全屏轮播时，为了兼容更大的屏幕，我们常常把图片设置为很大，但是在显示的过程中，如果让图片随浏览器自动变化的话，常常会把图片压缩变形，影响显示，在不压缩图片的情况下，如何只显示图片的中间部分呢？\n目前提供两种解决方案：\n\n方案一：引入css\n\n```\n.parent {\n    position: relative;\n    overflow: hidden;\n 　　width:400px;\n　 　height:300px;\n}\n\n.child {\n    position: absolute;\n    top: -9999px;\n    bottom: -9999px;\n    left: -9999px;\n    right: -9999px;\n    margin: auto;\n\n}\n\n\n相应的html代码为：\n<!DOCTYPE html>\n<html lang=\"en\">\n　　<head>\n　　<meta charset=\"UTF-8\">\n　　<title>Document</title>\n　　<style type=\"text/css\">\n　　　　.parent {\n　　　　　　position: relative;\n　　　　　　overflow: hidden;\n　　　　　　height: 300px;\n　　　　　　width: 400px;\n　　　　}\n　　　　.child {\n　　　　　　position: absolute;\n　　　　　　top: -9999px;\n　　　　　　bottom: -9999px;\n　　　　　　left: -9999px;\n　　　　　　right: -9999px;\n　　　　　　margin: auto;\n　　　　}\n　　</style>\n</head>\n<body>\n<div class=\"parent\">\n　　<img class=\"child\" src=\"http://c11.eoemarket.com/upload/apps/2013/0420/131329/screenshots/21bf3021-aeef-4dbf-fd5c-6dd7c24cb1f3.jpg\">\n</div>\n</body>\n</html>\n```\n\n方案二：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <style type=\"text/css\">\n        body{\n            text-align: center;\n        }\n        .container{\n            width: 100%;\n            height: 400px;\n            margin: 0 auto;\n            overflow: hidden;\n        }\n        .container img{\n            margin: 0 -100% 0 -100%;\n            vertical-align: top;\n        }\n    </style>\n</head>\n<body>\n    <!-- 屏幕的放大或缩小都不会压缩里面的图片，里面的图片一直会在内容区域居中显示 -->\n    <div class=\"container\">\n        <img src=\"http://a.hiphotos.baidu.com/zhidao/pic/item/72f082025aafa40fa38bfc55a964034f79f019ec.jpg\" alt=\"\">\n    </div>\n</body>\n</html>\n```\n\n","slug":"JS头像显示居中部分","published":1,"updated":"2021-05-14T02:01:17.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno31000gkuo4l86u86pl","content":"<p>在图片全屏轮播时，为了兼容更大的屏幕，我们常常把图片设置为很大，但是在显示的过程中，如果让图片随浏览器自动变化的话，常常会把图片压缩变形，影响显示，在不压缩图片的情况下，如何只显示图片的中间部分呢？<br>目前提供两种解决方案：</p>\n<p>方案一：引入css</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\"> 　　width:400px;</span><br><span class=\"line\">　 　height:300px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: -9999px;</span><br><span class=\"line\">    bottom: -9999px;</span><br><span class=\"line\">    left: -9999px;</span><br><span class=\"line\">    right: -9999px;</span><br><span class=\"line\">    margin: auto;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">相应的html代码为：</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">　　&lt;head&gt;</span><br><span class=\"line\">　　&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">　　&lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">　　&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">　　　　.parent &#123;</span><br><span class=\"line\">　　　　　　position: relative;</span><br><span class=\"line\">　　　　　　overflow: hidden;</span><br><span class=\"line\">　　　　　　height: 300px;</span><br><span class=\"line\">　　　　　　width: 400px;</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　　　.child &#123;</span><br><span class=\"line\">　　　　　　position: absolute;</span><br><span class=\"line\">　　　　　　top: -9999px;</span><br><span class=\"line\">　　　　　　bottom: -9999px;</span><br><span class=\"line\">　　　　　　left: -9999px;</span><br><span class=\"line\">　　　　　　right: -9999px;</span><br><span class=\"line\">　　　　　　margin: auto;</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">　　&lt;img class=&quot;child&quot; src=&quot;http://c11.eoemarket.com/upload/apps/2013/0420/131329/screenshots/21bf3021-aeef-4dbf-fd5c-6dd7c24cb1f3.jpg&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>方案二：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        body&#123;</span><br><span class=\"line\">            text-align: center;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .container&#123;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">            height: 400px;</span><br><span class=\"line\">            margin: 0 auto;</span><br><span class=\"line\">            overflow: hidden;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .container img&#123;</span><br><span class=\"line\">            margin: 0 -100% 0 -100%;</span><br><span class=\"line\">            vertical-align: top;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;!-- 屏幕的放大或缩小都不会压缩里面的图片，里面的图片一直会在内容区域居中显示 --&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;img src=&quot;http://a.hiphotos.baidu.com/zhidao/pic/item/72f082025aafa40fa38bfc55a964034f79f019ec.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在图片全屏轮播时，为了兼容更大的屏幕，我们常常把图片设置为很大，但是在显示的过程中，如果让图片随浏览器自动变化的话，常常会把图片压缩变形，影响显示，在不压缩图片的情况下，如何只显示图片的中间部分呢？<br>目前提供两种解决方案：</p>\n<p>方案一：引入css</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\"> 　　width:400px;</span><br><span class=\"line\">　 　height:300px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: -9999px;</span><br><span class=\"line\">    bottom: -9999px;</span><br><span class=\"line\">    left: -9999px;</span><br><span class=\"line\">    right: -9999px;</span><br><span class=\"line\">    margin: auto;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">相应的html代码为：</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">　　&lt;head&gt;</span><br><span class=\"line\">　　&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">　　&lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">　　&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">　　　　.parent &#123;</span><br><span class=\"line\">　　　　　　position: relative;</span><br><span class=\"line\">　　　　　　overflow: hidden;</span><br><span class=\"line\">　　　　　　height: 300px;</span><br><span class=\"line\">　　　　　　width: 400px;</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　　　.child &#123;</span><br><span class=\"line\">　　　　　　position: absolute;</span><br><span class=\"line\">　　　　　　top: -9999px;</span><br><span class=\"line\">　　　　　　bottom: -9999px;</span><br><span class=\"line\">　　　　　　left: -9999px;</span><br><span class=\"line\">　　　　　　right: -9999px;</span><br><span class=\"line\">　　　　　　margin: auto;</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">　　&lt;img class=&quot;child&quot; src=&quot;http://c11.eoemarket.com/upload/apps/2013/0420/131329/screenshots/21bf3021-aeef-4dbf-fd5c-6dd7c24cb1f3.jpg&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>方案二：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        body&#123;</span><br><span class=\"line\">            text-align: center;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .container&#123;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">            height: 400px;</span><br><span class=\"line\">            margin: 0 auto;</span><br><span class=\"line\">            overflow: hidden;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .container img&#123;</span><br><span class=\"line\">            margin: 0 -100% 0 -100%;</span><br><span class=\"line\">            vertical-align: top;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;!-- 屏幕的放大或缩小都不会压缩里面的图片，里面的图片一直会在内容区域居中显示 --&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;img src=&quot;http://a.hiphotos.baidu.com/zhidao/pic/item/72f082025aafa40fa38bfc55a964034f79f019ec.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"JS图片压缩","date":"2021-01-09T18:43:01.000Z","_content":"\nJS图片压缩原理是进行重绘操作后提取新图片，耗时较长\n\n```\nfunction dealImage(base64, w, callback) {\n  var newImage = new Image();\n  var quality = 0.6;    \t\t\t\t\t\t\t\t//压缩系数0-1之间\n  newImage.src = base64;\n  newImage.setAttribute(\"crossOrigin\", 'Anonymous');\t//url为外域时需要\n  var imgWidth, imgHeight;\n  newImage.onload = function () {\n    imgWidth = this.width;\n    imgHeight = this.height;\n    var canvas = document.createElement(\"canvas\");\n    var ctx = canvas.getContext(\"2d\");\n    if (Math.max(imgWidth, imgHeight) > w) {\n    if (imgWidth > imgHeight) {\n    canvas.width = w;\n    canvas.height = w * imgHeight / imgWidth;\n    } else {\n    canvas.height = w;\n    canvas.width = w * imgWidth / imgHeight;\n    }\n    } else {\n    canvas.width = imgWidth;\n    canvas.height = imgHeight;\n    quality = 0.6;\n    }\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(this, 0, 0, canvas.width, canvas.height);\n    var base64 = canvas.toDataURL(\"image/jpeg\", quality); //压缩语句\n    // 如想确保图片压缩到自己想要的尺寸,如要求在50-150kb之间，请加以下语句，quality初始值根据情况自定\n    // while (base64.length / 1024 > 150) {\n    // \tquality -= 0.01;\n    // \tbase64 = canvas.toDataURL(\"image/jpeg\", quality);\n    // }\n    // 防止最后一次压缩低于最低尺寸，只要quality递减合理，无需考虑\n    // while (base64.length / 1024 < 50) {\n    // \tquality += 0.001;\n    // \tbase64 = canvas.toDataURL(\"image/jpeg\", quality);\n    // }\n    callback(base64);//必须通过回调函数返回，否则无法及时拿到该值\n  }\n}\n```\n\n回调方法\n\n```\nvar base64= path;\ndealImage(base64, 500, (newImage) => {\n\t\n});\n```\n\n","source":"_posts/JS图片压缩.md","raw":"---\ntitle: JS图片压缩\ndate: 2021-01-09 18:43:01\ntags:\n---\n\nJS图片压缩原理是进行重绘操作后提取新图片，耗时较长\n\n```\nfunction dealImage(base64, w, callback) {\n  var newImage = new Image();\n  var quality = 0.6;    \t\t\t\t\t\t\t\t//压缩系数0-1之间\n  newImage.src = base64;\n  newImage.setAttribute(\"crossOrigin\", 'Anonymous');\t//url为外域时需要\n  var imgWidth, imgHeight;\n  newImage.onload = function () {\n    imgWidth = this.width;\n    imgHeight = this.height;\n    var canvas = document.createElement(\"canvas\");\n    var ctx = canvas.getContext(\"2d\");\n    if (Math.max(imgWidth, imgHeight) > w) {\n    if (imgWidth > imgHeight) {\n    canvas.width = w;\n    canvas.height = w * imgHeight / imgWidth;\n    } else {\n    canvas.height = w;\n    canvas.width = w * imgWidth / imgHeight;\n    }\n    } else {\n    canvas.width = imgWidth;\n    canvas.height = imgHeight;\n    quality = 0.6;\n    }\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(this, 0, 0, canvas.width, canvas.height);\n    var base64 = canvas.toDataURL(\"image/jpeg\", quality); //压缩语句\n    // 如想确保图片压缩到自己想要的尺寸,如要求在50-150kb之间，请加以下语句，quality初始值根据情况自定\n    // while (base64.length / 1024 > 150) {\n    // \tquality -= 0.01;\n    // \tbase64 = canvas.toDataURL(\"image/jpeg\", quality);\n    // }\n    // 防止最后一次压缩低于最低尺寸，只要quality递减合理，无需考虑\n    // while (base64.length / 1024 < 50) {\n    // \tquality += 0.001;\n    // \tbase64 = canvas.toDataURL(\"image/jpeg\", quality);\n    // }\n    callback(base64);//必须通过回调函数返回，否则无法及时拿到该值\n  }\n}\n```\n\n回调方法\n\n```\nvar base64= path;\ndealImage(base64, 500, (newImage) => {\n\t\n});\n```\n\n","slug":"JS图片压缩","published":1,"updated":"2021-05-14T02:01:17.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno33000hkuo44o1x1onx","content":"<p>JS图片压缩原理是进行重绘操作后提取新图片，耗时较长</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function dealImage(base64, w, callback) &#123;</span><br><span class=\"line\">  var newImage = new Image();</span><br><span class=\"line\">  var quality = 0.6;    \t\t\t\t\t\t\t\t//压缩系数0-1之间</span><br><span class=\"line\">  newImage.src = base64;</span><br><span class=\"line\">  newImage.setAttribute(&quot;crossOrigin&quot;, &apos;Anonymous&apos;);\t//url为外域时需要</span><br><span class=\"line\">  var imgWidth, imgHeight;</span><br><span class=\"line\">  newImage.onload = function () &#123;</span><br><span class=\"line\">    imgWidth = this.width;</span><br><span class=\"line\">    imgHeight = this.height;</span><br><span class=\"line\">    var canvas = document.createElement(&quot;canvas&quot;);</span><br><span class=\"line\">    var ctx = canvas.getContext(&quot;2d&quot;);</span><br><span class=\"line\">    if (Math.max(imgWidth, imgHeight) &gt; w) &#123;</span><br><span class=\"line\">    if (imgWidth &gt; imgHeight) &#123;</span><br><span class=\"line\">    canvas.width = w;</span><br><span class=\"line\">    canvas.height = w * imgHeight / imgWidth;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">    canvas.height = w;</span><br><span class=\"line\">    canvas.width = w * imgWidth / imgHeight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">    canvas.width = imgWidth;</span><br><span class=\"line\">    canvas.height = imgHeight;</span><br><span class=\"line\">    quality = 0.6;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ctx.clearRect(0, 0, canvas.width, canvas.height);</span><br><span class=\"line\">    ctx.drawImage(this, 0, 0, canvas.width, canvas.height);</span><br><span class=\"line\">    var base64 = canvas.toDataURL(&quot;image/jpeg&quot;, quality); //压缩语句</span><br><span class=\"line\">    // 如想确保图片压缩到自己想要的尺寸,如要求在50-150kb之间，请加以下语句，quality初始值根据情况自定</span><br><span class=\"line\">    // while (base64.length / 1024 &gt; 150) &#123;</span><br><span class=\"line\">    // \tquality -= 0.01;</span><br><span class=\"line\">    // \tbase64 = canvas.toDataURL(&quot;image/jpeg&quot;, quality);</span><br><span class=\"line\">    // &#125;</span><br><span class=\"line\">    // 防止最后一次压缩低于最低尺寸，只要quality递减合理，无需考虑</span><br><span class=\"line\">    // while (base64.length / 1024 &lt; 50) &#123;</span><br><span class=\"line\">    // \tquality += 0.001;</span><br><span class=\"line\">    // \tbase64 = canvas.toDataURL(&quot;image/jpeg&quot;, quality);</span><br><span class=\"line\">    // &#125;</span><br><span class=\"line\">    callback(base64);//必须通过回调函数返回，否则无法及时拿到该值</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>回调方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var base64= path;</span><br><span class=\"line\">dealImage(base64, 500, (newImage) =&gt; &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>JS图片压缩原理是进行重绘操作后提取新图片，耗时较长</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function dealImage(base64, w, callback) &#123;</span><br><span class=\"line\">  var newImage = new Image();</span><br><span class=\"line\">  var quality = 0.6;    \t\t\t\t\t\t\t\t//压缩系数0-1之间</span><br><span class=\"line\">  newImage.src = base64;</span><br><span class=\"line\">  newImage.setAttribute(&quot;crossOrigin&quot;, &apos;Anonymous&apos;);\t//url为外域时需要</span><br><span class=\"line\">  var imgWidth, imgHeight;</span><br><span class=\"line\">  newImage.onload = function () &#123;</span><br><span class=\"line\">    imgWidth = this.width;</span><br><span class=\"line\">    imgHeight = this.height;</span><br><span class=\"line\">    var canvas = document.createElement(&quot;canvas&quot;);</span><br><span class=\"line\">    var ctx = canvas.getContext(&quot;2d&quot;);</span><br><span class=\"line\">    if (Math.max(imgWidth, imgHeight) &gt; w) &#123;</span><br><span class=\"line\">    if (imgWidth &gt; imgHeight) &#123;</span><br><span class=\"line\">    canvas.width = w;</span><br><span class=\"line\">    canvas.height = w * imgHeight / imgWidth;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">    canvas.height = w;</span><br><span class=\"line\">    canvas.width = w * imgWidth / imgHeight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">    canvas.width = imgWidth;</span><br><span class=\"line\">    canvas.height = imgHeight;</span><br><span class=\"line\">    quality = 0.6;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ctx.clearRect(0, 0, canvas.width, canvas.height);</span><br><span class=\"line\">    ctx.drawImage(this, 0, 0, canvas.width, canvas.height);</span><br><span class=\"line\">    var base64 = canvas.toDataURL(&quot;image/jpeg&quot;, quality); //压缩语句</span><br><span class=\"line\">    // 如想确保图片压缩到自己想要的尺寸,如要求在50-150kb之间，请加以下语句，quality初始值根据情况自定</span><br><span class=\"line\">    // while (base64.length / 1024 &gt; 150) &#123;</span><br><span class=\"line\">    // \tquality -= 0.01;</span><br><span class=\"line\">    // \tbase64 = canvas.toDataURL(&quot;image/jpeg&quot;, quality);</span><br><span class=\"line\">    // &#125;</span><br><span class=\"line\">    // 防止最后一次压缩低于最低尺寸，只要quality递减合理，无需考虑</span><br><span class=\"line\">    // while (base64.length / 1024 &lt; 50) &#123;</span><br><span class=\"line\">    // \tquality += 0.001;</span><br><span class=\"line\">    // \tbase64 = canvas.toDataURL(&quot;image/jpeg&quot;, quality);</span><br><span class=\"line\">    // &#125;</span><br><span class=\"line\">    callback(base64);//必须通过回调函数返回，否则无法及时拿到该值</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>回调方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var base64= path;</span><br><span class=\"line\">dealImage(base64, 500, (newImage) =&gt; &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"JS的Dom操作","date":"2021-01-09T18:55:23.000Z","_content":"\n\n\n在Vue、AngularJS双向绑定流行的今天，很少有人去做最原始的Dom操作了，但在混编项目中为了减少包大小，采用最基础的方式来更改数据，所以Dom操作是非常重要的，也是前端流行框架的基础\n\n\n\n在文档对象模型 (DOM) 中，每个节点都是一个对象。DOM 节点有三个重要的属性 ：\n\n```\n1. nodeName : 节点的名称\n2. nodeValue ：节点的值\n3. nodeType ：节点的类型\n```\n\n搜索节点\n\n```\nvar idImage =  document.getElementById('id-image');\n```\n\n节点操作\n\n```\n 一、添加和删除节点（HTML 元素）\n1、创建节点\n1）创建该元素（元素节点）；\n2）向一个已存在的元素追加该元素。\n语法：appendChild(newnode)\n \neg:\n  <div id=\"div1\">\n      <p id=\"p1\">这是一个段落</p>\n      <p id=\"p2\">这是另一个段落</p>\n  </div>\n  \n  <script>\n      var para=document.createElement(\"p\");\n      var node=document.createTextNode(\"这是新段落。\");\n      para.appendChild(node);\n \n     var element=document.getElementById(\"div1\");\n     element.appendChild(para);\n </script>\n document.createElement(\"标签名\");      // 创建元素节点\n document.createTextNode(\"文本\");      //创建文本节点\n appendChild();                                           //方法向节点添加最后一个子节点。也可以使用 appendChild() 方法从一个元素向另一个元素中移动元素。 用法：a.appendChild(b)，把b添加到a内。\n \n\n```\n\n\n```\n2.添加节点 \nappendChild();                                            //在指定节点的最后一个子节点列表之后添加一个新的子节点。\n 语法，eg:同上。\ninsertBefore();                                             //insertBefore() 方法可在已有的子节点前插入一个新的子节点。\n语法：insertBefore(newnode,node);\neg:\n  <ul id=\"test\">\n      <li>JavaScript</li>\n      <li>HTML</li>\n  </ul> \n   \n  <script type=\"text/javascript\">\n        var otest = document.getElementById(\"test\");  \n        var newli = document.createElement(\"li\");\n        newli.innerHTML=\"php\";\n       //otest.insertBefore(newli,otest.lastChild);\n       otest.insertBefore(newli,otest.childNodes[1]);\n </script>\n\n```\n\n\n``` \n3.删除节点\nremoveChild()                                             //removeChild() 方法从子节点列表中删除某个节点。如删除成功，此方法可返回被删除的节点，如失败，则返回 NULL。\n语法：nodeObject.removeChild(node)\neg:\n  <div id=\"div1\">\n      <p id=\"p1\">这是一个段落。</p>\n      <p id=\"p2\">这是另一个段落。</p>\n  </div>\n  \n  <script>\n      var parent=document.getElementById(\"div1\");\n      var child=document.getElementById(\"p1\");\n     parent.removeChild(child);\n </script>\nDOM 需要清楚需要删除的元素，以及它的父元素。先找到希望删除的子元素，然后使用其 parentNode 属性来找到父元素。\n \n\n```\n\n```\n4.替换节点\nreplaceChild                                                //把一个给定父元素里面的一个子节点替换为另一个子节点。\n语法：referencre = element.replaceChild(newChild,oldChild);                //newChild: 必需，用于替换 oldChild的对象。 oldChild: 必需，被 newChild替换的对象。\neg:\n  <div>\n      <b id=\"oldnode\">JavaScript</b>是一个很常用的技术，为网页添加动态效果。</div>\n      <a href=\"javascript:replaceMessage()\"> 将加粗改为斜体</a>\n    \n      <script type=\"text/javascript\">\n          function replaceMessage(){\n          　　var b=document.getElementById(\"oldnode\");\n          　　var newNode=document.createElement(\"i\");\n          　　newNode.innerHTML=b.innerHTML;\n         　　b.parentNode.replaceChild(newNode,b);\n         }    \n   </script>\n \n注意：当 oldnew 被替换时，所有与之相关的属性内容都将被移除。 newChild必须先被建立。\n \n```\n\n\n```\n5.访问子节点\nchildNodes                                                  //访问选定元素节点下的所有子节点的列表，返回的值可以看作是一个数组，他具有length属性。\n语法：elementNode.childNodes            //可用childNodes[i]数组的形式表示第几个子元素\neg:\n  <div>\n      javascript  \n      <p>javascript</p>\n      <div>jQuery</div>\n      <h5>PHP</h5>\n  </div>\n  <script type=\"text/javascript\">\n       var int=document.getElementsByTagName(\"div\")[0].childNodes;\n       for (var i=0;i<int.length;i++)\n      {\n          document.write(\"名字：\"+int[i].nodeName+\"<br>\");\n      }\n      document.write(\"子节点个数：\"+int.length+\"<br>\");\n </script>\n \n```\n\n```\n6.访问子节点的第一和最后项\nfirstChild                   //返回‘childNodes’数组的第一个子节点。如果选定的节点没有子节点，则该属性返回 NULL。\n语法：node.firstChild                                     //与elementNode.childNodes[0]是同样的效果。 \nlastChild                    //返回‘childNodes’数组的第一个子节点。如果选定的节点没有子节点，则该属性返回 NULL。\n语法：node.lastChild                                  //与elementNode.childNodes[elementNode.childNodes.length-1]是同样的效果。\neg：\n  <div id=\"con\">\n      <p>javascript</p>\n      <div>jQuery</div>\n      <h5>PHP</h5>\n  </div>\n  <script type=\"text/javascript\">\n      var x=document.getElementById(\"con\");\n      document.write(\"第一个子节点：\"+x.firstChild.nodeName+\"<br>\");\n      document.write(\"最后一个子节点：\"+x.lastChild.nodeName);\n </script>\n\n```\n\n\n```\n7.访问父节点\nparentNode                                                 //获取指定节点的父节点\n语法：elementNode.parentNode\neg:\n <div id=\"text\">\n     <p id=\"con\"> parentNode 获取指点节点的父节点</p>\n </div> \n <script type=\"text/javascript\">\n     var mynode= document.getElementById(\"con\");\n     document.write(mynode.parentNode.nodeName);\n </script>\n注意: 父节点只有一个，浏览器兼容问题，chrome、firefox等浏览器标签之间的空白也算是一个文本节点。\n \n \n```\n\n```\n8.访问兄弟节点\nnextSibling                                                   //可返回某个节点之后紧跟的节点（处于同一树层级中）。\n语法：nodeObject.nextSibling\npreviousSibling                                           //可返回某个节点之前紧跟的节点（处于同一树层级中）。\n语法：nodeObject.previousSibling  \neg:\n  <ul id=\"myList\">\n      <li id=\"item1\">Coffee</li>\n      <li id=\"item2\">Tea</li>\n  </ul>\n  <p id=\"demo\">点击按钮来获得首个项目的下一个同胞。</p>\n  <button onclick=\"myFunction()\">试一下</button>\n  <script>\n      function myFunction()\n      {\n         var x=document.getElementById(\"demo\");  \n         x.innerHTML=document.getElementById(\"item1\").nextSibling.innerHTML;\n     }\n </script>            \n```\n\n","source":"_posts/JS的Dom操作.md","raw":"---\ntitle: JS的Dom操作\ndate: 2021-01-09 18:55:23\ntags: JS\ncategories: 前端开发\n---\n\n\n\n在Vue、AngularJS双向绑定流行的今天，很少有人去做最原始的Dom操作了，但在混编项目中为了减少包大小，采用最基础的方式来更改数据，所以Dom操作是非常重要的，也是前端流行框架的基础\n\n\n\n在文档对象模型 (DOM) 中，每个节点都是一个对象。DOM 节点有三个重要的属性 ：\n\n```\n1. nodeName : 节点的名称\n2. nodeValue ：节点的值\n3. nodeType ：节点的类型\n```\n\n搜索节点\n\n```\nvar idImage =  document.getElementById('id-image');\n```\n\n节点操作\n\n```\n 一、添加和删除节点（HTML 元素）\n1、创建节点\n1）创建该元素（元素节点）；\n2）向一个已存在的元素追加该元素。\n语法：appendChild(newnode)\n \neg:\n  <div id=\"div1\">\n      <p id=\"p1\">这是一个段落</p>\n      <p id=\"p2\">这是另一个段落</p>\n  </div>\n  \n  <script>\n      var para=document.createElement(\"p\");\n      var node=document.createTextNode(\"这是新段落。\");\n      para.appendChild(node);\n \n     var element=document.getElementById(\"div1\");\n     element.appendChild(para);\n </script>\n document.createElement(\"标签名\");      // 创建元素节点\n document.createTextNode(\"文本\");      //创建文本节点\n appendChild();                                           //方法向节点添加最后一个子节点。也可以使用 appendChild() 方法从一个元素向另一个元素中移动元素。 用法：a.appendChild(b)，把b添加到a内。\n \n\n```\n\n\n```\n2.添加节点 \nappendChild();                                            //在指定节点的最后一个子节点列表之后添加一个新的子节点。\n 语法，eg:同上。\ninsertBefore();                                             //insertBefore() 方法可在已有的子节点前插入一个新的子节点。\n语法：insertBefore(newnode,node);\neg:\n  <ul id=\"test\">\n      <li>JavaScript</li>\n      <li>HTML</li>\n  </ul> \n   \n  <script type=\"text/javascript\">\n        var otest = document.getElementById(\"test\");  \n        var newli = document.createElement(\"li\");\n        newli.innerHTML=\"php\";\n       //otest.insertBefore(newli,otest.lastChild);\n       otest.insertBefore(newli,otest.childNodes[1]);\n </script>\n\n```\n\n\n``` \n3.删除节点\nremoveChild()                                             //removeChild() 方法从子节点列表中删除某个节点。如删除成功，此方法可返回被删除的节点，如失败，则返回 NULL。\n语法：nodeObject.removeChild(node)\neg:\n  <div id=\"div1\">\n      <p id=\"p1\">这是一个段落。</p>\n      <p id=\"p2\">这是另一个段落。</p>\n  </div>\n  \n  <script>\n      var parent=document.getElementById(\"div1\");\n      var child=document.getElementById(\"p1\");\n     parent.removeChild(child);\n </script>\nDOM 需要清楚需要删除的元素，以及它的父元素。先找到希望删除的子元素，然后使用其 parentNode 属性来找到父元素。\n \n\n```\n\n```\n4.替换节点\nreplaceChild                                                //把一个给定父元素里面的一个子节点替换为另一个子节点。\n语法：referencre = element.replaceChild(newChild,oldChild);                //newChild: 必需，用于替换 oldChild的对象。 oldChild: 必需，被 newChild替换的对象。\neg:\n  <div>\n      <b id=\"oldnode\">JavaScript</b>是一个很常用的技术，为网页添加动态效果。</div>\n      <a href=\"javascript:replaceMessage()\"> 将加粗改为斜体</a>\n    \n      <script type=\"text/javascript\">\n          function replaceMessage(){\n          　　var b=document.getElementById(\"oldnode\");\n          　　var newNode=document.createElement(\"i\");\n          　　newNode.innerHTML=b.innerHTML;\n         　　b.parentNode.replaceChild(newNode,b);\n         }    \n   </script>\n \n注意：当 oldnew 被替换时，所有与之相关的属性内容都将被移除。 newChild必须先被建立。\n \n```\n\n\n```\n5.访问子节点\nchildNodes                                                  //访问选定元素节点下的所有子节点的列表，返回的值可以看作是一个数组，他具有length属性。\n语法：elementNode.childNodes            //可用childNodes[i]数组的形式表示第几个子元素\neg:\n  <div>\n      javascript  \n      <p>javascript</p>\n      <div>jQuery</div>\n      <h5>PHP</h5>\n  </div>\n  <script type=\"text/javascript\">\n       var int=document.getElementsByTagName(\"div\")[0].childNodes;\n       for (var i=0;i<int.length;i++)\n      {\n          document.write(\"名字：\"+int[i].nodeName+\"<br>\");\n      }\n      document.write(\"子节点个数：\"+int.length+\"<br>\");\n </script>\n \n```\n\n```\n6.访问子节点的第一和最后项\nfirstChild                   //返回‘childNodes’数组的第一个子节点。如果选定的节点没有子节点，则该属性返回 NULL。\n语法：node.firstChild                                     //与elementNode.childNodes[0]是同样的效果。 \nlastChild                    //返回‘childNodes’数组的第一个子节点。如果选定的节点没有子节点，则该属性返回 NULL。\n语法：node.lastChild                                  //与elementNode.childNodes[elementNode.childNodes.length-1]是同样的效果。\neg：\n  <div id=\"con\">\n      <p>javascript</p>\n      <div>jQuery</div>\n      <h5>PHP</h5>\n  </div>\n  <script type=\"text/javascript\">\n      var x=document.getElementById(\"con\");\n      document.write(\"第一个子节点：\"+x.firstChild.nodeName+\"<br>\");\n      document.write(\"最后一个子节点：\"+x.lastChild.nodeName);\n </script>\n\n```\n\n\n```\n7.访问父节点\nparentNode                                                 //获取指定节点的父节点\n语法：elementNode.parentNode\neg:\n <div id=\"text\">\n     <p id=\"con\"> parentNode 获取指点节点的父节点</p>\n </div> \n <script type=\"text/javascript\">\n     var mynode= document.getElementById(\"con\");\n     document.write(mynode.parentNode.nodeName);\n </script>\n注意: 父节点只有一个，浏览器兼容问题，chrome、firefox等浏览器标签之间的空白也算是一个文本节点。\n \n \n```\n\n```\n8.访问兄弟节点\nnextSibling                                                   //可返回某个节点之后紧跟的节点（处于同一树层级中）。\n语法：nodeObject.nextSibling\npreviousSibling                                           //可返回某个节点之前紧跟的节点（处于同一树层级中）。\n语法：nodeObject.previousSibling  \neg:\n  <ul id=\"myList\">\n      <li id=\"item1\">Coffee</li>\n      <li id=\"item2\">Tea</li>\n  </ul>\n  <p id=\"demo\">点击按钮来获得首个项目的下一个同胞。</p>\n  <button onclick=\"myFunction()\">试一下</button>\n  <script>\n      function myFunction()\n      {\n         var x=document.getElementById(\"demo\");  \n         x.innerHTML=document.getElementById(\"item1\").nextSibling.innerHTML;\n     }\n </script>            \n```\n\n","slug":"JS的Dom操作","published":1,"updated":"2021-05-14T02:01:17.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno34000lkuo45d71qeog","content":"<p>在Vue、AngularJS双向绑定流行的今天，很少有人去做最原始的Dom操作了，但在混编项目中为了减少包大小，采用最基础的方式来更改数据，所以Dom操作是非常重要的，也是前端流行框架的基础</p>\n<p>在文档对象模型 (DOM) 中，每个节点都是一个对象。DOM 节点有三个重要的属性 ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. nodeName : 节点的名称</span><br><span class=\"line\">2. nodeValue ：节点的值</span><br><span class=\"line\">3. nodeType ：节点的类型</span><br></pre></td></tr></table></figure>\n<p>搜索节点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var idImage =  document.getElementById(&apos;id-image&apos;);</span><br></pre></td></tr></table></figure>\n<p>节点操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 一、添加和删除节点（HTML 元素）</span><br><span class=\"line\">1、创建节点</span><br><span class=\"line\">1）创建该元素（元素节点）；</span><br><span class=\"line\">2）向一个已存在的元素追加该元素。</span><br><span class=\"line\">语法：appendChild(newnode)</span><br><span class=\"line\"> </span><br><span class=\"line\">eg:</span><br><span class=\"line\">  &lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">      &lt;p id=&quot;p1&quot;&gt;这是一个段落&lt;/p&gt;</span><br><span class=\"line\">      &lt;p id=&quot;p2&quot;&gt;这是另一个段落&lt;/p&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">      var para=document.createElement(&quot;p&quot;);</span><br><span class=\"line\">      var node=document.createTextNode(&quot;这是新段落。&quot;);</span><br><span class=\"line\">      para.appendChild(node);</span><br><span class=\"line\"> </span><br><span class=\"line\">     var element=document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">     element.appendChild(para);</span><br><span class=\"line\"> &lt;/script&gt;</span><br><span class=\"line\"> document.createElement(&quot;标签名&quot;);      // 创建元素节点</span><br><span class=\"line\"> document.createTextNode(&quot;文本&quot;);      //创建文本节点</span><br><span class=\"line\"> appendChild();                                           //方法向节点添加最后一个子节点。也可以使用 appendChild() 方法从一个元素向另一个元素中移动元素。 用法：a.appendChild(b)，把b添加到a内。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.添加节点 </span><br><span class=\"line\">appendChild();                                            //在指定节点的最后一个子节点列表之后添加一个新的子节点。</span><br><span class=\"line\"> 语法，eg:同上。</span><br><span class=\"line\">insertBefore();                                             //insertBefore() 方法可在已有的子节点前插入一个新的子节点。</span><br><span class=\"line\">语法：insertBefore(newnode,node);</span><br><span class=\"line\">eg:</span><br><span class=\"line\">  &lt;ul id=&quot;test&quot;&gt;</span><br><span class=\"line\">      &lt;li&gt;JavaScript&lt;/li&gt;</span><br><span class=\"line\">      &lt;li&gt;HTML&lt;/li&gt;</span><br><span class=\"line\">  &lt;/ul&gt; </span><br><span class=\"line\">   </span><br><span class=\"line\">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">        var otest = document.getElementById(&quot;test&quot;);  </span><br><span class=\"line\">        var newli = document.createElement(&quot;li&quot;);</span><br><span class=\"line\">        newli.innerHTML=&quot;php&quot;;</span><br><span class=\"line\">       //otest.insertBefore(newli,otest.lastChild);</span><br><span class=\"line\">       otest.insertBefore(newli,otest.childNodes[1]);</span><br><span class=\"line\"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.删除节点</span><br><span class=\"line\">removeChild()                                             //removeChild() 方法从子节点列表中删除某个节点。如删除成功，此方法可返回被删除的节点，如失败，则返回 NULL。</span><br><span class=\"line\">语法：nodeObject.removeChild(node)</span><br><span class=\"line\">eg:</span><br><span class=\"line\">  &lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">      &lt;p id=&quot;p1&quot;&gt;这是一个段落。&lt;/p&gt;</span><br><span class=\"line\">      &lt;p id=&quot;p2&quot;&gt;这是另一个段落。&lt;/p&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">      var parent=document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">      var child=document.getElementById(&quot;p1&quot;);</span><br><span class=\"line\">     parent.removeChild(child);</span><br><span class=\"line\"> &lt;/script&gt;</span><br><span class=\"line\">DOM 需要清楚需要删除的元素，以及它的父元素。先找到希望删除的子元素，然后使用其 parentNode 属性来找到父元素。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4.替换节点</span><br><span class=\"line\">replaceChild                                                //把一个给定父元素里面的一个子节点替换为另一个子节点。</span><br><span class=\"line\">语法：referencre = element.replaceChild(newChild,oldChild);                //newChild: 必需，用于替换 oldChild的对象。 oldChild: 必需，被 newChild替换的对象。</span><br><span class=\"line\">eg:</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">      &lt;b id=&quot;oldnode&quot;&gt;JavaScript&lt;/b&gt;是一个很常用的技术，为网页添加动态效果。&lt;/div&gt;</span><br><span class=\"line\">      &lt;a href=&quot;javascript:replaceMessage()&quot;&gt; 将加粗改为斜体&lt;/a&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">      &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">          function replaceMessage()&#123;</span><br><span class=\"line\">          　　var b=document.getElementById(&quot;oldnode&quot;);</span><br><span class=\"line\">          　　var newNode=document.createElement(&quot;i&quot;);</span><br><span class=\"line\">          　　newNode.innerHTML=b.innerHTML;</span><br><span class=\"line\">         　　b.parentNode.replaceChild(newNode,b);</span><br><span class=\"line\">         &#125;    </span><br><span class=\"line\">   &lt;/script&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">注意：当 oldnew 被替换时，所有与之相关的属性内容都将被移除。 newChild必须先被建立。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5.访问子节点</span><br><span class=\"line\">childNodes                                                  //访问选定元素节点下的所有子节点的列表，返回的值可以看作是一个数组，他具有length属性。</span><br><span class=\"line\">语法：elementNode.childNodes            //可用childNodes[i]数组的形式表示第几个子元素</span><br><span class=\"line\">eg:</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">      javascript  </span><br><span class=\"line\">      &lt;p&gt;javascript&lt;/p&gt;</span><br><span class=\"line\">      &lt;div&gt;jQuery&lt;/div&gt;</span><br><span class=\"line\">      &lt;h5&gt;PHP&lt;/h5&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">       var int=document.getElementsByTagName(&quot;div&quot;)[0].childNodes;</span><br><span class=\"line\">       for (var i=0;i&lt;int.length;i++)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          document.write(&quot;名字：&quot;+int[i].nodeName+&quot;&lt;br&gt;&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      document.write(&quot;子节点个数：&quot;+int.length+&quot;&lt;br&gt;&quot;);</span><br><span class=\"line\"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6.访问子节点的第一和最后项</span><br><span class=\"line\">firstChild                   //返回‘childNodes’数组的第一个子节点。如果选定的节点没有子节点，则该属性返回 NULL。</span><br><span class=\"line\">语法：node.firstChild                                     //与elementNode.childNodes[0]是同样的效果。 </span><br><span class=\"line\">lastChild                    //返回‘childNodes’数组的第一个子节点。如果选定的节点没有子节点，则该属性返回 NULL。</span><br><span class=\"line\">语法：node.lastChild                                  //与elementNode.childNodes[elementNode.childNodes.length-1]是同样的效果。</span><br><span class=\"line\">eg：</span><br><span class=\"line\">  &lt;div id=&quot;con&quot;&gt;</span><br><span class=\"line\">      &lt;p&gt;javascript&lt;/p&gt;</span><br><span class=\"line\">      &lt;div&gt;jQuery&lt;/div&gt;</span><br><span class=\"line\">      &lt;h5&gt;PHP&lt;/h5&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">      var x=document.getElementById(&quot;con&quot;);</span><br><span class=\"line\">      document.write(&quot;第一个子节点：&quot;+x.firstChild.nodeName+&quot;&lt;br&gt;&quot;);</span><br><span class=\"line\">      document.write(&quot;最后一个子节点：&quot;+x.lastChild.nodeName);</span><br><span class=\"line\"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7.访问父节点</span><br><span class=\"line\">parentNode                                                 //获取指定节点的父节点</span><br><span class=\"line\">语法：elementNode.parentNode</span><br><span class=\"line\">eg:</span><br><span class=\"line\"> &lt;div id=&quot;text&quot;&gt;</span><br><span class=\"line\">     &lt;p id=&quot;con&quot;&gt; parentNode 获取指点节点的父节点&lt;/p&gt;</span><br><span class=\"line\"> &lt;/div&gt; </span><br><span class=\"line\"> &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">     var mynode= document.getElementById(&quot;con&quot;);</span><br><span class=\"line\">     document.write(mynode.parentNode.nodeName);</span><br><span class=\"line\"> &lt;/script&gt;</span><br><span class=\"line\">注意: 父节点只有一个，浏览器兼容问题，chrome、firefox等浏览器标签之间的空白也算是一个文本节点。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8.访问兄弟节点</span><br><span class=\"line\">nextSibling                                                   //可返回某个节点之后紧跟的节点（处于同一树层级中）。</span><br><span class=\"line\">语法：nodeObject.nextSibling</span><br><span class=\"line\">previousSibling                                           //可返回某个节点之前紧跟的节点（处于同一树层级中）。</span><br><span class=\"line\">语法：nodeObject.previousSibling  </span><br><span class=\"line\">eg:</span><br><span class=\"line\">  &lt;ul id=&quot;myList&quot;&gt;</span><br><span class=\"line\">      &lt;li id=&quot;item1&quot;&gt;Coffee&lt;/li&gt;</span><br><span class=\"line\">      &lt;li id=&quot;item2&quot;&gt;Tea&lt;/li&gt;</span><br><span class=\"line\">  &lt;/ul&gt;</span><br><span class=\"line\">  &lt;p id=&quot;demo&quot;&gt;点击按钮来获得首个项目的下一个同胞。&lt;/p&gt;</span><br><span class=\"line\">  &lt;button onclick=&quot;myFunction()&quot;&gt;试一下&lt;/button&gt;</span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">      function myFunction()</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         var x=document.getElementById(&quot;demo&quot;);  </span><br><span class=\"line\">         x.innerHTML=document.getElementById(&quot;item1&quot;).nextSibling.innerHTML;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在Vue、AngularJS双向绑定流行的今天，很少有人去做最原始的Dom操作了，但在混编项目中为了减少包大小，采用最基础的方式来更改数据，所以Dom操作是非常重要的，也是前端流行框架的基础</p>\n<p>在文档对象模型 (DOM) 中，每个节点都是一个对象。DOM 节点有三个重要的属性 ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. nodeName : 节点的名称</span><br><span class=\"line\">2. nodeValue ：节点的值</span><br><span class=\"line\">3. nodeType ：节点的类型</span><br></pre></td></tr></table></figure>\n<p>搜索节点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var idImage =  document.getElementById(&apos;id-image&apos;);</span><br></pre></td></tr></table></figure>\n<p>节点操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 一、添加和删除节点（HTML 元素）</span><br><span class=\"line\">1、创建节点</span><br><span class=\"line\">1）创建该元素（元素节点）；</span><br><span class=\"line\">2）向一个已存在的元素追加该元素。</span><br><span class=\"line\">语法：appendChild(newnode)</span><br><span class=\"line\"> </span><br><span class=\"line\">eg:</span><br><span class=\"line\">  &lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">      &lt;p id=&quot;p1&quot;&gt;这是一个段落&lt;/p&gt;</span><br><span class=\"line\">      &lt;p id=&quot;p2&quot;&gt;这是另一个段落&lt;/p&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">      var para=document.createElement(&quot;p&quot;);</span><br><span class=\"line\">      var node=document.createTextNode(&quot;这是新段落。&quot;);</span><br><span class=\"line\">      para.appendChild(node);</span><br><span class=\"line\"> </span><br><span class=\"line\">     var element=document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">     element.appendChild(para);</span><br><span class=\"line\"> &lt;/script&gt;</span><br><span class=\"line\"> document.createElement(&quot;标签名&quot;);      // 创建元素节点</span><br><span class=\"line\"> document.createTextNode(&quot;文本&quot;);      //创建文本节点</span><br><span class=\"line\"> appendChild();                                           //方法向节点添加最后一个子节点。也可以使用 appendChild() 方法从一个元素向另一个元素中移动元素。 用法：a.appendChild(b)，把b添加到a内。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.添加节点 </span><br><span class=\"line\">appendChild();                                            //在指定节点的最后一个子节点列表之后添加一个新的子节点。</span><br><span class=\"line\"> 语法，eg:同上。</span><br><span class=\"line\">insertBefore();                                             //insertBefore() 方法可在已有的子节点前插入一个新的子节点。</span><br><span class=\"line\">语法：insertBefore(newnode,node);</span><br><span class=\"line\">eg:</span><br><span class=\"line\">  &lt;ul id=&quot;test&quot;&gt;</span><br><span class=\"line\">      &lt;li&gt;JavaScript&lt;/li&gt;</span><br><span class=\"line\">      &lt;li&gt;HTML&lt;/li&gt;</span><br><span class=\"line\">  &lt;/ul&gt; </span><br><span class=\"line\">   </span><br><span class=\"line\">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">        var otest = document.getElementById(&quot;test&quot;);  </span><br><span class=\"line\">        var newli = document.createElement(&quot;li&quot;);</span><br><span class=\"line\">        newli.innerHTML=&quot;php&quot;;</span><br><span class=\"line\">       //otest.insertBefore(newli,otest.lastChild);</span><br><span class=\"line\">       otest.insertBefore(newli,otest.childNodes[1]);</span><br><span class=\"line\"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.删除节点</span><br><span class=\"line\">removeChild()                                             //removeChild() 方法从子节点列表中删除某个节点。如删除成功，此方法可返回被删除的节点，如失败，则返回 NULL。</span><br><span class=\"line\">语法：nodeObject.removeChild(node)</span><br><span class=\"line\">eg:</span><br><span class=\"line\">  &lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">      &lt;p id=&quot;p1&quot;&gt;这是一个段落。&lt;/p&gt;</span><br><span class=\"line\">      &lt;p id=&quot;p2&quot;&gt;这是另一个段落。&lt;/p&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">      var parent=document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">      var child=document.getElementById(&quot;p1&quot;);</span><br><span class=\"line\">     parent.removeChild(child);</span><br><span class=\"line\"> &lt;/script&gt;</span><br><span class=\"line\">DOM 需要清楚需要删除的元素，以及它的父元素。先找到希望删除的子元素，然后使用其 parentNode 属性来找到父元素。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4.替换节点</span><br><span class=\"line\">replaceChild                                                //把一个给定父元素里面的一个子节点替换为另一个子节点。</span><br><span class=\"line\">语法：referencre = element.replaceChild(newChild,oldChild);                //newChild: 必需，用于替换 oldChild的对象。 oldChild: 必需，被 newChild替换的对象。</span><br><span class=\"line\">eg:</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">      &lt;b id=&quot;oldnode&quot;&gt;JavaScript&lt;/b&gt;是一个很常用的技术，为网页添加动态效果。&lt;/div&gt;</span><br><span class=\"line\">      &lt;a href=&quot;javascript:replaceMessage()&quot;&gt; 将加粗改为斜体&lt;/a&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">      &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">          function replaceMessage()&#123;</span><br><span class=\"line\">          　　var b=document.getElementById(&quot;oldnode&quot;);</span><br><span class=\"line\">          　　var newNode=document.createElement(&quot;i&quot;);</span><br><span class=\"line\">          　　newNode.innerHTML=b.innerHTML;</span><br><span class=\"line\">         　　b.parentNode.replaceChild(newNode,b);</span><br><span class=\"line\">         &#125;    </span><br><span class=\"line\">   &lt;/script&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">注意：当 oldnew 被替换时，所有与之相关的属性内容都将被移除。 newChild必须先被建立。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5.访问子节点</span><br><span class=\"line\">childNodes                                                  //访问选定元素节点下的所有子节点的列表，返回的值可以看作是一个数组，他具有length属性。</span><br><span class=\"line\">语法：elementNode.childNodes            //可用childNodes[i]数组的形式表示第几个子元素</span><br><span class=\"line\">eg:</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">      javascript  </span><br><span class=\"line\">      &lt;p&gt;javascript&lt;/p&gt;</span><br><span class=\"line\">      &lt;div&gt;jQuery&lt;/div&gt;</span><br><span class=\"line\">      &lt;h5&gt;PHP&lt;/h5&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">       var int=document.getElementsByTagName(&quot;div&quot;)[0].childNodes;</span><br><span class=\"line\">       for (var i=0;i&lt;int.length;i++)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          document.write(&quot;名字：&quot;+int[i].nodeName+&quot;&lt;br&gt;&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      document.write(&quot;子节点个数：&quot;+int.length+&quot;&lt;br&gt;&quot;);</span><br><span class=\"line\"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6.访问子节点的第一和最后项</span><br><span class=\"line\">firstChild                   //返回‘childNodes’数组的第一个子节点。如果选定的节点没有子节点，则该属性返回 NULL。</span><br><span class=\"line\">语法：node.firstChild                                     //与elementNode.childNodes[0]是同样的效果。 </span><br><span class=\"line\">lastChild                    //返回‘childNodes’数组的第一个子节点。如果选定的节点没有子节点，则该属性返回 NULL。</span><br><span class=\"line\">语法：node.lastChild                                  //与elementNode.childNodes[elementNode.childNodes.length-1]是同样的效果。</span><br><span class=\"line\">eg：</span><br><span class=\"line\">  &lt;div id=&quot;con&quot;&gt;</span><br><span class=\"line\">      &lt;p&gt;javascript&lt;/p&gt;</span><br><span class=\"line\">      &lt;div&gt;jQuery&lt;/div&gt;</span><br><span class=\"line\">      &lt;h5&gt;PHP&lt;/h5&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">      var x=document.getElementById(&quot;con&quot;);</span><br><span class=\"line\">      document.write(&quot;第一个子节点：&quot;+x.firstChild.nodeName+&quot;&lt;br&gt;&quot;);</span><br><span class=\"line\">      document.write(&quot;最后一个子节点：&quot;+x.lastChild.nodeName);</span><br><span class=\"line\"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7.访问父节点</span><br><span class=\"line\">parentNode                                                 //获取指定节点的父节点</span><br><span class=\"line\">语法：elementNode.parentNode</span><br><span class=\"line\">eg:</span><br><span class=\"line\"> &lt;div id=&quot;text&quot;&gt;</span><br><span class=\"line\">     &lt;p id=&quot;con&quot;&gt; parentNode 获取指点节点的父节点&lt;/p&gt;</span><br><span class=\"line\"> &lt;/div&gt; </span><br><span class=\"line\"> &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">     var mynode= document.getElementById(&quot;con&quot;);</span><br><span class=\"line\">     document.write(mynode.parentNode.nodeName);</span><br><span class=\"line\"> &lt;/script&gt;</span><br><span class=\"line\">注意: 父节点只有一个，浏览器兼容问题，chrome、firefox等浏览器标签之间的空白也算是一个文本节点。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8.访问兄弟节点</span><br><span class=\"line\">nextSibling                                                   //可返回某个节点之后紧跟的节点（处于同一树层级中）。</span><br><span class=\"line\">语法：nodeObject.nextSibling</span><br><span class=\"line\">previousSibling                                           //可返回某个节点之前紧跟的节点（处于同一树层级中）。</span><br><span class=\"line\">语法：nodeObject.previousSibling  </span><br><span class=\"line\">eg:</span><br><span class=\"line\">  &lt;ul id=&quot;myList&quot;&gt;</span><br><span class=\"line\">      &lt;li id=&quot;item1&quot;&gt;Coffee&lt;/li&gt;</span><br><span class=\"line\">      &lt;li id=&quot;item2&quot;&gt;Tea&lt;/li&gt;</span><br><span class=\"line\">  &lt;/ul&gt;</span><br><span class=\"line\">  &lt;p id=&quot;demo&quot;&gt;点击按钮来获得首个项目的下一个同胞。&lt;/p&gt;</span><br><span class=\"line\">  &lt;button onclick=&quot;myFunction()&quot;&gt;试一下&lt;/button&gt;</span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">      function myFunction()</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         var x=document.getElementById(&quot;demo&quot;);  </span><br><span class=\"line\">         x.innerHTML=document.getElementById(&quot;item1&quot;).nextSibling.innerHTML;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"JS随机数生成","date":"2021-01-09T18:11:51.000Z","_content":"\n在前端调试时、有时需要判断是否同时收到两条相同通知，除了用毫秒及时间判断，还可以用随机数\n\n使用Math函数解决\n\n```\n//Math 对象方法：\nMath.ceil();  //向上取整。\nMath.floor();  //向下取整。\nMath.round();  //四舍五入。\nMath.random();  //0.0 ~ 1.0 之间的一个伪随机数。【包含0不包含1】 //比如0.8647578968666494\n//实例说明：\nMath.ceil(Math.random()*10);      // 获取从1到10的随机整数 ，取0的概率极小。\nMath.round(Math.random());   //可均衡获取0到1的随机整数。\nMath.floor(Math.random()*10);  //可均衡获取0到9的随机整数。\nMath.round(Math.random()*10);  //基本均衡获取0到10的随机整数\n生成[n,m]的随机整数的函数\n\n//生成从minNum到maxNum的随机数\nfunction randomNum(minNum, maxNum) {\n  switch (arguments.length) {\n    case 1:\n      return parseInt(Math.random() * minNum + 1, 10);\n      break;\n    case 2:\n      return parseInt(Math.random() * ( maxNum - minNum + 1 ) + minNum, 10);\n      //或者 Math.floor(Math.random()*( maxNum - minNum + 1 ) + minNum );\n      break;\n    default:\n      return 0;\n      break;\n  }\n} \nMath.random() 生成 [0,1) 的数，所以 Math.random()*5 生成 {0,5) 的数。\nparseInt() 可以简单理解成返回舍去参数的小数部分后的整数，所以 parseInt(Math.random()*5) 生成的是 [0,4] 的随机整数。\n```\n\n","source":"_posts/JS随机数生成.md","raw":"---\ntitle: JS随机数生成\ndate: 2021-01-09 18:11:51\ntags: js\ncategories: 前端开发\n---\n\n在前端调试时、有时需要判断是否同时收到两条相同通知，除了用毫秒及时间判断，还可以用随机数\n\n使用Math函数解决\n\n```\n//Math 对象方法：\nMath.ceil();  //向上取整。\nMath.floor();  //向下取整。\nMath.round();  //四舍五入。\nMath.random();  //0.0 ~ 1.0 之间的一个伪随机数。【包含0不包含1】 //比如0.8647578968666494\n//实例说明：\nMath.ceil(Math.random()*10);      // 获取从1到10的随机整数 ，取0的概率极小。\nMath.round(Math.random());   //可均衡获取0到1的随机整数。\nMath.floor(Math.random()*10);  //可均衡获取0到9的随机整数。\nMath.round(Math.random()*10);  //基本均衡获取0到10的随机整数\n生成[n,m]的随机整数的函数\n\n//生成从minNum到maxNum的随机数\nfunction randomNum(minNum, maxNum) {\n  switch (arguments.length) {\n    case 1:\n      return parseInt(Math.random() * minNum + 1, 10);\n      break;\n    case 2:\n      return parseInt(Math.random() * ( maxNum - minNum + 1 ) + minNum, 10);\n      //或者 Math.floor(Math.random()*( maxNum - minNum + 1 ) + minNum );\n      break;\n    default:\n      return 0;\n      break;\n  }\n} \nMath.random() 生成 [0,1) 的数，所以 Math.random()*5 生成 {0,5) 的数。\nparseInt() 可以简单理解成返回舍去参数的小数部分后的整数，所以 parseInt(Math.random()*5) 生成的是 [0,4] 的随机整数。\n```\n\n","slug":"JS随机数生成","published":1,"updated":"2021-05-14T02:01:17.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno36000okuo4g3j709zk","content":"<p>在前端调试时、有时需要判断是否同时收到两条相同通知，除了用毫秒及时间判断，还可以用随机数</p>\n<p>使用Math函数解决</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Math 对象方法：</span><br><span class=\"line\">Math.ceil();  //向上取整。</span><br><span class=\"line\">Math.floor();  //向下取整。</span><br><span class=\"line\">Math.round();  //四舍五入。</span><br><span class=\"line\">Math.random();  //0.0 ~ 1.0 之间的一个伪随机数。【包含0不包含1】 //比如0.8647578968666494</span><br><span class=\"line\">//实例说明：</span><br><span class=\"line\">Math.ceil(Math.random()*10);      // 获取从1到10的随机整数 ，取0的概率极小。</span><br><span class=\"line\">Math.round(Math.random());   //可均衡获取0到1的随机整数。</span><br><span class=\"line\">Math.floor(Math.random()*10);  //可均衡获取0到9的随机整数。</span><br><span class=\"line\">Math.round(Math.random()*10);  //基本均衡获取0到10的随机整数</span><br><span class=\"line\">生成[n,m]的随机整数的函数</span><br><span class=\"line\"></span><br><span class=\"line\">//生成从minNum到maxNum的随机数</span><br><span class=\"line\">function randomNum(minNum, maxNum) &#123;</span><br><span class=\"line\">  switch (arguments.length) &#123;</span><br><span class=\"line\">    case 1:</span><br><span class=\"line\">      return parseInt(Math.random() * minNum + 1, 10);</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case 2:</span><br><span class=\"line\">      return parseInt(Math.random() * ( maxNum - minNum + 1 ) + minNum, 10);</span><br><span class=\"line\">      //或者 Math.floor(Math.random()*( maxNum - minNum + 1 ) + minNum );</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      return 0;</span><br><span class=\"line\">      break;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">Math.random() 生成 [0,1) 的数，所以 Math.random()*5 生成 &#123;0,5) 的数。</span><br><span class=\"line\">parseInt() 可以简单理解成返回舍去参数的小数部分后的整数，所以 parseInt(Math.random()*5) 生成的是 [0,4] 的随机整数。</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在前端调试时、有时需要判断是否同时收到两条相同通知，除了用毫秒及时间判断，还可以用随机数</p>\n<p>使用Math函数解决</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Math 对象方法：</span><br><span class=\"line\">Math.ceil();  //向上取整。</span><br><span class=\"line\">Math.floor();  //向下取整。</span><br><span class=\"line\">Math.round();  //四舍五入。</span><br><span class=\"line\">Math.random();  //0.0 ~ 1.0 之间的一个伪随机数。【包含0不包含1】 //比如0.8647578968666494</span><br><span class=\"line\">//实例说明：</span><br><span class=\"line\">Math.ceil(Math.random()*10);      // 获取从1到10的随机整数 ，取0的概率极小。</span><br><span class=\"line\">Math.round(Math.random());   //可均衡获取0到1的随机整数。</span><br><span class=\"line\">Math.floor(Math.random()*10);  //可均衡获取0到9的随机整数。</span><br><span class=\"line\">Math.round(Math.random()*10);  //基本均衡获取0到10的随机整数</span><br><span class=\"line\">生成[n,m]的随机整数的函数</span><br><span class=\"line\"></span><br><span class=\"line\">//生成从minNum到maxNum的随机数</span><br><span class=\"line\">function randomNum(minNum, maxNum) &#123;</span><br><span class=\"line\">  switch (arguments.length) &#123;</span><br><span class=\"line\">    case 1:</span><br><span class=\"line\">      return parseInt(Math.random() * minNum + 1, 10);</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case 2:</span><br><span class=\"line\">      return parseInt(Math.random() * ( maxNum - minNum + 1 ) + minNum, 10);</span><br><span class=\"line\">      //或者 Math.floor(Math.random()*( maxNum - minNum + 1 ) + minNum );</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      return 0;</span><br><span class=\"line\">      break;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">Math.random() 生成 [0,1) 的数，所以 Math.random()*5 生成 &#123;0,5) 的数。</span><br><span class=\"line\">parseInt() 可以简单理解成返回舍去参数的小数部分后的整数，所以 parseInt(Math.random()*5) 生成的是 [0,4] 的随机整数。</span><br></pre></td></tr></table></figure>\n"},{"title":"MVC的理解与运用总结","date":"2019-03-06T17:39:59.000Z","_content":"\n\n\n关于MVC是目前行业常用的设计模式，起源于SmallTalk,是许多计算机语言和架构都采用的设计模式，虽然有MVVC,MVP等其它优秀的设计模式，但是MVC依然是经典的模式，很多人可能会说MVC不够灵活，MVC会使项目臃肿，但那只是没有处理好而已。在我看来，没有绝对好的设计模式，而是在整个系统项目中怎么和系统的四层架构（即：表示层，业务逻辑层，数据持久层，信息系统层）一一对应起来。最经典的就像在不同型号的同一个App，只有表示层发生变化，而其它层不用发生改变，也就是只有View发生变化，Model层不发生改变。View里面不能包含业务逻辑的代码。\n\n一个好的层次设计能够带来优化和开发的巨大便利，而所有代码只写在一个若几个文件不进行权责的区分必然会为后期的开发带来巨大的麻烦，读代码都要花费大半天的时间。因此设计模式显得如此重要。\n\nMVC模式：\nModel:保存应用数据状态，回应视图状态查询，处理应用业务逻辑，完成应用功能，将状态变化通知视图  \nView:为用户展示信息提供接口，通过视图向控制器发出请求，向模型发出数据查询  \nController:接收用户请求，更新模型数据，更新所对应视图状态响应用户请求，作为视图和模型的媒介，降低耦合度，权责清晰提高开发效率  \n其中Model和Controller之间的交互主要通过KVO来实现，也就是发布定阅模式，对应属性值是变化可以让Controller收到消息\nView和Controller之间的交互主要通过代理委托，通知及代码块进行实现\n\n##因此对于一个项目有几点要足够重视：  \n1. 按照模块进行细分  \n2. 尽量不要把所有模块都要用的视图或弹框放在一个CommenView里面，这样可能的结果是这个公共类越来越臃肿。写成一个单独的模块，或者说单例去实现的方法做到专用要好得多。\n3. 所有的视图要继承基视图，导航栏要继承基导航栏，网络请求底层统一调用一个封装好的类。这样最大的好处在于当需求发生改变(导航条上加按钮)或者要统一进行设置时（Http改https）可以很方便的进行设置\n4. 使用Cocoapods去管理所有第三方要用过自己去添加，方便集成，更新和管理\n5. 重视对代码的重用编写公共类进行操作。\n\n[iOSMVCTemple是自己从项目中提取的框架](https://github.com/cooler112/iOSMVCTemple)，集成了很多第三方库和类别，我自己也做了很多自定义，比如用户信息放到单例，封装好的BaseView,BaseNavigationController.主要目的是写成个好的框架不断完善。方便后期快速布置开发环境。\n![](./image/1.png)","source":"_posts/MVC的理解与运用总结.md","raw":"---\ntitle: MVC的理解与运用总结\ndate: 2019-03-06 17:39:59\ntags: mvc\ncategories: 设计架构\n---\n\n\n\n关于MVC是目前行业常用的设计模式，起源于SmallTalk,是许多计算机语言和架构都采用的设计模式，虽然有MVVC,MVP等其它优秀的设计模式，但是MVC依然是经典的模式，很多人可能会说MVC不够灵活，MVC会使项目臃肿，但那只是没有处理好而已。在我看来，没有绝对好的设计模式，而是在整个系统项目中怎么和系统的四层架构（即：表示层，业务逻辑层，数据持久层，信息系统层）一一对应起来。最经典的就像在不同型号的同一个App，只有表示层发生变化，而其它层不用发生改变，也就是只有View发生变化，Model层不发生改变。View里面不能包含业务逻辑的代码。\n\n一个好的层次设计能够带来优化和开发的巨大便利，而所有代码只写在一个若几个文件不进行权责的区分必然会为后期的开发带来巨大的麻烦，读代码都要花费大半天的时间。因此设计模式显得如此重要。\n\nMVC模式：\nModel:保存应用数据状态，回应视图状态查询，处理应用业务逻辑，完成应用功能，将状态变化通知视图  \nView:为用户展示信息提供接口，通过视图向控制器发出请求，向模型发出数据查询  \nController:接收用户请求，更新模型数据，更新所对应视图状态响应用户请求，作为视图和模型的媒介，降低耦合度，权责清晰提高开发效率  \n其中Model和Controller之间的交互主要通过KVO来实现，也就是发布定阅模式，对应属性值是变化可以让Controller收到消息\nView和Controller之间的交互主要通过代理委托，通知及代码块进行实现\n\n##因此对于一个项目有几点要足够重视：  \n1. 按照模块进行细分  \n2. 尽量不要把所有模块都要用的视图或弹框放在一个CommenView里面，这样可能的结果是这个公共类越来越臃肿。写成一个单独的模块，或者说单例去实现的方法做到专用要好得多。\n3. 所有的视图要继承基视图，导航栏要继承基导航栏，网络请求底层统一调用一个封装好的类。这样最大的好处在于当需求发生改变(导航条上加按钮)或者要统一进行设置时（Http改https）可以很方便的进行设置\n4. 使用Cocoapods去管理所有第三方要用过自己去添加，方便集成，更新和管理\n5. 重视对代码的重用编写公共类进行操作。\n\n[iOSMVCTemple是自己从项目中提取的框架](https://github.com/cooler112/iOSMVCTemple)，集成了很多第三方库和类别，我自己也做了很多自定义，比如用户信息放到单例，封装好的BaseView,BaseNavigationController.主要目的是写成个好的框架不断完善。方便后期快速布置开发环境。\n![](./image/1.png)","slug":"MVC的理解与运用总结","published":1,"updated":"2021-05-14T02:01:17.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno37000rkuo49gb50uhr","content":"<p>关于MVC是目前行业常用的设计模式，起源于SmallTalk,是许多计算机语言和架构都采用的设计模式，虽然有MVVC,MVP等其它优秀的设计模式，但是MVC依然是经典的模式，很多人可能会说MVC不够灵活，MVC会使项目臃肿，但那只是没有处理好而已。在我看来，没有绝对好的设计模式，而是在整个系统项目中怎么和系统的四层架构（即：表示层，业务逻辑层，数据持久层，信息系统层）一一对应起来。最经典的就像在不同型号的同一个App，只有表示层发生变化，而其它层不用发生改变，也就是只有View发生变化，Model层不发生改变。View里面不能包含业务逻辑的代码。</p>\n<p>一个好的层次设计能够带来优化和开发的巨大便利，而所有代码只写在一个若几个文件不进行权责的区分必然会为后期的开发带来巨大的麻烦，读代码都要花费大半天的时间。因此设计模式显得如此重要。</p>\n<p>MVC模式：<br>Model:保存应用数据状态，回应视图状态查询，处理应用业务逻辑，完成应用功能，将状态变化通知视图<br>View:为用户展示信息提供接口，通过视图向控制器发出请求，向模型发出数据查询<br>Controller:接收用户请求，更新模型数据，更新所对应视图状态响应用户请求，作为视图和模型的媒介，降低耦合度，权责清晰提高开发效率<br>其中Model和Controller之间的交互主要通过KVO来实现，也就是发布定阅模式，对应属性值是变化可以让Controller收到消息<br>View和Controller之间的交互主要通过代理委托，通知及代码块进行实现</p>\n<p>##因此对于一个项目有几点要足够重视：  </p>\n<ol>\n<li>按照模块进行细分  </li>\n<li>尽量不要把所有模块都要用的视图或弹框放在一个CommenView里面，这样可能的结果是这个公共类越来越臃肿。写成一个单独的模块，或者说单例去实现的方法做到专用要好得多。</li>\n<li>所有的视图要继承基视图，导航栏要继承基导航栏，网络请求底层统一调用一个封装好的类。这样最大的好处在于当需求发生改变(导航条上加按钮)或者要统一进行设置时（Http改https）可以很方便的进行设置</li>\n<li>使用Cocoapods去管理所有第三方要用过自己去添加，方便集成，更新和管理</li>\n<li>重视对代码的重用编写公共类进行操作。</li>\n</ol>\n<p><a href=\"https://github.com/cooler112/iOSMVCTemple\" target=\"_blank\" rel=\"noopener\">iOSMVCTemple是自己从项目中提取的框架</a>，集成了很多第三方库和类别，我自己也做了很多自定义，比如用户信息放到单例，封装好的BaseView,BaseNavigationController.主要目的是写成个好的框架不断完善。方便后期快速布置开发环境。<br><img src=\"/2019/03/06/MVC的理解与运用总结/1.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>关于MVC是目前行业常用的设计模式，起源于SmallTalk,是许多计算机语言和架构都采用的设计模式，虽然有MVVC,MVP等其它优秀的设计模式，但是MVC依然是经典的模式，很多人可能会说MVC不够灵活，MVC会使项目臃肿，但那只是没有处理好而已。在我看来，没有绝对好的设计模式，而是在整个系统项目中怎么和系统的四层架构（即：表示层，业务逻辑层，数据持久层，信息系统层）一一对应起来。最经典的就像在不同型号的同一个App，只有表示层发生变化，而其它层不用发生改变，也就是只有View发生变化，Model层不发生改变。View里面不能包含业务逻辑的代码。</p>\n<p>一个好的层次设计能够带来优化和开发的巨大便利，而所有代码只写在一个若几个文件不进行权责的区分必然会为后期的开发带来巨大的麻烦，读代码都要花费大半天的时间。因此设计模式显得如此重要。</p>\n<p>MVC模式：<br>Model:保存应用数据状态，回应视图状态查询，处理应用业务逻辑，完成应用功能，将状态变化通知视图<br>View:为用户展示信息提供接口，通过视图向控制器发出请求，向模型发出数据查询<br>Controller:接收用户请求，更新模型数据，更新所对应视图状态响应用户请求，作为视图和模型的媒介，降低耦合度，权责清晰提高开发效率<br>其中Model和Controller之间的交互主要通过KVO来实现，也就是发布定阅模式，对应属性值是变化可以让Controller收到消息<br>View和Controller之间的交互主要通过代理委托，通知及代码块进行实现</p>\n<p>##因此对于一个项目有几点要足够重视：  </p>\n<ol>\n<li>按照模块进行细分  </li>\n<li>尽量不要把所有模块都要用的视图或弹框放在一个CommenView里面，这样可能的结果是这个公共类越来越臃肿。写成一个单独的模块，或者说单例去实现的方法做到专用要好得多。</li>\n<li>所有的视图要继承基视图，导航栏要继承基导航栏，网络请求底层统一调用一个封装好的类。这样最大的好处在于当需求发生改变(导航条上加按钮)或者要统一进行设置时（Http改https）可以很方便的进行设置</li>\n<li>使用Cocoapods去管理所有第三方要用过自己去添加，方便集成，更新和管理</li>\n<li>重视对代码的重用编写公共类进行操作。</li>\n</ol>\n<p><a href=\"https://github.com/cooler112/iOSMVCTemple\" target=\"_blank\" rel=\"noopener\">iOSMVCTemple是自己从项目中提取的框架</a>，集成了很多第三方库和类别，我自己也做了很多自定义，比如用户信息放到单例，封装好的BaseView,BaseNavigationController.主要目的是写成个好的框架不断完善。方便后期快速布置开发环境。<br><img src=\"/2019/03/06/MVC的理解与运用总结/1.png\" alt=\"\"></p>\n"},{"title":"Mac环境下安装NVM","date":"2021-01-10T19:45:38.000Z","_content":"\nnvm就是nodejs version management的缩写，用于切换node版本，使用起来非常方便。\n\n#### 安装 nvm\n\n```ruby\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\n```\n\n```ruby\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\n```\n\n验证安装是否成功\n\n重新打开终端输入 nvm ，当出现“`Node Version Manager`”时，说明已安装成功。\n\n![image-20210110194349971](Mac环境下安装NVM/image-20210110194349971.png)\n\n如果在新的终端输入 nvm 时提示：`command not found: nvm`，有可能是以下原因之一：\n\n- 你的系统可能缺少一个 .bash_profile 文件，你可以创建一个此文件（可通过`vi`或`vim`命令），打开复制粘贴以下代码（*安装nvm成功后终端的最好3行代码*）进去，保存，然后再次运行安装命令；\n\n```bash\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n```\n\n\n\n#### nvm 常用命令\n\n- `nvm install stable` ## 安装最新稳定版 node，当前是node v9.5.0 (npm v5.6.0)\n- `nvm install <version>` ## 安装指定版本，可模糊安装，如：安装v4.4.0，既可nvm install v4.4.0，又可nvm install 4.4\n- `nvm uninstall <version>` ## 删除已安装的指定版本，语法与install类似\n- `nvm use <version>` ## 切换使用指定的版本node\n- `nvm ls` ## 列出所有安装的版本\n- `nvm ls-remote` ## 列出所有远程服务器的版本（官方node version list）\n- `nvm current` ## 显示当前的版本\n- `nvm alias <name> <version>` ## 给不同的版本号添加别名\n- `nvm unalias <name>` ## 删除已定义的别名\n- `nvm reinstall-packages <version>` ## 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包\n\n","source":"_posts/Mac环境下安装NVM.md","raw":"---\ntitle: Mac环境下安装NVM\ndate: 2021-01-10 19:45:38\ntags: nvm\ncategories: 环境搭建\n---\n\nnvm就是nodejs version management的缩写，用于切换node版本，使用起来非常方便。\n\n#### 安装 nvm\n\n```ruby\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\n```\n\n```ruby\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\n```\n\n验证安装是否成功\n\n重新打开终端输入 nvm ，当出现“`Node Version Manager`”时，说明已安装成功。\n\n![image-20210110194349971](Mac环境下安装NVM/image-20210110194349971.png)\n\n如果在新的终端输入 nvm 时提示：`command not found: nvm`，有可能是以下原因之一：\n\n- 你的系统可能缺少一个 .bash_profile 文件，你可以创建一个此文件（可通过`vi`或`vim`命令），打开复制粘贴以下代码（*安装nvm成功后终端的最好3行代码*）进去，保存，然后再次运行安装命令；\n\n```bash\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n```\n\n\n\n#### nvm 常用命令\n\n- `nvm install stable` ## 安装最新稳定版 node，当前是node v9.5.0 (npm v5.6.0)\n- `nvm install <version>` ## 安装指定版本，可模糊安装，如：安装v4.4.0，既可nvm install v4.4.0，又可nvm install 4.4\n- `nvm uninstall <version>` ## 删除已安装的指定版本，语法与install类似\n- `nvm use <version>` ## 切换使用指定的版本node\n- `nvm ls` ## 列出所有安装的版本\n- `nvm ls-remote` ## 列出所有远程服务器的版本（官方node version list）\n- `nvm current` ## 显示当前的版本\n- `nvm alias <name> <version>` ## 给不同的版本号添加别名\n- `nvm unalias <name>` ## 删除已定义的别名\n- `nvm reinstall-packages <version>` ## 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包\n\n","slug":"Mac环境下安装NVM","published":1,"updated":"2021-05-14T02:01:17.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno39000ukuo4n1j3673z","content":"<p>nvm就是nodejs version management的缩写，用于切换node版本，使用起来非常方便。</p>\n<h4 id=\"安装-nvm\"><a href=\"#安装-nvm\" class=\"headerlink\" title=\"安装 nvm\"></a>安装 nvm</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- <span class=\"symbol\">https:</span>/<span class=\"regexp\">/raw.githubusercontent.com/creationix</span><span class=\"regexp\">/nvm/v</span><span class=\"number\">0</span>.<span class=\"number\">33.8</span>/install.sh <span class=\"params\">| bash</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO- <span class=\"symbol\">https:</span>/<span class=\"regexp\">/raw.githubusercontent.com/creationix</span><span class=\"regexp\">/nvm/v</span><span class=\"number\">0</span>.<span class=\"number\">33.8</span>/install.sh <span class=\"params\">| bash</span></span><br></pre></td></tr></table></figure>\n<p>验证安装是否成功</p>\n<p>重新打开终端输入 nvm ，当出现“<code>Node Version Manager</code>”时，说明已安装成功。</p>\n<p><img src=\"/2021/01/10/Mac环境下安装NVM/image-20210110194349971.png\" alt=\"image-20210110194349971\"></p>\n<p>如果在新的终端输入 nvm 时提示：<code>command not found: nvm</code>，有可能是以下原因之一：</p>\n<ul>\n<li>你的系统可能缺少一个 .bash_profile 文件，你可以创建一个此文件（可通过<code>vi</code>或<code>vim</code>命令），打开复制粘贴以下代码（<em>安装nvm成功后终端的最好3行代码</em>）进去，保存，然后再次运行安装命令；</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></span><br><span class=\"line\">[ -s <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; \\. <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span>  <span class=\"comment\"># This loads nvm</span></span><br><span class=\"line\">[ -s <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/bash_completion\"</span> ] &amp;&amp; \\. <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/bash_completion\"</span>  <span class=\"comment\"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"nvm-常用命令\"><a href=\"#nvm-常用命令\" class=\"headerlink\" title=\"nvm 常用命令\"></a>nvm 常用命令</h4><ul>\n<li><code>nvm install stable</code> ## 安装最新稳定版 node，当前是node v9.5.0 (npm v5.6.0)</li>\n<li><code>nvm install &lt;version&gt;</code> ## 安装指定版本，可模糊安装，如：安装v4.4.0，既可nvm install v4.4.0，又可nvm install 4.4</li>\n<li><code>nvm uninstall &lt;version&gt;</code> ## 删除已安装的指定版本，语法与install类似</li>\n<li><code>nvm use &lt;version&gt;</code> ## 切换使用指定的版本node</li>\n<li><code>nvm ls</code> ## 列出所有安装的版本</li>\n<li><code>nvm ls-remote</code> ## 列出所有远程服务器的版本（官方node version list）</li>\n<li><code>nvm current</code> ## 显示当前的版本</li>\n<li><code>nvm alias &lt;name&gt; &lt;version&gt;</code> ## 给不同的版本号添加别名</li>\n<li><code>nvm unalias &lt;name&gt;</code> ## 删除已定义的别名</li>\n<li><code>nvm reinstall-packages &lt;version&gt;</code> ## 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>nvm就是nodejs version management的缩写，用于切换node版本，使用起来非常方便。</p>\n<h4 id=\"安装-nvm\"><a href=\"#安装-nvm\" class=\"headerlink\" title=\"安装 nvm\"></a>安装 nvm</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- <span class=\"symbol\">https:</span>/<span class=\"regexp\">/raw.githubusercontent.com/creationix</span><span class=\"regexp\">/nvm/v</span><span class=\"number\">0</span>.<span class=\"number\">33.8</span>/install.sh <span class=\"params\">| bash</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO- <span class=\"symbol\">https:</span>/<span class=\"regexp\">/raw.githubusercontent.com/creationix</span><span class=\"regexp\">/nvm/v</span><span class=\"number\">0</span>.<span class=\"number\">33.8</span>/install.sh <span class=\"params\">| bash</span></span><br></pre></td></tr></table></figure>\n<p>验证安装是否成功</p>\n<p>重新打开终端输入 nvm ，当出现“<code>Node Version Manager</code>”时，说明已安装成功。</p>\n<p><img src=\"/2021/01/10/Mac环境下安装NVM/image-20210110194349971.png\" alt=\"image-20210110194349971\"></p>\n<p>如果在新的终端输入 nvm 时提示：<code>command not found: nvm</code>，有可能是以下原因之一：</p>\n<ul>\n<li>你的系统可能缺少一个 .bash_profile 文件，你可以创建一个此文件（可通过<code>vi</code>或<code>vim</code>命令），打开复制粘贴以下代码（<em>安装nvm成功后终端的最好3行代码</em>）进去，保存，然后再次运行安装命令；</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></span><br><span class=\"line\">[ -s <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; \\. <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span>  <span class=\"comment\"># This loads nvm</span></span><br><span class=\"line\">[ -s <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/bash_completion\"</span> ] &amp;&amp; \\. <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/bash_completion\"</span>  <span class=\"comment\"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"nvm-常用命令\"><a href=\"#nvm-常用命令\" class=\"headerlink\" title=\"nvm 常用命令\"></a>nvm 常用命令</h4><ul>\n<li><code>nvm install stable</code> ## 安装最新稳定版 node，当前是node v9.5.0 (npm v5.6.0)</li>\n<li><code>nvm install &lt;version&gt;</code> ## 安装指定版本，可模糊安装，如：安装v4.4.0，既可nvm install v4.4.0，又可nvm install 4.4</li>\n<li><code>nvm uninstall &lt;version&gt;</code> ## 删除已安装的指定版本，语法与install类似</li>\n<li><code>nvm use &lt;version&gt;</code> ## 切换使用指定的版本node</li>\n<li><code>nvm ls</code> ## 列出所有安装的版本</li>\n<li><code>nvm ls-remote</code> ## 列出所有远程服务器的版本（官方node version list）</li>\n<li><code>nvm current</code> ## 显示当前的版本</li>\n<li><code>nvm alias &lt;name&gt; &lt;version&gt;</code> ## 给不同的版本号添加别名</li>\n<li><code>nvm unalias &lt;name&gt;</code> ## 删除已定义的别名</li>\n<li><code>nvm reinstall-packages &lt;version&gt;</code> ## 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包</li>\n</ul>\n"},{"title":"Mac常用快捷键","date":"2019-03-06T17:30:42.000Z","_content":"\n###通用命令\nCommand + F\t\t\t搜索  \nCommand + ,\t\t\t属性  \nCommand + 方向\t\t切换  \nCommand + W\t\t\t关闭  \nCommand + O\t\t\t打开  \nCommand + A\t\t\t全选  \nCommand + S\t\t\t保存  \nCommand + C\t\t\t剪切  \nCommand + V\t\t\t粘贴    \nCommand + T\t\t\t打开新标签  \nCommand + Delete\t\t删除  \nCommand + Control + F\t进入全屏框\n\n###finder常用快捷键  \nCommand + shift + N\t新建文件夹  \nCommand + N\t\t\t打开文件夹  \nCommand + L\t\t\t查看信息  \nCommand + delete\t\t删除文件夹  \nCommand + O\t\t\t打开文件  \nCommand + T\t\t\t页内新开界面  \nCommand + L\t\t\t创建快捷方式  \nCommand + ,\t\t\t打开偏好设置  \nCommand + H\t\t\t隐藏当前Finder  \nCommand + Shift + H\t隐藏其它Finder  \nCommand + W\t\t\t关闭当前文件夹  \nCommand + F\t\t\t查找文件  \nCommand + J\t\t\t图标调整  \nCommand + D\t\t\t复制  \nCommand + `\t\t\tFinder切换  \nCommand +\t+\t\t\t放大  \nCommand + -\t\t\t缩小   \n快速跳转：  \n![](image/6.png)\n\n###Iterm常用快捷键\n![](image/7.png)  \nCommand + D\t\t\t分屏横  \nCommand + Shift + D\t分屏竖  \nCommand + N\t\t\t新建窗口  \nOption  + Command + E 浏览所有窗口  \nOption + Command + Number  切换窗口\n\n\n###MacDown快捷键\nControl + Command + F\t全屏  \nShift + Command + S\t\t另存为  \nControl + Command + Space \t表情输入  \nControl + Command + F\t进入全屏  \nCommand +\tM\t\t\t\t放大缩小  \n\n###Alfred常用操作命令\n系统命令  \nScreeenSaver\ntrash \t\t\t\t\t\t垃圾箱  \nemptytrash \t\t\t\t清空回收站  \nlogout  \nsleep  \nsleepdisplays\t\t\t\t关闭屏幕\nlock  \nrestart  \nshutdown\nquit \t\t\t\t\t\t关闭某应用\nforcequit \t\t\t\t强行关闭\nquitall\n\n###Chrome\nCommand + Shift + Delete \t清除浏览记录   \nCommand + Shift + N\t\t  \t匿名浏览  \nCommand + Shift + T\t\t\t重新打开关闭标签  \nCommand + Number \t\t\t进行标签切换  \nCommand + Control + F\t\t进入全屏  \nCommand + Option + F\t\t浏览器搜索  \nCommand + Shift + H\t\t\t首页  \nCommand + Shift + J\t\t\t进入下载页面  \nCommand + ]\t\t\t\t\t前进  \nCommand + [\t\t\t\t\t后退  \nCommand + D\t\t\t\t\t添加书签  \nCommand + Option + B\t\t书签管理器  \nCommand + Shift + 左右\t\t书签移动  \nCommand + Shift + W\t\t\t关闭窗口  \n\n###Note\nCommand + Shift + L\t\t\t添加列表  \nCommand + Shift + A\t\t\t添加文件  \nCommand + L\t\t\t\t\t添加链接  \nCommand + Shift + N\t\t\t新建文件夹  \nCommand + Shift + Option + V\t匹配样式粘贴\nCommand + 1\t\t\t\t\t显示附件浏览器\nCommand + Shift + T\t\t\t标题样式\nCommand + Shift + H\t\t\t小标题\nCommand + Shift + B\t\t\t正文  \n\n###Xcode \nCommand + T\t\t\t\t\t新建标签  \nCommand + W\t\t\t\t\t关闭标签  \nCommand + Control + W\t\t\t关闭当前  \nCommand + N\t\t\t\t\t新建文件  \nCommand + Shift + N\t\t\t新建工程  \n\nCommand + Shift + F\t\t\t全局搜索  \nControl + 1,2,3,4,5\t\t\t\t导航栏不同极切换  \nCommand + 1,2,3,4,5,6\t\t\t工具导航切换  \nCommand + 0\t\t\t\t\t隐藏工具导航器  \nCommand + Option + 1,2,3,4\t\t左边工具栏切换  \nCommand + Option + Control\t\t左边下部工具切换  \nCommand + Option + 0\t\t\t隐藏工具面板  \nControl\t + 6\t\t\t\t\t当前文件类跳转  \nCommand + Shift + J\t\t\t快速定位到当前文档导航区  \nCommand + Shift + Open\t\t快速打开项目文件  \nCommand + Control + Arrow\t\t前后切换，.h.m切换  \n\nCommand + B\t\t\t\t\t编译  \nCommand + R\t\t\t\t\t运行  \nCommand + .\t\t\t\t\t停止  \nF6\t\t\t\t\t\t\t单步  \nF7\t\t\t\t\t\t\t跳入  \nF8\t\t\t\t\t\t\t继续  \n\nCommand + L\t\t\t\t\t跳转行  \nCommand + Shift + K\t\t\t清除工程  \n\nCommand + Option + =\t\t\t更新约束  \nCommand + Option + []\t\t\t上下移动代码  \nCommand + Option + <>\t\t隐藏展开代码  \nCommand + Control + E\t\t\t全局修改代码\t\nCommand + Shift + Y\t\t\t打开控件台  \n\nCommand + up/down\t\t\t跳转到头或尾  \nCommand + delete\t\t\t\t删除光标所在行前代码  \nOption\t + delete\t\t\t\t删除光标前一个单词  \nCommand + left/right\t\t\t移动光标到行前或行尾  ","source":"_posts/Mac常用快捷键.md","raw":"---\ntitle: Mac常用快捷键\ndate: 2019-03-06 17:30:42\ntags: 快捷键\ncategories: 系统操作\n---\n\n###通用命令\nCommand + F\t\t\t搜索  \nCommand + ,\t\t\t属性  \nCommand + 方向\t\t切换  \nCommand + W\t\t\t关闭  \nCommand + O\t\t\t打开  \nCommand + A\t\t\t全选  \nCommand + S\t\t\t保存  \nCommand + C\t\t\t剪切  \nCommand + V\t\t\t粘贴    \nCommand + T\t\t\t打开新标签  \nCommand + Delete\t\t删除  \nCommand + Control + F\t进入全屏框\n\n###finder常用快捷键  \nCommand + shift + N\t新建文件夹  \nCommand + N\t\t\t打开文件夹  \nCommand + L\t\t\t查看信息  \nCommand + delete\t\t删除文件夹  \nCommand + O\t\t\t打开文件  \nCommand + T\t\t\t页内新开界面  \nCommand + L\t\t\t创建快捷方式  \nCommand + ,\t\t\t打开偏好设置  \nCommand + H\t\t\t隐藏当前Finder  \nCommand + Shift + H\t隐藏其它Finder  \nCommand + W\t\t\t关闭当前文件夹  \nCommand + F\t\t\t查找文件  \nCommand + J\t\t\t图标调整  \nCommand + D\t\t\t复制  \nCommand + `\t\t\tFinder切换  \nCommand +\t+\t\t\t放大  \nCommand + -\t\t\t缩小   \n快速跳转：  \n![](image/6.png)\n\n###Iterm常用快捷键\n![](image/7.png)  \nCommand + D\t\t\t分屏横  \nCommand + Shift + D\t分屏竖  \nCommand + N\t\t\t新建窗口  \nOption  + Command + E 浏览所有窗口  \nOption + Command + Number  切换窗口\n\n\n###MacDown快捷键\nControl + Command + F\t全屏  \nShift + Command + S\t\t另存为  \nControl + Command + Space \t表情输入  \nControl + Command + F\t进入全屏  \nCommand +\tM\t\t\t\t放大缩小  \n\n###Alfred常用操作命令\n系统命令  \nScreeenSaver\ntrash \t\t\t\t\t\t垃圾箱  \nemptytrash \t\t\t\t清空回收站  \nlogout  \nsleep  \nsleepdisplays\t\t\t\t关闭屏幕\nlock  \nrestart  \nshutdown\nquit \t\t\t\t\t\t关闭某应用\nforcequit \t\t\t\t强行关闭\nquitall\n\n###Chrome\nCommand + Shift + Delete \t清除浏览记录   \nCommand + Shift + N\t\t  \t匿名浏览  \nCommand + Shift + T\t\t\t重新打开关闭标签  \nCommand + Number \t\t\t进行标签切换  \nCommand + Control + F\t\t进入全屏  \nCommand + Option + F\t\t浏览器搜索  \nCommand + Shift + H\t\t\t首页  \nCommand + Shift + J\t\t\t进入下载页面  \nCommand + ]\t\t\t\t\t前进  \nCommand + [\t\t\t\t\t后退  \nCommand + D\t\t\t\t\t添加书签  \nCommand + Option + B\t\t书签管理器  \nCommand + Shift + 左右\t\t书签移动  \nCommand + Shift + W\t\t\t关闭窗口  \n\n###Note\nCommand + Shift + L\t\t\t添加列表  \nCommand + Shift + A\t\t\t添加文件  \nCommand + L\t\t\t\t\t添加链接  \nCommand + Shift + N\t\t\t新建文件夹  \nCommand + Shift + Option + V\t匹配样式粘贴\nCommand + 1\t\t\t\t\t显示附件浏览器\nCommand + Shift + T\t\t\t标题样式\nCommand + Shift + H\t\t\t小标题\nCommand + Shift + B\t\t\t正文  \n\n###Xcode \nCommand + T\t\t\t\t\t新建标签  \nCommand + W\t\t\t\t\t关闭标签  \nCommand + Control + W\t\t\t关闭当前  \nCommand + N\t\t\t\t\t新建文件  \nCommand + Shift + N\t\t\t新建工程  \n\nCommand + Shift + F\t\t\t全局搜索  \nControl + 1,2,3,4,5\t\t\t\t导航栏不同极切换  \nCommand + 1,2,3,4,5,6\t\t\t工具导航切换  \nCommand + 0\t\t\t\t\t隐藏工具导航器  \nCommand + Option + 1,2,3,4\t\t左边工具栏切换  \nCommand + Option + Control\t\t左边下部工具切换  \nCommand + Option + 0\t\t\t隐藏工具面板  \nControl\t + 6\t\t\t\t\t当前文件类跳转  \nCommand + Shift + J\t\t\t快速定位到当前文档导航区  \nCommand + Shift + Open\t\t快速打开项目文件  \nCommand + Control + Arrow\t\t前后切换，.h.m切换  \n\nCommand + B\t\t\t\t\t编译  \nCommand + R\t\t\t\t\t运行  \nCommand + .\t\t\t\t\t停止  \nF6\t\t\t\t\t\t\t单步  \nF7\t\t\t\t\t\t\t跳入  \nF8\t\t\t\t\t\t\t继续  \n\nCommand + L\t\t\t\t\t跳转行  \nCommand + Shift + K\t\t\t清除工程  \n\nCommand + Option + =\t\t\t更新约束  \nCommand + Option + []\t\t\t上下移动代码  \nCommand + Option + <>\t\t隐藏展开代码  \nCommand + Control + E\t\t\t全局修改代码\t\nCommand + Shift + Y\t\t\t打开控件台  \n\nCommand + up/down\t\t\t跳转到头或尾  \nCommand + delete\t\t\t\t删除光标所在行前代码  \nOption\t + delete\t\t\t\t删除光标前一个单词  \nCommand + left/right\t\t\t移动光标到行前或行尾  ","slug":"Mac常用快捷键","published":1,"updated":"2021-05-14T02:01:17.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno3b000ykuo4srnszrzs","content":"<p>###通用命令<br>Command + F            搜索<br>Command + ,            属性<br>Command + 方向        切换<br>Command + W            关闭<br>Command + O            打开<br>Command + A            全选<br>Command + S            保存<br>Command + C            剪切<br>Command + V            粘贴<br>Command + T            打开新标签<br>Command + Delete        删除<br>Command + Control + F    进入全屏框</p>\n<p>###finder常用快捷键<br>Command + shift + N    新建文件夹<br>Command + N            打开文件夹<br>Command + L            查看信息<br>Command + delete        删除文件夹<br>Command + O            打开文件<br>Command + T            页内新开界面<br>Command + L            创建快捷方式<br>Command + ,            打开偏好设置<br>Command + H            隐藏当前Finder<br>Command + Shift + H    隐藏其它Finder<br>Command + W            关闭当前文件夹<br>Command + F            查找文件<br>Command + J            图标调整<br>Command + D            复制<br>Command + `            Finder切换<br>Command +    +            放大<br>Command + -            缩小<br>快速跳转：<br><img src=\"/2019/03/06/Mac常用快捷键/6.png\" alt=\"\"></p>\n<p>###Iterm常用快捷键<br><img src=\"/2019/03/06/Mac常用快捷键/7.png\" alt=\"\"><br>Command + D            分屏横<br>Command + Shift + D    分屏竖<br>Command + N            新建窗口<br>Option  + Command + E 浏览所有窗口<br>Option + Command + Number  切换窗口</p>\n<p>###MacDown快捷键<br>Control + Command + F    全屏<br>Shift + Command + S        另存为<br>Control + Command + Space     表情输入<br>Control + Command + F    进入全屏<br>Command +    M                放大缩小  </p>\n<p>###Alfred常用操作命令<br>系统命令<br>ScreeenSaver<br>trash                         垃圾箱<br>emptytrash                 清空回收站<br>logout<br>sleep<br>sleepdisplays                关闭屏幕<br>lock<br>restart<br>shutdown<br>quit                         关闭某应用<br>forcequit                 强行关闭<br>quitall</p>\n<p>###Chrome<br>Command + Shift + Delete     清除浏览记录<br>Command + Shift + N              匿名浏览<br>Command + Shift + T            重新打开关闭标签<br>Command + Number             进行标签切换<br>Command + Control + F        进入全屏<br>Command + Option + F        浏览器搜索<br>Command + Shift + H            首页<br>Command + Shift + J            进入下载页面<br>Command + ]                    前进<br>Command + [                    后退<br>Command + D                    添加书签<br>Command + Option + B        书签管理器<br>Command + Shift + 左右        书签移动<br>Command + Shift + W            关闭窗口  </p>\n<p>###Note<br>Command + Shift + L            添加列表<br>Command + Shift + A            添加文件<br>Command + L                    添加链接<br>Command + Shift + N            新建文件夹<br>Command + Shift + Option + V    匹配样式粘贴<br>Command + 1                    显示附件浏览器<br>Command + Shift + T            标题样式<br>Command + Shift + H            小标题<br>Command + Shift + B            正文  </p>\n<p>###Xcode<br>Command + T                    新建标签<br>Command + W                    关闭标签<br>Command + Control + W            关闭当前<br>Command + N                    新建文件<br>Command + Shift + N            新建工程  </p>\n<p>Command + Shift + F            全局搜索<br>Control + 1,2,3,4,5                导航栏不同极切换<br>Command + 1,2,3,4,5,6            工具导航切换<br>Command + 0                    隐藏工具导航器<br>Command + Option + 1,2,3,4        左边工具栏切换<br>Command + Option + Control        左边下部工具切换<br>Command + Option + 0            隐藏工具面板<br>Control     + 6                    当前文件类跳转<br>Command + Shift + J            快速定位到当前文档导航区<br>Command + Shift + Open        快速打开项目文件<br>Command + Control + Arrow        前后切换，.h.m切换  </p>\n<p>Command + B                    编译<br>Command + R                    运行<br>Command + .                    停止<br>F6                            单步<br>F7                            跳入<br>F8                            继续  </p>\n<p>Command + L                    跳转行<br>Command + Shift + K            清除工程  </p>\n<p>Command + Option + =            更新约束<br>Command + Option + []            上下移动代码<br>Command + Option + &lt;&gt;        隐藏展开代码<br>Command + Control + E            全局修改代码<br>Command + Shift + Y            打开控件台  </p>\n<p>Command + up/down            跳转到头或尾<br>Command + delete                删除光标所在行前代码<br>Option     + delete                删除光标前一个单词<br>Command + left/right            移动光标到行前或行尾  </p>\n","site":{"data":{}},"excerpt":"","more":"<p>###通用命令<br>Command + F            搜索<br>Command + ,            属性<br>Command + 方向        切换<br>Command + W            关闭<br>Command + O            打开<br>Command + A            全选<br>Command + S            保存<br>Command + C            剪切<br>Command + V            粘贴<br>Command + T            打开新标签<br>Command + Delete        删除<br>Command + Control + F    进入全屏框</p>\n<p>###finder常用快捷键<br>Command + shift + N    新建文件夹<br>Command + N            打开文件夹<br>Command + L            查看信息<br>Command + delete        删除文件夹<br>Command + O            打开文件<br>Command + T            页内新开界面<br>Command + L            创建快捷方式<br>Command + ,            打开偏好设置<br>Command + H            隐藏当前Finder<br>Command + Shift + H    隐藏其它Finder<br>Command + W            关闭当前文件夹<br>Command + F            查找文件<br>Command + J            图标调整<br>Command + D            复制<br>Command + `            Finder切换<br>Command +    +            放大<br>Command + -            缩小<br>快速跳转：<br><img src=\"/2019/03/06/Mac常用快捷键/6.png\" alt=\"\"></p>\n<p>###Iterm常用快捷键<br><img src=\"/2019/03/06/Mac常用快捷键/7.png\" alt=\"\"><br>Command + D            分屏横<br>Command + Shift + D    分屏竖<br>Command + N            新建窗口<br>Option  + Command + E 浏览所有窗口<br>Option + Command + Number  切换窗口</p>\n<p>###MacDown快捷键<br>Control + Command + F    全屏<br>Shift + Command + S        另存为<br>Control + Command + Space     表情输入<br>Control + Command + F    进入全屏<br>Command +    M                放大缩小  </p>\n<p>###Alfred常用操作命令<br>系统命令<br>ScreeenSaver<br>trash                         垃圾箱<br>emptytrash                 清空回收站<br>logout<br>sleep<br>sleepdisplays                关闭屏幕<br>lock<br>restart<br>shutdown<br>quit                         关闭某应用<br>forcequit                 强行关闭<br>quitall</p>\n<p>###Chrome<br>Command + Shift + Delete     清除浏览记录<br>Command + Shift + N              匿名浏览<br>Command + Shift + T            重新打开关闭标签<br>Command + Number             进行标签切换<br>Command + Control + F        进入全屏<br>Command + Option + F        浏览器搜索<br>Command + Shift + H            首页<br>Command + Shift + J            进入下载页面<br>Command + ]                    前进<br>Command + [                    后退<br>Command + D                    添加书签<br>Command + Option + B        书签管理器<br>Command + Shift + 左右        书签移动<br>Command + Shift + W            关闭窗口  </p>\n<p>###Note<br>Command + Shift + L            添加列表<br>Command + Shift + A            添加文件<br>Command + L                    添加链接<br>Command + Shift + N            新建文件夹<br>Command + Shift + Option + V    匹配样式粘贴<br>Command + 1                    显示附件浏览器<br>Command + Shift + T            标题样式<br>Command + Shift + H            小标题<br>Command + Shift + B            正文  </p>\n<p>###Xcode<br>Command + T                    新建标签<br>Command + W                    关闭标签<br>Command + Control + W            关闭当前<br>Command + N                    新建文件<br>Command + Shift + N            新建工程  </p>\n<p>Command + Shift + F            全局搜索<br>Control + 1,2,3,4,5                导航栏不同极切换<br>Command + 1,2,3,4,5,6            工具导航切换<br>Command + 0                    隐藏工具导航器<br>Command + Option + 1,2,3,4        左边工具栏切换<br>Command + Option + Control        左边下部工具切换<br>Command + Option + 0            隐藏工具面板<br>Control     + 6                    当前文件类跳转<br>Command + Shift + J            快速定位到当前文档导航区<br>Command + Shift + Open        快速打开项目文件<br>Command + Control + Arrow        前后切换，.h.m切换  </p>\n<p>Command + B                    编译<br>Command + R                    运行<br>Command + .                    停止<br>F6                            单步<br>F7                            跳入<br>F8                            继续  </p>\n<p>Command + L                    跳转行<br>Command + Shift + K            清除工程  </p>\n<p>Command + Option + =            更新约束<br>Command + Option + []            上下移动代码<br>Command + Option + &lt;&gt;        隐藏展开代码<br>Command + Control + E            全局修改代码<br>Command + Shift + Y            打开控件台  </p>\n<p>Command + up/down            跳转到头或尾<br>Command + delete                删除光标所在行前代码<br>Option     + delete                删除光标前一个单词<br>Command + left/right            移动光标到行前或行尾  </p>\n"},{"title":"Jenv管理Java","date":"2019-03-06T17:30:12.000Z","_content":"\n什么是Jenv：http://jenv.io/ \njenv is Java environment manager, and it is a clone of RVM for Java. jenv can manage parallel versions of Java development kits on any Unix based system. It provides a convenient command line interface for installing, switching, removing and listing Candidates.\n\n也就是各类JAVA环境的安装配置，如果手工去作是一件很麻烦的事情，但是有了这个工具后，简单命令即可实现快速配置。\n\n\nWhy jenv？\n* Easy to manage Java version, such as 1.6, 1.7, 1.8 and 1.9\n* Easy to install Java tools, such as Ant, Maven, Tomcat etc.\n* Easy to manage candidate's version such as install new version or uninstall the old one.\n* Directory is standard, and friendly to IDE\n* Easy to extend. You can setup your own jenv on your company to manage development environment.\n* Easy to backup your env.\n* Bash completion support. Use TAB to complete command name, candidate name and version.\n  为什么使用呢？很清楚\n  方便切换JDK环境，方便安装各类Java工具\n  方便更新包管理，界面友好、方便拓展备份、自动命令行补充等等\n\n下载步骤：\n$ curl -L -s get.jenv.io | bash\n\n$ mkdir -p $HOME/.jenv/candidates/java\n\n配置Java环境：\n从官网下载各类JAVA的JDK：\nhttp://www.oracle.com/technetwork/java/javase/downloads/index.html\n安装后添加链接：\nln -s /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home ~/.jenv/candidates/java/1.8.0_151\n启用该环境\nJenv default java 1.8.0_151 即可\n\n安装第三方如Maven \n$ jenv list maven\nFinal install the candidate with the version:\n$ jenv install maven 3.3.9\nIn your terminal, input mvn --version to check the installation.\n\n通过jenv -h可以知道很多常用的命令\n可以使用jenv all查看所有支持的第三方\n\n灵活的安装方式\nInstall candidates in other ways\nInstall from local folder:\n$ jenv install java 1.8.0_71 /user/local/jdk-1.8.0_71\nInstall from git repository:\n $ jenv install spike 0.0.1 git@github.com:linux-china/groovy_scripts.git\n\n方便的更新\nHow to sync candidates information with the repository\njenv stores the repository information with offline mode, please use following command to update repository information.\n$ jenv repo update\n\nHow to update jenv\nPlease use selfupdate command to get last version.\n$ jenv selfupdate\n\njenvrc support\njenvrc is jenv setup file which contains candidate and the version as following:\njava=1.8.0_71\nmaven=3.3.9\nAfter you enter this directory, jenv will setup environment automatically.","source":"_posts/Jenv管理Java.md","raw":"---\ntitle: Jenv管理Java\ndate: 2019-03-06 17:30:12\ntags: 编程工具\ncategories: 编程工具\n---\n\n什么是Jenv：http://jenv.io/ \njenv is Java environment manager, and it is a clone of RVM for Java. jenv can manage parallel versions of Java development kits on any Unix based system. It provides a convenient command line interface for installing, switching, removing and listing Candidates.\n\n也就是各类JAVA环境的安装配置，如果手工去作是一件很麻烦的事情，但是有了这个工具后，简单命令即可实现快速配置。\n\n\nWhy jenv？\n* Easy to manage Java version, such as 1.6, 1.7, 1.8 and 1.9\n* Easy to install Java tools, such as Ant, Maven, Tomcat etc.\n* Easy to manage candidate's version such as install new version or uninstall the old one.\n* Directory is standard, and friendly to IDE\n* Easy to extend. You can setup your own jenv on your company to manage development environment.\n* Easy to backup your env.\n* Bash completion support. Use TAB to complete command name, candidate name and version.\n  为什么使用呢？很清楚\n  方便切换JDK环境，方便安装各类Java工具\n  方便更新包管理，界面友好、方便拓展备份、自动命令行补充等等\n\n下载步骤：\n$ curl -L -s get.jenv.io | bash\n\n$ mkdir -p $HOME/.jenv/candidates/java\n\n配置Java环境：\n从官网下载各类JAVA的JDK：\nhttp://www.oracle.com/technetwork/java/javase/downloads/index.html\n安装后添加链接：\nln -s /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home ~/.jenv/candidates/java/1.8.0_151\n启用该环境\nJenv default java 1.8.0_151 即可\n\n安装第三方如Maven \n$ jenv list maven\nFinal install the candidate with the version:\n$ jenv install maven 3.3.9\nIn your terminal, input mvn --version to check the installation.\n\n通过jenv -h可以知道很多常用的命令\n可以使用jenv all查看所有支持的第三方\n\n灵活的安装方式\nInstall candidates in other ways\nInstall from local folder:\n$ jenv install java 1.8.0_71 /user/local/jdk-1.8.0_71\nInstall from git repository:\n $ jenv install spike 0.0.1 git@github.com:linux-china/groovy_scripts.git\n\n方便的更新\nHow to sync candidates information with the repository\njenv stores the repository information with offline mode, please use following command to update repository information.\n$ jenv repo update\n\nHow to update jenv\nPlease use selfupdate command to get last version.\n$ jenv selfupdate\n\njenvrc support\njenvrc is jenv setup file which contains candidate and the version as following:\njava=1.8.0_71\nmaven=3.3.9\nAfter you enter this directory, jenv will setup environment automatically.","slug":"Jenv管理Java","published":1,"updated":"2021-05-14T02:01:17.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno3e0011kuo4b3k8iiqo","content":"<p>什么是Jenv：<a href=\"http://jenv.io/\" target=\"_blank\" rel=\"noopener\">http://jenv.io/</a><br>jenv is Java environment manager, and it is a clone of RVM for Java. jenv can manage parallel versions of Java development kits on any Unix based system. It provides a convenient command line interface for installing, switching, removing and listing Candidates.</p>\n<p>也就是各类JAVA环境的安装配置，如果手工去作是一件很麻烦的事情，但是有了这个工具后，简单命令即可实现快速配置。</p>\n<p>Why jenv？</p>\n<ul>\n<li>Easy to manage Java version, such as 1.6, 1.7, 1.8 and 1.9</li>\n<li>Easy to install Java tools, such as Ant, Maven, Tomcat etc.</li>\n<li>Easy to manage candidate’s version such as install new version or uninstall the old one.</li>\n<li>Directory is standard, and friendly to IDE</li>\n<li>Easy to extend. You can setup your own jenv on your company to manage development environment.</li>\n<li>Easy to backup your env.</li>\n<li>Bash completion support. Use TAB to complete command name, candidate name and version.<br>为什么使用呢？很清楚<br>方便切换JDK环境，方便安装各类Java工具<br>方便更新包管理，界面友好、方便拓展备份、自动命令行补充等等</li>\n</ul>\n<p>下载步骤：<br>$ curl -L -s get.jenv.io | bash</p>\n<p>$ mkdir -p $HOME/.jenv/candidates/java</p>\n<p>配置Java环境：<br>从官网下载各类JAVA的JDK：<br><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br>安装后添加链接：<br>ln -s /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home ~/.jenv/candidates/java/1.8.0_151<br>启用该环境<br>Jenv default java 1.8.0_151 即可</p>\n<p>安装第三方如Maven<br>$ jenv list maven<br>Final install the candidate with the version:<br>$ jenv install maven 3.3.9<br>In your terminal, input mvn –version to check the installation.</p>\n<p>通过jenv -h可以知道很多常用的命令<br>可以使用jenv all查看所有支持的第三方</p>\n<p>灵活的安装方式<br>Install candidates in other ways<br>Install from local folder:<br>$ jenv install java 1.8.0_71 /user/local/jdk-1.8.0_71<br>Install from git repository:<br> $ jenv install spike 0.0.1 <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:linux-china/groovy_scripts.git</p>\n<p>方便的更新<br>How to sync candidates information with the repository<br>jenv stores the repository information with offline mode, please use following command to update repository information.<br>$ jenv repo update</p>\n<p>How to update jenv<br>Please use selfupdate command to get last version.<br>$ jenv selfupdate</p>\n<p>jenvrc support<br>jenvrc is jenv setup file which contains candidate and the version as following:<br>java=1.8.0_71<br>maven=3.3.9<br>After you enter this directory, jenv will setup environment automatically.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>什么是Jenv：<a href=\"http://jenv.io/\" target=\"_blank\" rel=\"noopener\">http://jenv.io/</a><br>jenv is Java environment manager, and it is a clone of RVM for Java. jenv can manage parallel versions of Java development kits on any Unix based system. It provides a convenient command line interface for installing, switching, removing and listing Candidates.</p>\n<p>也就是各类JAVA环境的安装配置，如果手工去作是一件很麻烦的事情，但是有了这个工具后，简单命令即可实现快速配置。</p>\n<p>Why jenv？</p>\n<ul>\n<li>Easy to manage Java version, such as 1.6, 1.7, 1.8 and 1.9</li>\n<li>Easy to install Java tools, such as Ant, Maven, Tomcat etc.</li>\n<li>Easy to manage candidate’s version such as install new version or uninstall the old one.</li>\n<li>Directory is standard, and friendly to IDE</li>\n<li>Easy to extend. You can setup your own jenv on your company to manage development environment.</li>\n<li>Easy to backup your env.</li>\n<li>Bash completion support. Use TAB to complete command name, candidate name and version.<br>为什么使用呢？很清楚<br>方便切换JDK环境，方便安装各类Java工具<br>方便更新包管理，界面友好、方便拓展备份、自动命令行补充等等</li>\n</ul>\n<p>下载步骤：<br>$ curl -L -s get.jenv.io | bash</p>\n<p>$ mkdir -p $HOME/.jenv/candidates/java</p>\n<p>配置Java环境：<br>从官网下载各类JAVA的JDK：<br><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br>安装后添加链接：<br>ln -s /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home ~/.jenv/candidates/java/1.8.0_151<br>启用该环境<br>Jenv default java 1.8.0_151 即可</p>\n<p>安装第三方如Maven<br>$ jenv list maven<br>Final install the candidate with the version:<br>$ jenv install maven 3.3.9<br>In your terminal, input mvn –version to check the installation.</p>\n<p>通过jenv -h可以知道很多常用的命令<br>可以使用jenv all查看所有支持的第三方</p>\n<p>灵活的安装方式<br>Install candidates in other ways<br>Install from local folder:<br>$ jenv install java 1.8.0_71 /user/local/jdk-1.8.0_71<br>Install from git repository:<br> $ jenv install spike 0.0.1 <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:linux-china/groovy_scripts.git</p>\n<p>方便的更新<br>How to sync candidates information with the repository<br>jenv stores the repository information with offline mode, please use following command to update repository information.<br>$ jenv repo update</p>\n<p>How to update jenv<br>Please use selfupdate command to get last version.<br>$ jenv selfupdate</p>\n<p>jenvrc support<br>jenvrc is jenv setup file which contains candidate and the version as following:<br>java=1.8.0_71<br>maven=3.3.9<br>After you enter this directory, jenv will setup environment automatically.</p>\n"},{"title":"OC项目开发常用宏定义","date":"2019-03-06T17:40:09.000Z","_content":"\n---\ntags:\n```\n#define WS(weakSelf)  __weak __typeof(self)weakSelf = self; //__typeof() 声明数据类型\n#define DEF [NSUserDefaults standardUserDefaults]\n\n//屏幕适配 间距设置\n#define HORIZ_5 AUTO_WIDTH(5)\n#define HORIZ_10 AUTO_WIDTH(10)\n#define VERTICAL_5  AUTO_HIGHT(5)\n#define VERTICAL_10  AUTO_HIGHT(10)\n\n//指定某设计图尺寸确定高度或指按屏幕比例放缩\n#define IMGHEIGHT_720(x) (x/720.0f*Main_Screen_Width)\n//#deine IMGHEIGHT(x)(y) (y/x*AUTO_WIDTH(x))\n\n//设备尺寸\n#define iphone4x_3_5 ([UIScreen mainScreen].bounds.size.height==480.0f)\n#define iphone5x_4_0 ([UIScreen mainScreen].bounds.size.height==568.0f)\n#define iphone6_4_7 ([UIScreen mainScreen].bounds.size.height==667.0f)\n#define iphone6Plus_5_5 ([UIScreen mainScreen].bounds.size.height==736.0f || [UIScreen mainScreen].bounds.size.height==414.0f)\n#define IMAGEINDEX Main_Screen_Width / 720.0f\n\n//应用框架尺寸\n#define  NAVHEIGHT 64\n#define TABBARHEIGHT 40\n\n//app 尺寸宏定义\n#define Main_Screen_Height [[UIScreen mainScreen] bounds].size.height //主屏幕的高度\n#define Main_Screen_Width  [[UIScreen mainScreen] bounds].size.width  //主屏幕的宽度\n/*** KeyWindow Height Width */\n#define KeyWindow_Height [[[UIApplication sharedApplication] keyWindow] frame].size.height //KeyWindow的高度\n#define KeyWindow_Width  [[[[UIApplication sharedApplication] keyWindow] frame].size..width  //KeyWindow的宽度\n#define AUTO_WIDTH(number)   (number) / 375.0 *  CGRectGetWidth([UIScreen mainScreen].bounds)\n#define AUTO_HIGHT(number)   (number) / 667.0 *  CGRectGetHeight([UIScreen mainScreen].bounds)\n\n#define AUTO_WIDTH1080(number)   (number) / 540.0 *  CGRectGetWidth([UIScreen mainScreen].bounds)\n#define AUTO_HIGHT1920(number)   (number) / 960.0 *  CGRectGetHeight([UIScreen mainScreen].bounds)\n//当前版本\n#define FSystenVersion            ([[[UIDevice currentDevice] systemVersion] floatValue])\n#define AppVersion              ([[[NSBundle mainBundle] objectForInfoDictionaryKey:@\"CFBundleShortVersionString\"] floatValue])\n\n// 字符串去空格\n#define strTrimming(x) [x stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]]\n```\n\n#颜色字号定义\n```\n#define COLORWITHRGB(r,g,b,a) [UIColor colorWithRed:r/255.0 green:g/255.0 blue:b/255.0 alpha:a]\n//主题色\n#define STATUS_BAR_COLOR [UIColor colorWithRed:255/255.0 green:56/255.0 blue:61/255.0 alpha:1]\n//#define TINY_COCLOR [UIColor colorWithRed:244/255.0 green:120/255.0 blue:0/255.0 alpha:1]\n#define TINY_COCLOR [UIColor colorWithRed:255/255.0 green:56/255.0 blue:61/255.0 alpha:1]\n#define TINY_LIGHT_COLOR UIColorFromRGB(0xff9b9e)\n\n#define BACKGROUNDCOLOR [UIColor colorWithRed:243/255.0 green:243/255.0 blue:243/255.0 alpha:1]\n\n#define RGBCOLOR(r,g,b) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:1]\n#define RGBACOLOR(r,g,b,a) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:(a)]\n#define ARC_COLOR RGBCOLOR(arc4random()%255, arc4random()%255, arc4random()%255)\n#define KdarkGayColor RGBCOLOR(50, 50, 50)//深灰\n#define KlightGayColor  RGBCOLOR(220, 220,220)//浅灰\n#define KtextGayColor UIColorFromRGB(0x616161)\n#define darkf4 UIColorFromRGB(0xf4f4f4)\n#define dark444 UIColorFromRGB(0x444444)\n#define dark999 UIColorFromRGB(0x999999)\n#define dark666 UIColorFromRGB(0x666666)\n#define darkf3f UIColorFromRGB(0xf3f3f3)\n\n#define FONT(x) [UIFont systemFontOfSize:x]\n#define FONT_B(x) [UIFont boldSystemFontOfSize:x]\n\n#define FONT_10   [UIFont systemFontOfSize:10]\n#define FONT_10_B [UIFont boldSystemFontOfSize:10]\n\n#define FONT_12   [UIFont systemFontOfSize:12]\n#define FONT_12_B [UIFont boldSystemFontOfSize:12]\n\n#define FONT_14   [UIFont systemFontOfSize:14]\n#define FONT_14_B [UIFont boldSystemFontOfSize:14]\n\n#define FONT_16   [UIFont systemFontOfSize:16]\n#define FONT_16_B [UIFont boldSystemFontOfSize:16]\n\n#define FONT_18   [UIFont systemFontOfSize:18]\n#define FONT_18_B [UIFont boldSystemFontOfSize:18]\n//适配字体\n#define SizeScale ((KeyWindow_Height > 568) ? KeyWindow_Height/568 : 1)\n#define FONTNEW(x) [UIFont systemFontOfSize:x * SizeScale]\n#define FONTNEW_B(x) [UIFont boldSystemFontOfSize:x *SizeScale]\n\n#define FONTNEW_10   FONTNEW(10)\n#define FONTNEW_10_B FONTNEW_B(10)\n\n#define FONTNEW_12   FONTNEW(12)\n#define FONTNEW_12_B FONTNEW_B(12)\n\n#define FONTNEW_14   FONTNEW(14)\n#define FONTNEW_14_B FONTNEW_B(14)\n\n#define FONTNEW_16   FONTNEW(16)\n#define FONTNEW_16_B FONTNEW_B(16)\n\n#define FONTNEW_18   FONTNEW(18)\n#define FONTNEW_18_B FONTNEW_B(18)\n\n#define SizeScale1920 ((KeyWindow_Height > 960) ? KeyWindow_Height/960 : 1)\n#define FONTNEW1080(x) if(iphone6Plus_5_5){return [UIFont systemFontOfSize:x * 1.15 / 3];}\n#define FONTNEW_B1920(x) [UIFont boldSystemFontOfSize:x *SizeScale]\n\n//RGB颜色转换（16进制->10进制）\n#define UIColorFromRGB(rgbValue)    [UIColor colorWithRed:((float)((rgbValue & 0xFF0000) >> 16))/255.0 green:((float)((rgbValue & 0xFF00) >> 8))/255.0 blue:((float)(rgbValue & 0xFF))/255.0 alpha:1.0]\n\n#define lightgrayColor  UIColorFromRGB(0xe8e8e8)\n#define mostlightgrayColor  UIColorFromRGB(0xf3f3f3)\n#define slivergrayColor  UIColorFromRGB(0xc0c0c0)\n#define darkgrayColor  UIColorFromRGB(0x444444)\n#define mostdarkgrayColor  UIColorFromRGB(0x999999)\n#define darkmiddleColor UIColorFromRGB(0x666666)\n#define bluemiddleColor UIColorFromRGB(0x00a0ec)\n#define grayCCCCC UIColorFromRGB(0xcccccc)\n\n#define LOADIMAGE(file) [[UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:file ofType:@\"png\"]] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]\n#define LOADIMAGECACHES(file) [UIImage imageNamed:file]\n#define PLACEHOLDER_IMAGE    LOADIMAGECACHES(@\"duoduo_gray\")\n\n#endif\n\n```","source":"_posts/OC项目开发常用宏定义.md","raw":"---\ntitle: OC项目开发常用宏定义\ndate: 2019-03-06 17:40:09\ntags: OC\ncategories: 苹果开发\n---\n\n---\ntags:\n```\n#define WS(weakSelf)  __weak __typeof(self)weakSelf = self; //__typeof() 声明数据类型\n#define DEF [NSUserDefaults standardUserDefaults]\n\n//屏幕适配 间距设置\n#define HORIZ_5 AUTO_WIDTH(5)\n#define HORIZ_10 AUTO_WIDTH(10)\n#define VERTICAL_5  AUTO_HIGHT(5)\n#define VERTICAL_10  AUTO_HIGHT(10)\n\n//指定某设计图尺寸确定高度或指按屏幕比例放缩\n#define IMGHEIGHT_720(x) (x/720.0f*Main_Screen_Width)\n//#deine IMGHEIGHT(x)(y) (y/x*AUTO_WIDTH(x))\n\n//设备尺寸\n#define iphone4x_3_5 ([UIScreen mainScreen].bounds.size.height==480.0f)\n#define iphone5x_4_0 ([UIScreen mainScreen].bounds.size.height==568.0f)\n#define iphone6_4_7 ([UIScreen mainScreen].bounds.size.height==667.0f)\n#define iphone6Plus_5_5 ([UIScreen mainScreen].bounds.size.height==736.0f || [UIScreen mainScreen].bounds.size.height==414.0f)\n#define IMAGEINDEX Main_Screen_Width / 720.0f\n\n//应用框架尺寸\n#define  NAVHEIGHT 64\n#define TABBARHEIGHT 40\n\n//app 尺寸宏定义\n#define Main_Screen_Height [[UIScreen mainScreen] bounds].size.height //主屏幕的高度\n#define Main_Screen_Width  [[UIScreen mainScreen] bounds].size.width  //主屏幕的宽度\n/*** KeyWindow Height Width */\n#define KeyWindow_Height [[[UIApplication sharedApplication] keyWindow] frame].size.height //KeyWindow的高度\n#define KeyWindow_Width  [[[[UIApplication sharedApplication] keyWindow] frame].size..width  //KeyWindow的宽度\n#define AUTO_WIDTH(number)   (number) / 375.0 *  CGRectGetWidth([UIScreen mainScreen].bounds)\n#define AUTO_HIGHT(number)   (number) / 667.0 *  CGRectGetHeight([UIScreen mainScreen].bounds)\n\n#define AUTO_WIDTH1080(number)   (number) / 540.0 *  CGRectGetWidth([UIScreen mainScreen].bounds)\n#define AUTO_HIGHT1920(number)   (number) / 960.0 *  CGRectGetHeight([UIScreen mainScreen].bounds)\n//当前版本\n#define FSystenVersion            ([[[UIDevice currentDevice] systemVersion] floatValue])\n#define AppVersion              ([[[NSBundle mainBundle] objectForInfoDictionaryKey:@\"CFBundleShortVersionString\"] floatValue])\n\n// 字符串去空格\n#define strTrimming(x) [x stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]]\n```\n\n#颜色字号定义\n```\n#define COLORWITHRGB(r,g,b,a) [UIColor colorWithRed:r/255.0 green:g/255.0 blue:b/255.0 alpha:a]\n//主题色\n#define STATUS_BAR_COLOR [UIColor colorWithRed:255/255.0 green:56/255.0 blue:61/255.0 alpha:1]\n//#define TINY_COCLOR [UIColor colorWithRed:244/255.0 green:120/255.0 blue:0/255.0 alpha:1]\n#define TINY_COCLOR [UIColor colorWithRed:255/255.0 green:56/255.0 blue:61/255.0 alpha:1]\n#define TINY_LIGHT_COLOR UIColorFromRGB(0xff9b9e)\n\n#define BACKGROUNDCOLOR [UIColor colorWithRed:243/255.0 green:243/255.0 blue:243/255.0 alpha:1]\n\n#define RGBCOLOR(r,g,b) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:1]\n#define RGBACOLOR(r,g,b,a) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:(a)]\n#define ARC_COLOR RGBCOLOR(arc4random()%255, arc4random()%255, arc4random()%255)\n#define KdarkGayColor RGBCOLOR(50, 50, 50)//深灰\n#define KlightGayColor  RGBCOLOR(220, 220,220)//浅灰\n#define KtextGayColor UIColorFromRGB(0x616161)\n#define darkf4 UIColorFromRGB(0xf4f4f4)\n#define dark444 UIColorFromRGB(0x444444)\n#define dark999 UIColorFromRGB(0x999999)\n#define dark666 UIColorFromRGB(0x666666)\n#define darkf3f UIColorFromRGB(0xf3f3f3)\n\n#define FONT(x) [UIFont systemFontOfSize:x]\n#define FONT_B(x) [UIFont boldSystemFontOfSize:x]\n\n#define FONT_10   [UIFont systemFontOfSize:10]\n#define FONT_10_B [UIFont boldSystemFontOfSize:10]\n\n#define FONT_12   [UIFont systemFontOfSize:12]\n#define FONT_12_B [UIFont boldSystemFontOfSize:12]\n\n#define FONT_14   [UIFont systemFontOfSize:14]\n#define FONT_14_B [UIFont boldSystemFontOfSize:14]\n\n#define FONT_16   [UIFont systemFontOfSize:16]\n#define FONT_16_B [UIFont boldSystemFontOfSize:16]\n\n#define FONT_18   [UIFont systemFontOfSize:18]\n#define FONT_18_B [UIFont boldSystemFontOfSize:18]\n//适配字体\n#define SizeScale ((KeyWindow_Height > 568) ? KeyWindow_Height/568 : 1)\n#define FONTNEW(x) [UIFont systemFontOfSize:x * SizeScale]\n#define FONTNEW_B(x) [UIFont boldSystemFontOfSize:x *SizeScale]\n\n#define FONTNEW_10   FONTNEW(10)\n#define FONTNEW_10_B FONTNEW_B(10)\n\n#define FONTNEW_12   FONTNEW(12)\n#define FONTNEW_12_B FONTNEW_B(12)\n\n#define FONTNEW_14   FONTNEW(14)\n#define FONTNEW_14_B FONTNEW_B(14)\n\n#define FONTNEW_16   FONTNEW(16)\n#define FONTNEW_16_B FONTNEW_B(16)\n\n#define FONTNEW_18   FONTNEW(18)\n#define FONTNEW_18_B FONTNEW_B(18)\n\n#define SizeScale1920 ((KeyWindow_Height > 960) ? KeyWindow_Height/960 : 1)\n#define FONTNEW1080(x) if(iphone6Plus_5_5){return [UIFont systemFontOfSize:x * 1.15 / 3];}\n#define FONTNEW_B1920(x) [UIFont boldSystemFontOfSize:x *SizeScale]\n\n//RGB颜色转换（16进制->10进制）\n#define UIColorFromRGB(rgbValue)    [UIColor colorWithRed:((float)((rgbValue & 0xFF0000) >> 16))/255.0 green:((float)((rgbValue & 0xFF00) >> 8))/255.0 blue:((float)(rgbValue & 0xFF))/255.0 alpha:1.0]\n\n#define lightgrayColor  UIColorFromRGB(0xe8e8e8)\n#define mostlightgrayColor  UIColorFromRGB(0xf3f3f3)\n#define slivergrayColor  UIColorFromRGB(0xc0c0c0)\n#define darkgrayColor  UIColorFromRGB(0x444444)\n#define mostdarkgrayColor  UIColorFromRGB(0x999999)\n#define darkmiddleColor UIColorFromRGB(0x666666)\n#define bluemiddleColor UIColorFromRGB(0x00a0ec)\n#define grayCCCCC UIColorFromRGB(0xcccccc)\n\n#define LOADIMAGE(file) [[UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:file ofType:@\"png\"]] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]\n#define LOADIMAGECACHES(file) [UIImage imageNamed:file]\n#define PLACEHOLDER_IMAGE    LOADIMAGECACHES(@\"duoduo_gray\")\n\n#endif\n\n```","slug":"OC项目开发常用宏定义","published":1,"updated":"2021-05-14T02:01:17.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno3f0014kuo4z3n85c92","content":"<hr>\n<p>tags:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define WS(weakSelf)  __weak __typeof(self)weakSelf = self; //__typeof() 声明数据类型</span><br><span class=\"line\">#define DEF [NSUserDefaults standardUserDefaults]</span><br><span class=\"line\"></span><br><span class=\"line\">//屏幕适配 间距设置</span><br><span class=\"line\">#define HORIZ_5 AUTO_WIDTH(5)</span><br><span class=\"line\">#define HORIZ_10 AUTO_WIDTH(10)</span><br><span class=\"line\">#define VERTICAL_5  AUTO_HIGHT(5)</span><br><span class=\"line\">#define VERTICAL_10  AUTO_HIGHT(10)</span><br><span class=\"line\"></span><br><span class=\"line\">//指定某设计图尺寸确定高度或指按屏幕比例放缩</span><br><span class=\"line\">#define IMGHEIGHT_720(x) (x/720.0f*Main_Screen_Width)</span><br><span class=\"line\">//#deine IMGHEIGHT(x)(y) (y/x*AUTO_WIDTH(x))</span><br><span class=\"line\"></span><br><span class=\"line\">//设备尺寸</span><br><span class=\"line\">#define iphone4x_3_5 ([UIScreen mainScreen].bounds.size.height==480.0f)</span><br><span class=\"line\">#define iphone5x_4_0 ([UIScreen mainScreen].bounds.size.height==568.0f)</span><br><span class=\"line\">#define iphone6_4_7 ([UIScreen mainScreen].bounds.size.height==667.0f)</span><br><span class=\"line\">#define iphone6Plus_5_5 ([UIScreen mainScreen].bounds.size.height==736.0f || [UIScreen mainScreen].bounds.size.height==414.0f)</span><br><span class=\"line\">#define IMAGEINDEX Main_Screen_Width / 720.0f</span><br><span class=\"line\"></span><br><span class=\"line\">//应用框架尺寸</span><br><span class=\"line\">#define  NAVHEIGHT 64</span><br><span class=\"line\">#define TABBARHEIGHT 40</span><br><span class=\"line\"></span><br><span class=\"line\">//app 尺寸宏定义</span><br><span class=\"line\">#define Main_Screen_Height [[UIScreen mainScreen] bounds].size.height //主屏幕的高度</span><br><span class=\"line\">#define Main_Screen_Width  [[UIScreen mainScreen] bounds].size.width  //主屏幕的宽度</span><br><span class=\"line\">/*** KeyWindow Height Width */</span><br><span class=\"line\">#define KeyWindow_Height [[[UIApplication sharedApplication] keyWindow] frame].size.height //KeyWindow的高度</span><br><span class=\"line\">#define KeyWindow_Width  [[[[UIApplication sharedApplication] keyWindow] frame].size..width  //KeyWindow的宽度</span><br><span class=\"line\">#define AUTO_WIDTH(number)   (number) / 375.0 *  CGRectGetWidth([UIScreen mainScreen].bounds)</span><br><span class=\"line\">#define AUTO_HIGHT(number)   (number) / 667.0 *  CGRectGetHeight([UIScreen mainScreen].bounds)</span><br><span class=\"line\"></span><br><span class=\"line\">#define AUTO_WIDTH1080(number)   (number) / 540.0 *  CGRectGetWidth([UIScreen mainScreen].bounds)</span><br><span class=\"line\">#define AUTO_HIGHT1920(number)   (number) / 960.0 *  CGRectGetHeight([UIScreen mainScreen].bounds)</span><br><span class=\"line\">//当前版本</span><br><span class=\"line\">#define FSystenVersion            ([[[UIDevice currentDevice] systemVersion] floatValue])</span><br><span class=\"line\">#define AppVersion              ([[[NSBundle mainBundle] objectForInfoDictionaryKey:@&quot;CFBundleShortVersionString&quot;] floatValue])</span><br><span class=\"line\"></span><br><span class=\"line\">// 字符串去空格</span><br><span class=\"line\">#define strTrimming(x) [x stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]]</span><br></pre></td></tr></table></figure></p>\n<p>#颜色字号定义<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define COLORWITHRGB(r,g,b,a) [UIColor colorWithRed:r/255.0 green:g/255.0 blue:b/255.0 alpha:a]</span><br><span class=\"line\">//主题色</span><br><span class=\"line\">#define STATUS_BAR_COLOR [UIColor colorWithRed:255/255.0 green:56/255.0 blue:61/255.0 alpha:1]</span><br><span class=\"line\">//#define TINY_COCLOR [UIColor colorWithRed:244/255.0 green:120/255.0 blue:0/255.0 alpha:1]</span><br><span class=\"line\">#define TINY_COCLOR [UIColor colorWithRed:255/255.0 green:56/255.0 blue:61/255.0 alpha:1]</span><br><span class=\"line\">#define TINY_LIGHT_COLOR UIColorFromRGB(0xff9b9e)</span><br><span class=\"line\"></span><br><span class=\"line\">#define BACKGROUNDCOLOR [UIColor colorWithRed:243/255.0 green:243/255.0 blue:243/255.0 alpha:1]</span><br><span class=\"line\"></span><br><span class=\"line\">#define RGBCOLOR(r,g,b) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:1]</span><br><span class=\"line\">#define RGBACOLOR(r,g,b,a) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:(a)]</span><br><span class=\"line\">#define ARC_COLOR RGBCOLOR(arc4random()%255, arc4random()%255, arc4random()%255)</span><br><span class=\"line\">#define KdarkGayColor RGBCOLOR(50, 50, 50)//深灰</span><br><span class=\"line\">#define KlightGayColor  RGBCOLOR(220, 220,220)//浅灰</span><br><span class=\"line\">#define KtextGayColor UIColorFromRGB(0x616161)</span><br><span class=\"line\">#define darkf4 UIColorFromRGB(0xf4f4f4)</span><br><span class=\"line\">#define dark444 UIColorFromRGB(0x444444)</span><br><span class=\"line\">#define dark999 UIColorFromRGB(0x999999)</span><br><span class=\"line\">#define dark666 UIColorFromRGB(0x666666)</span><br><span class=\"line\">#define darkf3f UIColorFromRGB(0xf3f3f3)</span><br><span class=\"line\"></span><br><span class=\"line\">#define FONT(x) [UIFont systemFontOfSize:x]</span><br><span class=\"line\">#define FONT_B(x) [UIFont boldSystemFontOfSize:x]</span><br><span class=\"line\"></span><br><span class=\"line\">#define FONT_10   [UIFont systemFontOfSize:10]</span><br><span class=\"line\">#define FONT_10_B [UIFont boldSystemFontOfSize:10]</span><br><span class=\"line\"></span><br><span class=\"line\">#define FONT_12   [UIFont systemFontOfSize:12]</span><br><span class=\"line\">#define FONT_12_B [UIFont boldSystemFontOfSize:12]</span><br><span class=\"line\"></span><br><span class=\"line\">#define FONT_14   [UIFont systemFontOfSize:14]</span><br><span class=\"line\">#define FONT_14_B [UIFont boldSystemFontOfSize:14]</span><br><span class=\"line\"></span><br><span class=\"line\">#define FONT_16   [UIFont systemFontOfSize:16]</span><br><span class=\"line\">#define FONT_16_B [UIFont boldSystemFontOfSize:16]</span><br><span class=\"line\"></span><br><span class=\"line\">#define FONT_18   [UIFont systemFontOfSize:18]</span><br><span class=\"line\">#define FONT_18_B [UIFont boldSystemFontOfSize:18]</span><br><span class=\"line\">//适配字体</span><br><span class=\"line\">#define SizeScale ((KeyWindow_Height &gt; 568) ? KeyWindow_Height/568 : 1)</span><br><span class=\"line\">#define FONTNEW(x) [UIFont systemFontOfSize:x * SizeScale]</span><br><span class=\"line\">#define FONTNEW_B(x) [UIFont boldSystemFontOfSize:x *SizeScale]</span><br><span class=\"line\"></span><br><span class=\"line\">#define FONTNEW_10   FONTNEW(10)</span><br><span class=\"line\">#define FONTNEW_10_B FONTNEW_B(10)</span><br><span class=\"line\"></span><br><span class=\"line\">#define FONTNEW_12   FONTNEW(12)</span><br><span class=\"line\">#define FONTNEW_12_B FONTNEW_B(12)</span><br><span class=\"line\"></span><br><span class=\"line\">#define FONTNEW_14   FONTNEW(14)</span><br><span class=\"line\">#define FONTNEW_14_B FONTNEW_B(14)</span><br><span class=\"line\"></span><br><span class=\"line\">#define FONTNEW_16   FONTNEW(16)</span><br><span class=\"line\">#define FONTNEW_16_B FONTNEW_B(16)</span><br><span class=\"line\"></span><br><span class=\"line\">#define FONTNEW_18   FONTNEW(18)</span><br><span class=\"line\">#define FONTNEW_18_B FONTNEW_B(18)</span><br><span class=\"line\"></span><br><span class=\"line\">#define SizeScale1920 ((KeyWindow_Height &gt; 960) ? KeyWindow_Height/960 : 1)</span><br><span class=\"line\">#define FONTNEW1080(x) if(iphone6Plus_5_5)&#123;return [UIFont systemFontOfSize:x * 1.15 / 3];&#125;</span><br><span class=\"line\">#define FONTNEW_B1920(x) [UIFont boldSystemFontOfSize:x *SizeScale]</span><br><span class=\"line\"></span><br><span class=\"line\">//RGB颜色转换（16进制-&gt;10进制）</span><br><span class=\"line\">#define UIColorFromRGB(rgbValue)    [UIColor colorWithRed:((float)((rgbValue &amp; 0xFF0000) &gt;&gt; 16))/255.0 green:((float)((rgbValue &amp; 0xFF00) &gt;&gt; 8))/255.0 blue:((float)(rgbValue &amp; 0xFF))/255.0 alpha:1.0]</span><br><span class=\"line\"></span><br><span class=\"line\">#define lightgrayColor  UIColorFromRGB(0xe8e8e8)</span><br><span class=\"line\">#define mostlightgrayColor  UIColorFromRGB(0xf3f3f3)</span><br><span class=\"line\">#define slivergrayColor  UIColorFromRGB(0xc0c0c0)</span><br><span class=\"line\">#define darkgrayColor  UIColorFromRGB(0x444444)</span><br><span class=\"line\">#define mostdarkgrayColor  UIColorFromRGB(0x999999)</span><br><span class=\"line\">#define darkmiddleColor UIColorFromRGB(0x666666)</span><br><span class=\"line\">#define bluemiddleColor UIColorFromRGB(0x00a0ec)</span><br><span class=\"line\">#define grayCCCCC UIColorFromRGB(0xcccccc)</span><br><span class=\"line\"></span><br><span class=\"line\">#define LOADIMAGE(file) [[UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:file ofType:@&quot;png&quot;]] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]</span><br><span class=\"line\">#define LOADIMAGECACHES(file) [UIImage imageNamed:file]</span><br><span class=\"line\">#define PLACEHOLDER_IMAGE    LOADIMAGECACHES(@&quot;duoduo_gray&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>tags:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define WS(weakSelf)  __weak __typeof(self)weakSelf = self; //__typeof() 声明数据类型</span><br><span class=\"line\">#define DEF [NSUserDefaults standardUserDefaults]</span><br><span class=\"line\"></span><br><span class=\"line\">//屏幕适配 间距设置</span><br><span class=\"line\">#define HORIZ_5 AUTO_WIDTH(5)</span><br><span class=\"line\">#define HORIZ_10 AUTO_WIDTH(10)</span><br><span class=\"line\">#define VERTICAL_5  AUTO_HIGHT(5)</span><br><span class=\"line\">#define VERTICAL_10  AUTO_HIGHT(10)</span><br><span class=\"line\"></span><br><span class=\"line\">//指定某设计图尺寸确定高度或指按屏幕比例放缩</span><br><span class=\"line\">#define IMGHEIGHT_720(x) (x/720.0f*Main_Screen_Width)</span><br><span class=\"line\">//#deine IMGHEIGHT(x)(y) (y/x*AUTO_WIDTH(x))</span><br><span class=\"line\"></span><br><span class=\"line\">//设备尺寸</span><br><span class=\"line\">#define iphone4x_3_5 ([UIScreen mainScreen].bounds.size.height==480.0f)</span><br><span class=\"line\">#define iphone5x_4_0 ([UIScreen mainScreen].bounds.size.height==568.0f)</span><br><span class=\"line\">#define iphone6_4_7 ([UIScreen mainScreen].bounds.size.height==667.0f)</span><br><span class=\"line\">#define iphone6Plus_5_5 ([UIScreen mainScreen].bounds.size.height==736.0f || [UIScreen mainScreen].bounds.size.height==414.0f)</span><br><span class=\"line\">#define IMAGEINDEX Main_Screen_Width / 720.0f</span><br><span class=\"line\"></span><br><span class=\"line\">//应用框架尺寸</span><br><span class=\"line\">#define  NAVHEIGHT 64</span><br><span class=\"line\">#define TABBARHEIGHT 40</span><br><span class=\"line\"></span><br><span class=\"line\">//app 尺寸宏定义</span><br><span class=\"line\">#define Main_Screen_Height [[UIScreen mainScreen] bounds].size.height //主屏幕的高度</span><br><span class=\"line\">#define Main_Screen_Width  [[UIScreen mainScreen] bounds].size.width  //主屏幕的宽度</span><br><span class=\"line\">/*** KeyWindow Height Width */</span><br><span class=\"line\">#define KeyWindow_Height [[[UIApplication sharedApplication] keyWindow] frame].size.height //KeyWindow的高度</span><br><span class=\"line\">#define KeyWindow_Width  [[[[UIApplication sharedApplication] keyWindow] frame].size..width  //KeyWindow的宽度</span><br><span class=\"line\">#define AUTO_WIDTH(number)   (number) / 375.0 *  CGRectGetWidth([UIScreen mainScreen].bounds)</span><br><span class=\"line\">#define AUTO_HIGHT(number)   (number) / 667.0 *  CGRectGetHeight([UIScreen mainScreen].bounds)</span><br><span class=\"line\"></span><br><span class=\"line\">#define AUTO_WIDTH1080(number)   (number) / 540.0 *  CGRectGetWidth([UIScreen mainScreen].bounds)</span><br><span class=\"line\">#define AUTO_HIGHT1920(number)   (number) / 960.0 *  CGRectGetHeight([UIScreen mainScreen].bounds)</span><br><span class=\"line\">//当前版本</span><br><span class=\"line\">#define FSystenVersion            ([[[UIDevice currentDevice] systemVersion] floatValue])</span><br><span class=\"line\">#define AppVersion              ([[[NSBundle mainBundle] objectForInfoDictionaryKey:@&quot;CFBundleShortVersionString&quot;] floatValue])</span><br><span class=\"line\"></span><br><span class=\"line\">// 字符串去空格</span><br><span class=\"line\">#define strTrimming(x) [x stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]]</span><br></pre></td></tr></table></figure></p>\n<p>#颜色字号定义<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define COLORWITHRGB(r,g,b,a) [UIColor colorWithRed:r/255.0 green:g/255.0 blue:b/255.0 alpha:a]</span><br><span class=\"line\">//主题色</span><br><span class=\"line\">#define STATUS_BAR_COLOR [UIColor colorWithRed:255/255.0 green:56/255.0 blue:61/255.0 alpha:1]</span><br><span class=\"line\">//#define TINY_COCLOR [UIColor colorWithRed:244/255.0 green:120/255.0 blue:0/255.0 alpha:1]</span><br><span class=\"line\">#define TINY_COCLOR [UIColor colorWithRed:255/255.0 green:56/255.0 blue:61/255.0 alpha:1]</span><br><span class=\"line\">#define TINY_LIGHT_COLOR UIColorFromRGB(0xff9b9e)</span><br><span class=\"line\"></span><br><span class=\"line\">#define BACKGROUNDCOLOR [UIColor colorWithRed:243/255.0 green:243/255.0 blue:243/255.0 alpha:1]</span><br><span class=\"line\"></span><br><span class=\"line\">#define RGBCOLOR(r,g,b) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:1]</span><br><span class=\"line\">#define RGBACOLOR(r,g,b,a) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:(a)]</span><br><span class=\"line\">#define ARC_COLOR RGBCOLOR(arc4random()%255, arc4random()%255, arc4random()%255)</span><br><span class=\"line\">#define KdarkGayColor RGBCOLOR(50, 50, 50)//深灰</span><br><span class=\"line\">#define KlightGayColor  RGBCOLOR(220, 220,220)//浅灰</span><br><span class=\"line\">#define KtextGayColor UIColorFromRGB(0x616161)</span><br><span class=\"line\">#define darkf4 UIColorFromRGB(0xf4f4f4)</span><br><span class=\"line\">#define dark444 UIColorFromRGB(0x444444)</span><br><span class=\"line\">#define dark999 UIColorFromRGB(0x999999)</span><br><span class=\"line\">#define dark666 UIColorFromRGB(0x666666)</span><br><span class=\"line\">#define darkf3f UIColorFromRGB(0xf3f3f3)</span><br><span class=\"line\"></span><br><span class=\"line\">#define FONT(x) [UIFont systemFontOfSize:x]</span><br><span class=\"line\">#define FONT_B(x) [UIFont boldSystemFontOfSize:x]</span><br><span class=\"line\"></span><br><span class=\"line\">#define FONT_10   [UIFont systemFontOfSize:10]</span><br><span class=\"line\">#define FONT_10_B [UIFont boldSystemFontOfSize:10]</span><br><span class=\"line\"></span><br><span class=\"line\">#define FONT_12   [UIFont systemFontOfSize:12]</span><br><span class=\"line\">#define FONT_12_B [UIFont boldSystemFontOfSize:12]</span><br><span class=\"line\"></span><br><span class=\"line\">#define FONT_14   [UIFont systemFontOfSize:14]</span><br><span class=\"line\">#define FONT_14_B [UIFont boldSystemFontOfSize:14]</span><br><span class=\"line\"></span><br><span class=\"line\">#define FONT_16   [UIFont systemFontOfSize:16]</span><br><span class=\"line\">#define FONT_16_B [UIFont boldSystemFontOfSize:16]</span><br><span class=\"line\"></span><br><span class=\"line\">#define FONT_18   [UIFont systemFontOfSize:18]</span><br><span class=\"line\">#define FONT_18_B [UIFont boldSystemFontOfSize:18]</span><br><span class=\"line\">//适配字体</span><br><span class=\"line\">#define SizeScale ((KeyWindow_Height &gt; 568) ? KeyWindow_Height/568 : 1)</span><br><span class=\"line\">#define FONTNEW(x) [UIFont systemFontOfSize:x * SizeScale]</span><br><span class=\"line\">#define FONTNEW_B(x) [UIFont boldSystemFontOfSize:x *SizeScale]</span><br><span class=\"line\"></span><br><span class=\"line\">#define FONTNEW_10   FONTNEW(10)</span><br><span class=\"line\">#define FONTNEW_10_B FONTNEW_B(10)</span><br><span class=\"line\"></span><br><span class=\"line\">#define FONTNEW_12   FONTNEW(12)</span><br><span class=\"line\">#define FONTNEW_12_B FONTNEW_B(12)</span><br><span class=\"line\"></span><br><span class=\"line\">#define FONTNEW_14   FONTNEW(14)</span><br><span class=\"line\">#define FONTNEW_14_B FONTNEW_B(14)</span><br><span class=\"line\"></span><br><span class=\"line\">#define FONTNEW_16   FONTNEW(16)</span><br><span class=\"line\">#define FONTNEW_16_B FONTNEW_B(16)</span><br><span class=\"line\"></span><br><span class=\"line\">#define FONTNEW_18   FONTNEW(18)</span><br><span class=\"line\">#define FONTNEW_18_B FONTNEW_B(18)</span><br><span class=\"line\"></span><br><span class=\"line\">#define SizeScale1920 ((KeyWindow_Height &gt; 960) ? KeyWindow_Height/960 : 1)</span><br><span class=\"line\">#define FONTNEW1080(x) if(iphone6Plus_5_5)&#123;return [UIFont systemFontOfSize:x * 1.15 / 3];&#125;</span><br><span class=\"line\">#define FONTNEW_B1920(x) [UIFont boldSystemFontOfSize:x *SizeScale]</span><br><span class=\"line\"></span><br><span class=\"line\">//RGB颜色转换（16进制-&gt;10进制）</span><br><span class=\"line\">#define UIColorFromRGB(rgbValue)    [UIColor colorWithRed:((float)((rgbValue &amp; 0xFF0000) &gt;&gt; 16))/255.0 green:((float)((rgbValue &amp; 0xFF00) &gt;&gt; 8))/255.0 blue:((float)(rgbValue &amp; 0xFF))/255.0 alpha:1.0]</span><br><span class=\"line\"></span><br><span class=\"line\">#define lightgrayColor  UIColorFromRGB(0xe8e8e8)</span><br><span class=\"line\">#define mostlightgrayColor  UIColorFromRGB(0xf3f3f3)</span><br><span class=\"line\">#define slivergrayColor  UIColorFromRGB(0xc0c0c0)</span><br><span class=\"line\">#define darkgrayColor  UIColorFromRGB(0x444444)</span><br><span class=\"line\">#define mostdarkgrayColor  UIColorFromRGB(0x999999)</span><br><span class=\"line\">#define darkmiddleColor UIColorFromRGB(0x666666)</span><br><span class=\"line\">#define bluemiddleColor UIColorFromRGB(0x00a0ec)</span><br><span class=\"line\">#define grayCCCCC UIColorFromRGB(0xcccccc)</span><br><span class=\"line\"></span><br><span class=\"line\">#define LOADIMAGE(file) [[UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:file ofType:@&quot;png&quot;]] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]</span><br><span class=\"line\">#define LOADIMAGECACHES(file) [UIImage imageNamed:file]</span><br><span class=\"line\">#define PLACEHOLDER_IMAGE    LOADIMAGECACHES(@&quot;duoduo_gray&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure></p>\n"},{"title":"git操作","date":"2019-03-06T17:29:56.000Z","_content":"\n#思维导图\n{% asset_img Git操作使用.png %}\n\n#重要性说明\nGit作为目前项目版本管理的工具，其先进性和便捷性不言而喻，所以一定要深入掌握才行，这样对以后的管理非常方便。主要实现的功能\n* 个人或团队开发项目管理\n* 项目版本恢复或指定版本打包\n* 最近才经历过的用cocopod打包自己的插件作为私有库要用到tag标记版本号\n* 目前Jenkins通过git源代码提取来进行打包\n* iOS个人开发的各种第三方库的引入\n\n#重要性补充说明\n* 使用码云进行私有库管理，可以创建组织和公司\n* 复制Github上优秀的项目\n* 公司GitLab项目维护管理\n\n#Git的通用操作\n##Git工具命令安装下载\n\n    brew install git //Mac安装    \n    yum install git-core//CentOS\n    apt-get install git//Ubuntu\n##Git克隆Git库的办法是\n\n    git clone <#库地址>     \n    库地址包括有HTTPS的和SSH的\n    ssh://diaoyu@120.40.160.80:2222/home/Product/fishing.git\n    https://github.com/cooler112/Cooler\n\n##自建Git库\n\n    git init  <仓库名称,以.git结尾规范>\n    git init -bare <仓库名称> //创建裸仓库，没有工作区间，防止有人登录服务器去改文件\n\n##忽略提交的部分文件\n\n    ##以JAVA项目为例\n    target/\n    !.mvn/wrapper/maven-wrapper.jar\n    ### STS ###\n    .apt_generated\n    .classpath\n    .factorypath\n    .project\n    .settings\n    .springBeans\n    .sts4-cache\n    ### IntelliJ IDEA ###\n    .idea\n    *.iws\n    *.iml\n    *.ipr\n    ### NetBeans ###\n    nbproject/private/\n    build/\n    nbbuild/\n    dist/\n    nbdist/\n    .nb-gradle/\n***以下为忽略规则***\n\n    # 此为注释 – 将被 Git 忽略\n    # 忽略所有 .a 结尾的文件\n    *.a\n    # 但 lib.a 除外\n    !lib.a\n    # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO\n    /TODO\n    # 忽略 build/ 目录下的所有文件\n    build/\n    # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt\n    doc/*.txt\n    # 忽略 doc/ 目录下所有扩展名为 txt 的文件\n    doc/**/*.txt\n\n\n\n##从拷贝到提交单人简单操作\n\n    git add *  git add *  添加到缓存区\n    git commit -m “”  提交\n    git remote add origin <仓库名称>\n    git push --set-upstream origin master  //直接提交到远程仓库并关联\n    git push -u origin master //用于第一次提交使用，与远程进行关联\n\n##撤消功能的使用：reset,checkout,--amend\n\n    ##已经commit 添加备注后发现还需要更改，更改完成后调用可以修改备注内容，push时只算作一次\n    git commit —amend\n    ##将Add的文件从暂存区撤回到工作区\n    git reset filename\n    ##将工作区的文件恢复到初始状态\n    git checkout filename\n    ##回恢到某次提交\n    git reset --hard ******//操作之前先处理好未提交文件\n    git fsck --lost-found //在.git/lost-found找到只添加未提交的文件集\n    git reflog//查看提交记录\n\n##远端仓库的操作git remote\n    git remote //列出所有\n    git remote show <分支名>//查看状态\n    git remote add <分支名称>  <分支地址>\n    git remove rename //改名，本地也会一一对应\n    git remote rm <分支名>  //某个分支不再维护或不再贡献\n    git pull   <分支名,默认master>//自动合并远端与目前的对应分支\n\n  ##标签操作\n标签是在commit 过后才进行的操作，在提交的时候需要指定分支和标签号才后有作用，标签相当于某一提交操作的快照\n\n    git tag //简单标签\n    git show tag\t//显示tag内容\n    git push origin --tags //提交所有本地标签\n    git tag -a \"0.0.1\" -m \"<标签内容>\" commitID\n    git tag -a 0.0.1 <打标签到某次提交编号>\n    git push origin 0.0.1  //标签生效\n    \n    ##删除远程标签\n    先在本地进行删除\n    \n    git tag -d v1.0\n    git push origin :refs/tags/v1.0  //标签生效\n\n\n​    \n\n ##分支操作\n分支主要用于开发新版本而保证正式版本不受干扰或者Bug修复，主要操作是合并,在分支合并前清空暂存区\n\n    git branch //-a查看所有，-d删除，-v 查看详情 --merged 查看合并分支 --unmerged查看未合并\n    git branch <新分支名>\n    git checkout <分支名>切换分支\n    git checkout -b <新分支名>//分支并切换\n    git merge <分支名>//进行合并 \n    git branch -d //删除分支\n    git checkout -b awesomeBranch origin/awesomebranch   //将远程分支拷贝到本地新建分支\n    git checkout --track origin/awesomebranch //同上\n   git push origin :awesomebranch//删除远程分支，比如已经合并到master   \n\n   ","source":"_posts/git操作.md","raw":"---\ntitle: git操作\ndate: 2019-03-06 17:29:56\ntags: git\ncategories: 编程工具\n---\n\n#思维导图\n{% asset_img Git操作使用.png %}\n\n#重要性说明\nGit作为目前项目版本管理的工具，其先进性和便捷性不言而喻，所以一定要深入掌握才行，这样对以后的管理非常方便。主要实现的功能\n* 个人或团队开发项目管理\n* 项目版本恢复或指定版本打包\n* 最近才经历过的用cocopod打包自己的插件作为私有库要用到tag标记版本号\n* 目前Jenkins通过git源代码提取来进行打包\n* iOS个人开发的各种第三方库的引入\n\n#重要性补充说明\n* 使用码云进行私有库管理，可以创建组织和公司\n* 复制Github上优秀的项目\n* 公司GitLab项目维护管理\n\n#Git的通用操作\n##Git工具命令安装下载\n\n    brew install git //Mac安装    \n    yum install git-core//CentOS\n    apt-get install git//Ubuntu\n##Git克隆Git库的办法是\n\n    git clone <#库地址>     \n    库地址包括有HTTPS的和SSH的\n    ssh://diaoyu@120.40.160.80:2222/home/Product/fishing.git\n    https://github.com/cooler112/Cooler\n\n##自建Git库\n\n    git init  <仓库名称,以.git结尾规范>\n    git init -bare <仓库名称> //创建裸仓库，没有工作区间，防止有人登录服务器去改文件\n\n##忽略提交的部分文件\n\n    ##以JAVA项目为例\n    target/\n    !.mvn/wrapper/maven-wrapper.jar\n    ### STS ###\n    .apt_generated\n    .classpath\n    .factorypath\n    .project\n    .settings\n    .springBeans\n    .sts4-cache\n    ### IntelliJ IDEA ###\n    .idea\n    *.iws\n    *.iml\n    *.ipr\n    ### NetBeans ###\n    nbproject/private/\n    build/\n    nbbuild/\n    dist/\n    nbdist/\n    .nb-gradle/\n***以下为忽略规则***\n\n    # 此为注释 – 将被 Git 忽略\n    # 忽略所有 .a 结尾的文件\n    *.a\n    # 但 lib.a 除外\n    !lib.a\n    # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO\n    /TODO\n    # 忽略 build/ 目录下的所有文件\n    build/\n    # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt\n    doc/*.txt\n    # 忽略 doc/ 目录下所有扩展名为 txt 的文件\n    doc/**/*.txt\n\n\n\n##从拷贝到提交单人简单操作\n\n    git add *  git add *  添加到缓存区\n    git commit -m “”  提交\n    git remote add origin <仓库名称>\n    git push --set-upstream origin master  //直接提交到远程仓库并关联\n    git push -u origin master //用于第一次提交使用，与远程进行关联\n\n##撤消功能的使用：reset,checkout,--amend\n\n    ##已经commit 添加备注后发现还需要更改，更改完成后调用可以修改备注内容，push时只算作一次\n    git commit —amend\n    ##将Add的文件从暂存区撤回到工作区\n    git reset filename\n    ##将工作区的文件恢复到初始状态\n    git checkout filename\n    ##回恢到某次提交\n    git reset --hard ******//操作之前先处理好未提交文件\n    git fsck --lost-found //在.git/lost-found找到只添加未提交的文件集\n    git reflog//查看提交记录\n\n##远端仓库的操作git remote\n    git remote //列出所有\n    git remote show <分支名>//查看状态\n    git remote add <分支名称>  <分支地址>\n    git remove rename //改名，本地也会一一对应\n    git remote rm <分支名>  //某个分支不再维护或不再贡献\n    git pull   <分支名,默认master>//自动合并远端与目前的对应分支\n\n  ##标签操作\n标签是在commit 过后才进行的操作，在提交的时候需要指定分支和标签号才后有作用，标签相当于某一提交操作的快照\n\n    git tag //简单标签\n    git show tag\t//显示tag内容\n    git push origin --tags //提交所有本地标签\n    git tag -a \"0.0.1\" -m \"<标签内容>\" commitID\n    git tag -a 0.0.1 <打标签到某次提交编号>\n    git push origin 0.0.1  //标签生效\n    \n    ##删除远程标签\n    先在本地进行删除\n    \n    git tag -d v1.0\n    git push origin :refs/tags/v1.0  //标签生效\n\n\n​    \n\n ##分支操作\n分支主要用于开发新版本而保证正式版本不受干扰或者Bug修复，主要操作是合并,在分支合并前清空暂存区\n\n    git branch //-a查看所有，-d删除，-v 查看详情 --merged 查看合并分支 --unmerged查看未合并\n    git branch <新分支名>\n    git checkout <分支名>切换分支\n    git checkout -b <新分支名>//分支并切换\n    git merge <分支名>//进行合并 \n    git branch -d //删除分支\n    git checkout -b awesomeBranch origin/awesomebranch   //将远程分支拷贝到本地新建分支\n    git checkout --track origin/awesomebranch //同上\n   git push origin :awesomebranch//删除远程分支，比如已经合并到master   \n\n   ","slug":"git操作","published":1,"updated":"2021-05-14T02:01:17.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno3h0018kuo4f9g1xgcx","content":"<p>#思维导图<br><img src=\"/2019/03/06/git操作/Git操作使用.png\"></p>\n<p>#重要性说明<br>Git作为目前项目版本管理的工具，其先进性和便捷性不言而喻，所以一定要深入掌握才行，这样对以后的管理非常方便。主要实现的功能</p>\n<ul>\n<li>个人或团队开发项目管理</li>\n<li>项目版本恢复或指定版本打包</li>\n<li>最近才经历过的用cocopod打包自己的插件作为私有库要用到tag标记版本号</li>\n<li>目前Jenkins通过git源代码提取来进行打包</li>\n<li>iOS个人开发的各种第三方库的引入</li>\n</ul>\n<p>#重要性补充说明</p>\n<ul>\n<li>使用码云进行私有库管理，可以创建组织和公司</li>\n<li>复制Github上优秀的项目</li>\n<li>公司GitLab项目维护管理</li>\n</ul>\n<p>#Git的通用操作</p>\n<p>##Git工具命令安装下载</p>\n<pre><code>brew install git //Mac安装    \nyum install git-core//CentOS\napt-get install git//Ubuntu\n</code></pre><p>##Git克隆Git库的办法是</p>\n<pre><code>git clone &lt;#库地址&gt;     \n库地址包括有HTTPS的和SSH的\nssh://diaoyu@120.40.160.80:2222/home/Product/fishing.git\nhttps://github.com/cooler112/Cooler\n</code></pre><p>##自建Git库</p>\n<pre><code>git init  &lt;仓库名称,以.git结尾规范&gt;\ngit init -bare &lt;仓库名称&gt; //创建裸仓库，没有工作区间，防止有人登录服务器去改文件\n</code></pre><p>##忽略提交的部分文件</p>\n<pre><code>##以JAVA项目为例\ntarget/\n!.mvn/wrapper/maven-wrapper.jar\n### STS ###\n.apt_generated\n.classpath\n.factorypath\n.project\n.settings\n.springBeans\n.sts4-cache\n### IntelliJ IDEA ###\n.idea\n*.iws\n*.iml\n*.ipr\n### NetBeans ###\nnbproject/private/\nbuild/\nnbbuild/\ndist/\nnbdist/\n.nb-gradle/\n</code></pre><p><strong><em>以下为忽略规则</em></strong></p>\n<pre><code># 此为注释 – 将被 Git 忽略\n# 忽略所有 .a 结尾的文件\n*.a\n# 但 lib.a 除外\n!lib.a\n# 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO\n/TODO\n# 忽略 build/ 目录下的所有文件\nbuild/\n# 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt\ndoc/*.txt\n# 忽略 doc/ 目录下所有扩展名为 txt 的文件\ndoc/**/*.txt\n</code></pre><p>##从拷贝到提交单人简单操作</p>\n<pre><code>git add *  git add *  添加到缓存区\ngit commit -m “”  提交\ngit remote add origin &lt;仓库名称&gt;\ngit push --set-upstream origin master  //直接提交到远程仓库并关联\ngit push -u origin master //用于第一次提交使用，与远程进行关联\n</code></pre><p>##撤消功能的使用：reset,checkout,–amend</p>\n<pre><code>##已经commit 添加备注后发现还需要更改，更改完成后调用可以修改备注内容，push时只算作一次\ngit commit —amend\n##将Add的文件从暂存区撤回到工作区\ngit reset filename\n##将工作区的文件恢复到初始状态\ngit checkout filename\n##回恢到某次提交\ngit reset --hard ******//操作之前先处理好未提交文件\ngit fsck --lost-found //在.git/lost-found找到只添加未提交的文件集\ngit reflog//查看提交记录\n</code></pre><p>##远端仓库的操作git remote<br>    git remote //列出所有<br>    git remote show &lt;分支名&gt;//查看状态<br>    git remote add &lt;分支名称&gt;  &lt;分支地址&gt;<br>    git remove rename //改名，本地也会一一对应<br>    git remote rm &lt;分支名&gt;  //某个分支不再维护或不再贡献<br>    git pull   &lt;分支名,默认master&gt;//自动合并远端与目前的对应分支</p>\n<p>  ##标签操作<br>标签是在commit 过后才进行的操作，在提交的时候需要指定分支和标签号才后有作用，标签相当于某一提交操作的快照</p>\n<pre><code>git tag //简单标签\ngit show tag    //显示tag内容\ngit push origin --tags //提交所有本地标签\ngit tag -a &quot;0.0.1&quot; -m &quot;&lt;标签内容&gt;&quot; commitID\ngit tag -a 0.0.1 &lt;打标签到某次提交编号&gt;\ngit push origin 0.0.1  //标签生效\n\n##删除远程标签\n先在本地进行删除\n\ngit tag -d v1.0\ngit push origin :refs/tags/v1.0  //标签生效\n</code></pre><p>​    </p>\n<p> ##分支操作<br>分支主要用于开发新版本而保证正式版本不受干扰或者Bug修复，主要操作是合并,在分支合并前清空暂存区</p>\n<pre><code>git branch //-a查看所有，-d删除，-v 查看详情 --merged 查看合并分支 --unmerged查看未合并\ngit branch &lt;新分支名&gt;\ngit checkout &lt;分支名&gt;切换分支\ngit checkout -b &lt;新分支名&gt;//分支并切换\ngit merge &lt;分支名&gt;//进行合并 \ngit branch -d //删除分支\ngit checkout -b awesomeBranch origin/awesomebranch   //将远程分支拷贝到本地新建分支\ngit checkout --track origin/awesomebranch //同上\n</code></pre><p>   git push origin :awesomebranch//删除远程分支，比如已经合并到master   </p>\n","site":{"data":{}},"excerpt":"","more":"<p>#思维导图<br><img src=\"/2019/03/06/git操作/Git操作使用.png\"></p>\n<p>#重要性说明<br>Git作为目前项目版本管理的工具，其先进性和便捷性不言而喻，所以一定要深入掌握才行，这样对以后的管理非常方便。主要实现的功能</p>\n<ul>\n<li>个人或团队开发项目管理</li>\n<li>项目版本恢复或指定版本打包</li>\n<li>最近才经历过的用cocopod打包自己的插件作为私有库要用到tag标记版本号</li>\n<li>目前Jenkins通过git源代码提取来进行打包</li>\n<li>iOS个人开发的各种第三方库的引入</li>\n</ul>\n<p>#重要性补充说明</p>\n<ul>\n<li>使用码云进行私有库管理，可以创建组织和公司</li>\n<li>复制Github上优秀的项目</li>\n<li>公司GitLab项目维护管理</li>\n</ul>\n<p>#Git的通用操作</p>\n<p>##Git工具命令安装下载</p>\n<pre><code>brew install git //Mac安装    \nyum install git-core//CentOS\napt-get install git//Ubuntu\n</code></pre><p>##Git克隆Git库的办法是</p>\n<pre><code>git clone &lt;#库地址&gt;     \n库地址包括有HTTPS的和SSH的\nssh://diaoyu@120.40.160.80:2222/home/Product/fishing.git\nhttps://github.com/cooler112/Cooler\n</code></pre><p>##自建Git库</p>\n<pre><code>git init  &lt;仓库名称,以.git结尾规范&gt;\ngit init -bare &lt;仓库名称&gt; //创建裸仓库，没有工作区间，防止有人登录服务器去改文件\n</code></pre><p>##忽略提交的部分文件</p>\n<pre><code>##以JAVA项目为例\ntarget/\n!.mvn/wrapper/maven-wrapper.jar\n### STS ###\n.apt_generated\n.classpath\n.factorypath\n.project\n.settings\n.springBeans\n.sts4-cache\n### IntelliJ IDEA ###\n.idea\n*.iws\n*.iml\n*.ipr\n### NetBeans ###\nnbproject/private/\nbuild/\nnbbuild/\ndist/\nnbdist/\n.nb-gradle/\n</code></pre><p><strong><em>以下为忽略规则</em></strong></p>\n<pre><code># 此为注释 – 将被 Git 忽略\n# 忽略所有 .a 结尾的文件\n*.a\n# 但 lib.a 除外\n!lib.a\n# 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO\n/TODO\n# 忽略 build/ 目录下的所有文件\nbuild/\n# 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt\ndoc/*.txt\n# 忽略 doc/ 目录下所有扩展名为 txt 的文件\ndoc/**/*.txt\n</code></pre><p>##从拷贝到提交单人简单操作</p>\n<pre><code>git add *  git add *  添加到缓存区\ngit commit -m “”  提交\ngit remote add origin &lt;仓库名称&gt;\ngit push --set-upstream origin master  //直接提交到远程仓库并关联\ngit push -u origin master //用于第一次提交使用，与远程进行关联\n</code></pre><p>##撤消功能的使用：reset,checkout,–amend</p>\n<pre><code>##已经commit 添加备注后发现还需要更改，更改完成后调用可以修改备注内容，push时只算作一次\ngit commit —amend\n##将Add的文件从暂存区撤回到工作区\ngit reset filename\n##将工作区的文件恢复到初始状态\ngit checkout filename\n##回恢到某次提交\ngit reset --hard ******//操作之前先处理好未提交文件\ngit fsck --lost-found //在.git/lost-found找到只添加未提交的文件集\ngit reflog//查看提交记录\n</code></pre><p>##远端仓库的操作git remote<br>    git remote //列出所有<br>    git remote show &lt;分支名&gt;//查看状态<br>    git remote add &lt;分支名称&gt;  &lt;分支地址&gt;<br>    git remove rename //改名，本地也会一一对应<br>    git remote rm &lt;分支名&gt;  //某个分支不再维护或不再贡献<br>    git pull   &lt;分支名,默认master&gt;//自动合并远端与目前的对应分支</p>\n<p>  ##标签操作<br>标签是在commit 过后才进行的操作，在提交的时候需要指定分支和标签号才后有作用，标签相当于某一提交操作的快照</p>\n<pre><code>git tag //简单标签\ngit show tag    //显示tag内容\ngit push origin --tags //提交所有本地标签\ngit tag -a &quot;0.0.1&quot; -m &quot;&lt;标签内容&gt;&quot; commitID\ngit tag -a 0.0.1 &lt;打标签到某次提交编号&gt;\ngit push origin 0.0.1  //标签生效\n\n##删除远程标签\n先在本地进行删除\n\ngit tag -d v1.0\ngit push origin :refs/tags/v1.0  //标签生效\n</code></pre><p>​    </p>\n<p> ##分支操作<br>分支主要用于开发新版本而保证正式版本不受干扰或者Bug修复，主要操作是合并,在分支合并前清空暂存区</p>\n<pre><code>git branch //-a查看所有，-d删除，-v 查看详情 --merged 查看合并分支 --unmerged查看未合并\ngit branch &lt;新分支名&gt;\ngit checkout &lt;分支名&gt;切换分支\ngit checkout -b &lt;新分支名&gt;//分支并切换\ngit merge &lt;分支名&gt;//进行合并 \ngit branch -d //删除分支\ngit checkout -b awesomeBranch origin/awesomebranch   //将远程分支拷贝到本地新建分支\ngit checkout --track origin/awesomebranch //同上\n</code></pre><p>   git push origin :awesomebranch//删除远程分支，比如已经合并到master   </p>\n"},{"title":"Swift起步","date":"2019-03-06T17:46:24.000Z","_content":"\n由于公司需要，所以拖得不得再拖的Swift学习终于提上日程，教就是最好的学，先摘要，后总结完善，在实战过程中学习进步。\n\nSwift，苹果于2014年[WWDC](https://baike.baidu.com/item/WWDC)（苹果开发者大会）发布的新开发语言，可与[Objective-C](https://baike.baidu.com/item/Objective-C)*共同运行于[Mac OS](https://baike.baidu.com/item/Mac%20OS)和[iOS](https://baike.baidu.com/item/iOS/45705)平台，用于搭建基于苹果平台的应用程序。\n\n\n###Swift核心：\n安全：明确的类型定义和语法规范有效避免出现未知错误，空指针引用\n高效：是替代C、C++、OC的理想化工具，良好一致的性能优异表现\n良好阅读性：基于数十年的科学语法研究，持续优化语法提供更好的可读可写生\n\n###Swift特点\nClosures unified with function pointers\nTuples and multiple return values\nGenerics\nFast and concise iteration over a range or collection\nStructs that support methods, extensions, and protocols\nFunctional programming patterns, e.g., map and filter\nPowerful error handling built-in\nAdvanced control flow with do, guard, defer, and repeat keywords\n闭包的统一与函数指针\n元组和多个返回值\n泛型\n快速而简洁的迭代范围或集合\n支持的方法，扩展的协议结构。\n函数式编程模式，例如：映射（map）和过滤器（filter）\n强大的异常处理\n先进的控制流关键字\n\n###与之前语法的区别\n不同于OC，Swift支持多元返回值 \n类型安全\n类型安全语言有严格的语法要求\n\n\n\u001e","source":"_posts/Swift起步.md","raw":"---\ntitle: Swift起步\ndate: 2019-03-06 17:46:24\ntags: swift\ncategories: 苹果开发\n---\n\n由于公司需要，所以拖得不得再拖的Swift学习终于提上日程，教就是最好的学，先摘要，后总结完善，在实战过程中学习进步。\n\nSwift，苹果于2014年[WWDC](https://baike.baidu.com/item/WWDC)（苹果开发者大会）发布的新开发语言，可与[Objective-C](https://baike.baidu.com/item/Objective-C)*共同运行于[Mac OS](https://baike.baidu.com/item/Mac%20OS)和[iOS](https://baike.baidu.com/item/iOS/45705)平台，用于搭建基于苹果平台的应用程序。\n\n\n###Swift核心：\n安全：明确的类型定义和语法规范有效避免出现未知错误，空指针引用\n高效：是替代C、C++、OC的理想化工具，良好一致的性能优异表现\n良好阅读性：基于数十年的科学语法研究，持续优化语法提供更好的可读可写生\n\n###Swift特点\nClosures unified with function pointers\nTuples and multiple return values\nGenerics\nFast and concise iteration over a range or collection\nStructs that support methods, extensions, and protocols\nFunctional programming patterns, e.g., map and filter\nPowerful error handling built-in\nAdvanced control flow with do, guard, defer, and repeat keywords\n闭包的统一与函数指针\n元组和多个返回值\n泛型\n快速而简洁的迭代范围或集合\n支持的方法，扩展的协议结构。\n函数式编程模式，例如：映射（map）和过滤器（filter）\n强大的异常处理\n先进的控制流关键字\n\n###与之前语法的区别\n不同于OC，Swift支持多元返回值 \n类型安全\n类型安全语言有严格的语法要求\n\n\n\u001e","slug":"Swift起步","published":1,"updated":"2021-05-14T02:01:17.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno3i0019kuo4qkmd2q68","content":"<p>由于公司需要，所以拖得不得再拖的Swift学习终于提上日程，教就是最好的学，先摘要，后总结完善，在实战过程中学习进步。</p>\n<p>Swift，苹果于2014年<a href=\"https://baike.baidu.com/item/WWDC\" target=\"_blank\" rel=\"noopener\">WWDC</a>（苹果开发者大会）发布的新开发语言，可与<a href=\"https://baike.baidu.com/item/Objective-C\" target=\"_blank\" rel=\"noopener\">Objective-C</a>*共同运行于<a href=\"https://baike.baidu.com/item/Mac%20OS\" target=\"_blank\" rel=\"noopener\">Mac OS</a>和<a href=\"https://baike.baidu.com/item/iOS/45705\" target=\"_blank\" rel=\"noopener\">iOS</a>平台，用于搭建基于苹果平台的应用程序。</p>\n<p>###Swift核心：<br>安全：明确的类型定义和语法规范有效避免出现未知错误，空指针引用<br>高效：是替代C、C++、OC的理想化工具，良好一致的性能优异表现<br>良好阅读性：基于数十年的科学语法研究，持续优化语法提供更好的可读可写生</p>\n<p>###Swift特点<br>Closures unified with function pointers<br>Tuples and multiple return values<br>Generics<br>Fast and concise iteration over a range or collection<br>Structs that support methods, extensions, and protocols<br>Functional programming patterns, e.g., map and filter<br>Powerful error handling built-in<br>Advanced control flow with do, guard, defer, and repeat keywords<br>闭包的统一与函数指针<br>元组和多个返回值<br>泛型<br>快速而简洁的迭代范围或集合<br>支持的方法，扩展的协议结构。<br>函数式编程模式，例如：映射（map）和过滤器（filter）<br>强大的异常处理<br>先进的控制流关键字</p>\n<p>###与之前语法的区别<br>不同于OC，Swift支持多元返回值<br>类型安全<br>类型安全语言有严格的语法要求</p>\n<p>\u001e</p>\n","site":{"data":{}},"excerpt":"","more":"<p>由于公司需要，所以拖得不得再拖的Swift学习终于提上日程，教就是最好的学，先摘要，后总结完善，在实战过程中学习进步。</p>\n<p>Swift，苹果于2014年<a href=\"https://baike.baidu.com/item/WWDC\" target=\"_blank\" rel=\"noopener\">WWDC</a>（苹果开发者大会）发布的新开发语言，可与<a href=\"https://baike.baidu.com/item/Objective-C\" target=\"_blank\" rel=\"noopener\">Objective-C</a>*共同运行于<a href=\"https://baike.baidu.com/item/Mac%20OS\" target=\"_blank\" rel=\"noopener\">Mac OS</a>和<a href=\"https://baike.baidu.com/item/iOS/45705\" target=\"_blank\" rel=\"noopener\">iOS</a>平台，用于搭建基于苹果平台的应用程序。</p>\n<p>###Swift核心：<br>安全：明确的类型定义和语法规范有效避免出现未知错误，空指针引用<br>高效：是替代C、C++、OC的理想化工具，良好一致的性能优异表现<br>良好阅读性：基于数十年的科学语法研究，持续优化语法提供更好的可读可写生</p>\n<p>###Swift特点<br>Closures unified with function pointers<br>Tuples and multiple return values<br>Generics<br>Fast and concise iteration over a range or collection<br>Structs that support methods, extensions, and protocols<br>Functional programming patterns, e.g., map and filter<br>Powerful error handling built-in<br>Advanced control flow with do, guard, defer, and repeat keywords<br>闭包的统一与函数指针<br>元组和多个返回值<br>泛型<br>快速而简洁的迭代范围或集合<br>支持的方法，扩展的协议结构。<br>函数式编程模式，例如：映射（map）和过滤器（filter）<br>强大的异常处理<br>先进的控制流关键字</p>\n<p>###与之前语法的区别<br>不同于OC，Swift支持多元返回值<br>类型安全<br>类型安全语言有严格的语法要求</p>\n<p>\u001e</p>\n"},{"title":"RVM管理Ruby","date":"2019-03-06T17:31:03.000Z","_content":"\n---\ntitle: RVM管理Ruby\ndate: 2017-03-20 16:03:50\ntags: 命令\n---\n\n###安装RVM\n\n```\ngpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\n\\curl -sSL https://get.rvm.io | bash -s stable\n```\n\n###使用rvm管理Ruby \n\n列出已知的 Ruby 版本  \n\n```\nrvm list known  \n```\n安装一个 Ruby 版本\n\n```  \nrvm install 2.2.0 --disable-binary  \n```\n这里安装了最新的 2.2.0, rvm list known 列表里面的都可以拿来安装。  \n切换 Ruby 版本  \n\n```\nrvm use 2.2.0  \n```\n如果想设置为默认版本，这样一来以后新打开的控制台默认的 Ruby 就是这个版本\n\n```  \nrvm use 2.2.0 --default   \n```\n查询已经安装的ruby  \nrvm list  \n卸载一个已安装版本  \n\n```\nrvm remove 1.8.7  \n```\n###gemset 的使用\nRVM 不仅可以提供一个多 Ruby 版本共存的环境，还可以根据项目管理不同的 gemset.  \ngemset 可以理解为是一个独立的虚拟 Gem 环境，每一个 gemset 都是相互独立的。  \n比如你有两个项目，一个是 Rails 2.3 一个是 rails3. gemset 可以帮你便捷的建立两套 Gem 开发环境，并且方便的切换。  \ngemset 是附加在 Ruby 语言版本下面的，例如你用了 1.9.2, 建立了一个叫 rails3 的 gemset,当切换到 1.8.7 的时候，rails3 这个 gemset 并不存在。  \n建立 gemset  \n\n```\nrvm use 1.8.7  \nrvm gemset create rails23  \n```\n然后可以设定已建立的 gemset 做为当前环境\nuse 可以用来切换语言或者 gemset\n前提是他们已经被安装(或者建立)。并可以在 list 命令中看到。\n\n```\nrvm use 1.8.7\nrvm use 1.8.7@rails23\n```\n然后所有安装的 Gem 都是安装在这个 gemset 之下。\n列出当前 Ruby 的 gemset\n\n```\nrvm gemset list\n```\n清空 gemset 中的 Gem\n如果你想清空一个 gemset 的所有 Gem, 想重新安装所有 Gem，可以这样\n\n```\nrvm gemset empty 1.8.7@rails23\n```\n删除一个 gemset\n\n```\nrvm gemset delete rails2-3\n```\n项目自动加载 gemset\nRVM 还可以自动加载 gemset。 例如我们有一个 Rails 3.1.3 项目，需要 1.9.3 版本 Ruby，整个流程可以这样。\n\n```\nrvm install 1.9.3\nrvm use 1.9.3\nrvm gemset create rails313\nrvm use 1.9.3@rails313\n```\n下面进入到项目目录，建立一个 .rvmrc 文件。\n在这个文件里可以很简单的加一个命令：\n\n```\nrvm use 1.9.3@rails313\n```\n然后无论你当前 Ruby 设置是什么，cd 到这个项目的时候，RVM 会帮你加载 Ruby 1.9.3 和 rails313 gemset.","source":"_posts/RVM管理Ruby.md","raw":"---\ntitle: RVM管理Ruby\ndate: 2019-03-06 17:31:03\ntags: rvm\ncategories: 编程工具\n---\n\n---\ntitle: RVM管理Ruby\ndate: 2017-03-20 16:03:50\ntags: 命令\n---\n\n###安装RVM\n\n```\ngpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\n\\curl -sSL https://get.rvm.io | bash -s stable\n```\n\n###使用rvm管理Ruby \n\n列出已知的 Ruby 版本  \n\n```\nrvm list known  \n```\n安装一个 Ruby 版本\n\n```  \nrvm install 2.2.0 --disable-binary  \n```\n这里安装了最新的 2.2.0, rvm list known 列表里面的都可以拿来安装。  \n切换 Ruby 版本  \n\n```\nrvm use 2.2.0  \n```\n如果想设置为默认版本，这样一来以后新打开的控制台默认的 Ruby 就是这个版本\n\n```  \nrvm use 2.2.0 --default   \n```\n查询已经安装的ruby  \nrvm list  \n卸载一个已安装版本  \n\n```\nrvm remove 1.8.7  \n```\n###gemset 的使用\nRVM 不仅可以提供一个多 Ruby 版本共存的环境，还可以根据项目管理不同的 gemset.  \ngemset 可以理解为是一个独立的虚拟 Gem 环境，每一个 gemset 都是相互独立的。  \n比如你有两个项目，一个是 Rails 2.3 一个是 rails3. gemset 可以帮你便捷的建立两套 Gem 开发环境，并且方便的切换。  \ngemset 是附加在 Ruby 语言版本下面的，例如你用了 1.9.2, 建立了一个叫 rails3 的 gemset,当切换到 1.8.7 的时候，rails3 这个 gemset 并不存在。  \n建立 gemset  \n\n```\nrvm use 1.8.7  \nrvm gemset create rails23  \n```\n然后可以设定已建立的 gemset 做为当前环境\nuse 可以用来切换语言或者 gemset\n前提是他们已经被安装(或者建立)。并可以在 list 命令中看到。\n\n```\nrvm use 1.8.7\nrvm use 1.8.7@rails23\n```\n然后所有安装的 Gem 都是安装在这个 gemset 之下。\n列出当前 Ruby 的 gemset\n\n```\nrvm gemset list\n```\n清空 gemset 中的 Gem\n如果你想清空一个 gemset 的所有 Gem, 想重新安装所有 Gem，可以这样\n\n```\nrvm gemset empty 1.8.7@rails23\n```\n删除一个 gemset\n\n```\nrvm gemset delete rails2-3\n```\n项目自动加载 gemset\nRVM 还可以自动加载 gemset。 例如我们有一个 Rails 3.1.3 项目，需要 1.9.3 版本 Ruby，整个流程可以这样。\n\n```\nrvm install 1.9.3\nrvm use 1.9.3\nrvm gemset create rails313\nrvm use 1.9.3@rails313\n```\n下面进入到项目目录，建立一个 .rvmrc 文件。\n在这个文件里可以很简单的加一个命令：\n\n```\nrvm use 1.9.3@rails313\n```\n然后无论你当前 Ruby 设置是什么，cd 到这个项目的时候，RVM 会帮你加载 Ruby 1.9.3 和 rails313 gemset.","slug":"RVM管理Ruby","published":1,"updated":"2021-05-14T02:01:17.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno3l001dkuo44uvc1t38","content":"<hr>\n<p>title: RVM管理Ruby<br>date: 2017-03-20 16:03:50</p>\n<h2 id=\"tags-命令\"><a href=\"#tags-命令\" class=\"headerlink\" title=\"tags: 命令\"></a>tags: 命令</h2><p>###安装RVM</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3</span><br><span class=\"line\">\\curl -sSL https://get.rvm.io | bash -s stable</span><br></pre></td></tr></table></figure>\n<p>###使用rvm管理Ruby </p>\n<p>列出已知的 Ruby 版本  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm list known</span><br></pre></td></tr></table></figure>\n<p>安装一个 Ruby 版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm install 2.2.0 --disable-binary</span><br></pre></td></tr></table></figure>\n<p>这里安装了最新的 2.2.0, rvm list known 列表里面的都可以拿来安装。<br>切换 Ruby 版本  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm use 2.2.0</span><br></pre></td></tr></table></figure>\n<p>如果想设置为默认版本，这样一来以后新打开的控制台默认的 Ruby 就是这个版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm use 2.2.0 --default</span><br></pre></td></tr></table></figure>\n<p>查询已经安装的ruby<br>rvm list<br>卸载一个已安装版本  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm remove 1.8.7</span><br></pre></td></tr></table></figure>\n<p>###gemset 的使用<br>RVM 不仅可以提供一个多 Ruby 版本共存的环境，还可以根据项目管理不同的 gemset.<br>gemset 可以理解为是一个独立的虚拟 Gem 环境，每一个 gemset 都是相互独立的。<br>比如你有两个项目，一个是 Rails 2.3 一个是 rails3. gemset 可以帮你便捷的建立两套 Gem 开发环境，并且方便的切换。<br>gemset 是附加在 Ruby 语言版本下面的，例如你用了 1.9.2, 建立了一个叫 rails3 的 gemset,当切换到 1.8.7 的时候，rails3 这个 gemset 并不存在。<br>建立 gemset  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm use 1.8.7  </span><br><span class=\"line\">rvm gemset create rails23</span><br></pre></td></tr></table></figure>\n<p>然后可以设定已建立的 gemset 做为当前环境<br>use 可以用来切换语言或者 gemset<br>前提是他们已经被安装(或者建立)。并可以在 list 命令中看到。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm use 1.8.7</span><br><span class=\"line\">rvm use 1.8.7@rails23</span><br></pre></td></tr></table></figure>\n<p>然后所有安装的 Gem 都是安装在这个 gemset 之下。<br>列出当前 Ruby 的 gemset</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm gemset list</span><br></pre></td></tr></table></figure>\n<p>清空 gemset 中的 Gem<br>如果你想清空一个 gemset 的所有 Gem, 想重新安装所有 Gem，可以这样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm gemset empty 1.8.7@rails23</span><br></pre></td></tr></table></figure>\n<p>删除一个 gemset</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm gemset delete rails2-3</span><br></pre></td></tr></table></figure>\n<p>项目自动加载 gemset<br>RVM 还可以自动加载 gemset。 例如我们有一个 Rails 3.1.3 项目，需要 1.9.3 版本 Ruby，整个流程可以这样。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm install 1.9.3</span><br><span class=\"line\">rvm use 1.9.3</span><br><span class=\"line\">rvm gemset create rails313</span><br><span class=\"line\">rvm use 1.9.3@rails313</span><br></pre></td></tr></table></figure>\n<p>下面进入到项目目录，建立一个 .rvmrc 文件。<br>在这个文件里可以很简单的加一个命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm use 1.9.3@rails313</span><br></pre></td></tr></table></figure>\n<p>然后无论你当前 Ruby 设置是什么，cd 到这个项目的时候，RVM 会帮你加载 Ruby 1.9.3 和 rails313 gemset.</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>title: RVM管理Ruby<br>date: 2017-03-20 16:03:50</p>\n<h2 id=\"tags-命令\"><a href=\"#tags-命令\" class=\"headerlink\" title=\"tags: 命令\"></a>tags: 命令</h2><p>###安装RVM</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3</span><br><span class=\"line\">\\curl -sSL https://get.rvm.io | bash -s stable</span><br></pre></td></tr></table></figure>\n<p>###使用rvm管理Ruby </p>\n<p>列出已知的 Ruby 版本  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm list known</span><br></pre></td></tr></table></figure>\n<p>安装一个 Ruby 版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm install 2.2.0 --disable-binary</span><br></pre></td></tr></table></figure>\n<p>这里安装了最新的 2.2.0, rvm list known 列表里面的都可以拿来安装。<br>切换 Ruby 版本  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm use 2.2.0</span><br></pre></td></tr></table></figure>\n<p>如果想设置为默认版本，这样一来以后新打开的控制台默认的 Ruby 就是这个版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm use 2.2.0 --default</span><br></pre></td></tr></table></figure>\n<p>查询已经安装的ruby<br>rvm list<br>卸载一个已安装版本  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm remove 1.8.7</span><br></pre></td></tr></table></figure>\n<p>###gemset 的使用<br>RVM 不仅可以提供一个多 Ruby 版本共存的环境，还可以根据项目管理不同的 gemset.<br>gemset 可以理解为是一个独立的虚拟 Gem 环境，每一个 gemset 都是相互独立的。<br>比如你有两个项目，一个是 Rails 2.3 一个是 rails3. gemset 可以帮你便捷的建立两套 Gem 开发环境，并且方便的切换。<br>gemset 是附加在 Ruby 语言版本下面的，例如你用了 1.9.2, 建立了一个叫 rails3 的 gemset,当切换到 1.8.7 的时候，rails3 这个 gemset 并不存在。<br>建立 gemset  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm use 1.8.7  </span><br><span class=\"line\">rvm gemset create rails23</span><br></pre></td></tr></table></figure>\n<p>然后可以设定已建立的 gemset 做为当前环境<br>use 可以用来切换语言或者 gemset<br>前提是他们已经被安装(或者建立)。并可以在 list 命令中看到。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm use 1.8.7</span><br><span class=\"line\">rvm use 1.8.7@rails23</span><br></pre></td></tr></table></figure>\n<p>然后所有安装的 Gem 都是安装在这个 gemset 之下。<br>列出当前 Ruby 的 gemset</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm gemset list</span><br></pre></td></tr></table></figure>\n<p>清空 gemset 中的 Gem<br>如果你想清空一个 gemset 的所有 Gem, 想重新安装所有 Gem，可以这样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm gemset empty 1.8.7@rails23</span><br></pre></td></tr></table></figure>\n<p>删除一个 gemset</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm gemset delete rails2-3</span><br></pre></td></tr></table></figure>\n<p>项目自动加载 gemset<br>RVM 还可以自动加载 gemset。 例如我们有一个 Rails 3.1.3 项目，需要 1.9.3 版本 Ruby，整个流程可以这样。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm install 1.9.3</span><br><span class=\"line\">rvm use 1.9.3</span><br><span class=\"line\">rvm gemset create rails313</span><br><span class=\"line\">rvm use 1.9.3@rails313</span><br></pre></td></tr></table></figure>\n<p>下面进入到项目目录，建立一个 .rvmrc 文件。<br>在这个文件里可以很简单的加一个命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm use 1.9.3@rails313</span><br></pre></td></tr></table></figure>\n<p>然后无论你当前 Ruby 设置是什么，cd 到这个项目的时候，RVM 会帮你加载 Ruby 1.9.3 和 rails313 gemset.</p>\n"},{"title":"hexi_assist","date":"2019-03-06T15:24:06.000Z","_content":"\n# 和商助手开发记录\n\n{% asset_img 1.png 产品图片 %}\n\n### 项目概况：\n\n和商助手是和系的商家端，和系是个类似小京东的平台，助手是为了帮助商家进行\u001d发货，与买家互动、提现等一系列操作。功能相对简单，但是比较实用。个人负责和商助手新模块的开发与对现有模块进行功能优化，负责实现美工设计界面，负责与后台沟通接收网络数据，按进度完成开发任务。\n\n主要包括了下面一系列功能：\n\n1、免费开店，操作简单，只要两步就能开店。\n\n2、管理方便，随时随地添加商品、查看并处理订单。\n\n3、提现周期短，申请提现后1-2个工作日到账。\n\n4、快捷分享，一键分享商品到微信、QQ等多个平台\n\n \n\n### 项目难点：\n\n商品上传模块过于复杂，\b技术不成熟代码也写得最复杂。这是我写过的最艰难的代码，可能确定内功不够，模块的设计也是不成功，技术上受限制，想采用Masonry的技术来实现。\n\n\u001e1、实现商品上传，有图有没有图是两种不一样的显示状态，自己还运用了Masonry的动态进行实现。\n\n2、要实现类别联动，也就是选择一个父类后要显示对应的子类，如果没有父类则显示默认，选择还需要选择变动请求网络，所以独立出来了一个模块\n\n3、标签多种选择，一个类别有几个规格，比如尺寸有：大中小，颜色有红黄绿，最开始产品设计不能满足产品多样规格的需求，后面我们虽然即时想去了列表显示的方式解决问题，但是所有商品使用同一个规格表，导致哪怕是新加一个商品，都要做选择，只有一两个属性还好，想想20多个属性去选择是什么概念，每点一个要显示出来，每个列表的规格值还可以动态添加或者删除，另外提交的时候要去判断是不是该商品所有的规格选中了，没有选择还要提示，另外如果商品没有设置规格那么使用另外一种方式显示。总之逻辑上就够你确定半天了。技术上当时最让我头痛的就是不断增加的属性列表，以及最后的提交计算，你可能觉得可能没那么复杂。但是涉及到TableViewCell不动态刷新，Masonry动态添加删除控件，以及20多个属性的组合，就有点让人觉得疯狂了，最好还是做出来了，但是不想再去看第二眼，大大小小的各类模块和不规范的代码让自己读起来都有点吃力。程序设计一定要严谨。\n\n \n\n### 二：动态图文列表\n\n要做到图文混排，很多人觉得可能TableView就可以了，但是TableView不好处理单位Cell的长度增长，就是我在中间的文字区域编辑，内容增加或减少引起的行变化。TableView每次都得去刷新，非常麻烦，而且刷新你是不能编辑的，也就是刷新的时候没有输入焦点，无法输入。图片好处理，文字的动态变化非常伤脑筋。幸好当时深入研究了Masonry的约束规则，采用了约束的办法动态调整TextView的高度变化，还可以在文字删除完毕时把对应的TextView也干掉，比较合适的解决了这个问题。后面我发现这方面处理的最好的是wordpress的App版本，采用JS与html交互的方式，可能对文字加粗变长斜之类的，非常方便。功能非常强大，关系是完成后直接生成html代码，方便Web直接使用。非常完善的解决了这个需求。后面自己的项目也想接入这个模块用于发布文章，无奈老是有那么几个链接错误找不到原因解决。后面要尝试解决。\n\n### 三：没有做本地缓存和缺少有效通知机制\n\n虽然有WebImageChache这个类别减少图片的请求，但每次进入首页都要请求一次各种消息：比如商户帮助文字、用户是否有某个状态更改了，非常的消耗流量，特别是帮助，并不是经常更新的东西，安全可以采用本地缓存加通知更新的方式解决，特别是把推送和本地数据库的功能用好，采用Version判断是不是要更新某个信息，重新请求。包括和系在内都可以采用这种方式减少不必要的流量消耗，当时提出来了，可惜由于各种原因，最终没有实现。\n\n总的来说和商助手基本满足用户使用需求，但是技术和设计上还有许多要改进优化的地方。\n\n{% asset_img 2.jpg 产品图片 %}\n\n{% asset_img 3.jpg 产品图片 %}\n\n{% asset_img 4.jpg 产品图片 %}\n\n","source":"_posts/hexi-assist.md","raw":"---\ntitle: hexi_assist\ndate: 2019-03-06 15:24:06\ntags: 项目经历\n---\n\n# 和商助手开发记录\n\n{% asset_img 1.png 产品图片 %}\n\n### 项目概况：\n\n和商助手是和系的商家端，和系是个类似小京东的平台，助手是为了帮助商家进行\u001d发货，与买家互动、提现等一系列操作。功能相对简单，但是比较实用。个人负责和商助手新模块的开发与对现有模块进行功能优化，负责实现美工设计界面，负责与后台沟通接收网络数据，按进度完成开发任务。\n\n主要包括了下面一系列功能：\n\n1、免费开店，操作简单，只要两步就能开店。\n\n2、管理方便，随时随地添加商品、查看并处理订单。\n\n3、提现周期短，申请提现后1-2个工作日到账。\n\n4、快捷分享，一键分享商品到微信、QQ等多个平台\n\n \n\n### 项目难点：\n\n商品上传模块过于复杂，\b技术不成熟代码也写得最复杂。这是我写过的最艰难的代码，可能确定内功不够，模块的设计也是不成功，技术上受限制，想采用Masonry的技术来实现。\n\n\u001e1、实现商品上传，有图有没有图是两种不一样的显示状态，自己还运用了Masonry的动态进行实现。\n\n2、要实现类别联动，也就是选择一个父类后要显示对应的子类，如果没有父类则显示默认，选择还需要选择变动请求网络，所以独立出来了一个模块\n\n3、标签多种选择，一个类别有几个规格，比如尺寸有：大中小，颜色有红黄绿，最开始产品设计不能满足产品多样规格的需求，后面我们虽然即时想去了列表显示的方式解决问题，但是所有商品使用同一个规格表，导致哪怕是新加一个商品，都要做选择，只有一两个属性还好，想想20多个属性去选择是什么概念，每点一个要显示出来，每个列表的规格值还可以动态添加或者删除，另外提交的时候要去判断是不是该商品所有的规格选中了，没有选择还要提示，另外如果商品没有设置规格那么使用另外一种方式显示。总之逻辑上就够你确定半天了。技术上当时最让我头痛的就是不断增加的属性列表，以及最后的提交计算，你可能觉得可能没那么复杂。但是涉及到TableViewCell不动态刷新，Masonry动态添加删除控件，以及20多个属性的组合，就有点让人觉得疯狂了，最好还是做出来了，但是不想再去看第二眼，大大小小的各类模块和不规范的代码让自己读起来都有点吃力。程序设计一定要严谨。\n\n \n\n### 二：动态图文列表\n\n要做到图文混排，很多人觉得可能TableView就可以了，但是TableView不好处理单位Cell的长度增长，就是我在中间的文字区域编辑，内容增加或减少引起的行变化。TableView每次都得去刷新，非常麻烦，而且刷新你是不能编辑的，也就是刷新的时候没有输入焦点，无法输入。图片好处理，文字的动态变化非常伤脑筋。幸好当时深入研究了Masonry的约束规则，采用了约束的办法动态调整TextView的高度变化，还可以在文字删除完毕时把对应的TextView也干掉，比较合适的解决了这个问题。后面我发现这方面处理的最好的是wordpress的App版本，采用JS与html交互的方式，可能对文字加粗变长斜之类的，非常方便。功能非常强大，关系是完成后直接生成html代码，方便Web直接使用。非常完善的解决了这个需求。后面自己的项目也想接入这个模块用于发布文章，无奈老是有那么几个链接错误找不到原因解决。后面要尝试解决。\n\n### 三：没有做本地缓存和缺少有效通知机制\n\n虽然有WebImageChache这个类别减少图片的请求，但每次进入首页都要请求一次各种消息：比如商户帮助文字、用户是否有某个状态更改了，非常的消耗流量，特别是帮助，并不是经常更新的东西，安全可以采用本地缓存加通知更新的方式解决，特别是把推送和本地数据库的功能用好，采用Version判断是不是要更新某个信息，重新请求。包括和系在内都可以采用这种方式减少不必要的流量消耗，当时提出来了，可惜由于各种原因，最终没有实现。\n\n总的来说和商助手基本满足用户使用需求，但是技术和设计上还有许多要改进优化的地方。\n\n{% asset_img 2.jpg 产品图片 %}\n\n{% asset_img 3.jpg 产品图片 %}\n\n{% asset_img 4.jpg 产品图片 %}\n\n","slug":"hexi-assist","published":1,"updated":"2021-05-14T02:01:17.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno3m001fkuo41bp5wrg6","content":"<h1 id=\"和商助手开发记录\"><a href=\"#和商助手开发记录\" class=\"headerlink\" title=\"和商助手开发记录\"></a>和商助手开发记录</h1>\n<h3 id=\"项目概况：\"><a href=\"#项目概况：\" class=\"headerlink\" title=\"项目概况：\"></a>项目概况：</h3><p>和商助手是和系的商家端，和系是个类似小京东的平台，助手是为了帮助商家进行\u001d发货，与买家互动、提现等一系列操作。功能相对简单，但是比较实用。个人负责和商助手新模块的开发与对现有模块进行功能优化，负责实现美工设计界面，负责与后台沟通接收网络数据，按进度完成开发任务。</p>\n<p>主要包括了下面一系列功能：</p>\n<p>1、免费开店，操作简单，只要两步就能开店。</p>\n<p>2、管理方便，随时随地添加商品、查看并处理订单。</p>\n<p>3、提现周期短，申请提现后1-2个工作日到账。</p>\n<p>4、快捷分享，一键分享商品到微信、QQ等多个平台</p>\n<h3 id=\"项目难点：\"><a href=\"#项目难点：\" class=\"headerlink\" title=\"项目难点：\"></a>项目难点：</h3><p>商品上传模块过于复杂，\b技术不成熟代码也写得最复杂。这是我写过的最艰难的代码，可能确定内功不够，模块的设计也是不成功，技术上受限制，想采用Masonry的技术来实现。</p>\n<p>\u001e1、实现商品上传，有图有没有图是两种不一样的显示状态，自己还运用了Masonry的动态进行实现。</p>\n<p>2、要实现类别联动，也就是选择一个父类后要显示对应的子类，如果没有父类则显示默认，选择还需要选择变动请求网络，所以独立出来了一个模块</p>\n<p>3、标签多种选择，一个类别有几个规格，比如尺寸有：大中小，颜色有红黄绿，最开始产品设计不能满足产品多样规格的需求，后面我们虽然即时想去了列表显示的方式解决问题，但是所有商品使用同一个规格表，导致哪怕是新加一个商品，都要做选择，只有一两个属性还好，想想20多个属性去选择是什么概念，每点一个要显示出来，每个列表的规格值还可以动态添加或者删除，另外提交的时候要去判断是不是该商品所有的规格选中了，没有选择还要提示，另外如果商品没有设置规格那么使用另外一种方式显示。总之逻辑上就够你确定半天了。技术上当时最让我头痛的就是不断增加的属性列表，以及最后的提交计算，你可能觉得可能没那么复杂。但是涉及到TableViewCell不动态刷新，Masonry动态添加删除控件，以及20多个属性的组合，就有点让人觉得疯狂了，最好还是做出来了，但是不想再去看第二眼，大大小小的各类模块和不规范的代码让自己读起来都有点吃力。程序设计一定要严谨。</p>\n<h3 id=\"二：动态图文列表\"><a href=\"#二：动态图文列表\" class=\"headerlink\" title=\"二：动态图文列表\"></a>二：动态图文列表</h3><p>要做到图文混排，很多人觉得可能TableView就可以了，但是TableView不好处理单位Cell的长度增长，就是我在中间的文字区域编辑，内容增加或减少引起的行变化。TableView每次都得去刷新，非常麻烦，而且刷新你是不能编辑的，也就是刷新的时候没有输入焦点，无法输入。图片好处理，文字的动态变化非常伤脑筋。幸好当时深入研究了Masonry的约束规则，采用了约束的办法动态调整TextView的高度变化，还可以在文字删除完毕时把对应的TextView也干掉，比较合适的解决了这个问题。后面我发现这方面处理的最好的是wordpress的App版本，采用JS与html交互的方式，可能对文字加粗变长斜之类的，非常方便。功能非常强大，关系是完成后直接生成html代码，方便Web直接使用。非常完善的解决了这个需求。后面自己的项目也想接入这个模块用于发布文章，无奈老是有那么几个链接错误找不到原因解决。后面要尝试解决。</p>\n<h3 id=\"三：没有做本地缓存和缺少有效通知机制\"><a href=\"#三：没有做本地缓存和缺少有效通知机制\" class=\"headerlink\" title=\"三：没有做本地缓存和缺少有效通知机制\"></a>三：没有做本地缓存和缺少有效通知机制</h3><p>虽然有WebImageChache这个类别减少图片的请求，但每次进入首页都要请求一次各种消息：比如商户帮助文字、用户是否有某个状态更改了，非常的消耗流量，特别是帮助，并不是经常更新的东西，安全可以采用本地缓存加通知更新的方式解决，特别是把推送和本地数据库的功能用好，采用Version判断是不是要更新某个信息，重新请求。包括和系在内都可以采用这种方式减少不必要的流量消耗，当时提出来了，可惜由于各种原因，最终没有实现。</p>\n<p>总的来说和商助手基本满足用户使用需求，但是技术和设计上还有许多要改进优化的地方。</p>\n<img src=\"/2019/03/06/hexi-assist/2.jpg\" title=\"产品图片\">\n<img src=\"/2019/03/06/hexi-assist/3.jpg\" title=\"产品图片\">\n<img src=\"/2019/03/06/hexi-assist/4.jpg\" title=\"产品图片\">\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"和商助手开发记录\"><a href=\"#和商助手开发记录\" class=\"headerlink\" title=\"和商助手开发记录\"></a>和商助手开发记录</h1>\n<h3 id=\"项目概况：\"><a href=\"#项目概况：\" class=\"headerlink\" title=\"项目概况：\"></a>项目概况：</h3><p>和商助手是和系的商家端，和系是个类似小京东的平台，助手是为了帮助商家进行\u001d发货，与买家互动、提现等一系列操作。功能相对简单，但是比较实用。个人负责和商助手新模块的开发与对现有模块进行功能优化，负责实现美工设计界面，负责与后台沟通接收网络数据，按进度完成开发任务。</p>\n<p>主要包括了下面一系列功能：</p>\n<p>1、免费开店，操作简单，只要两步就能开店。</p>\n<p>2、管理方便，随时随地添加商品、查看并处理订单。</p>\n<p>3、提现周期短，申请提现后1-2个工作日到账。</p>\n<p>4、快捷分享，一键分享商品到微信、QQ等多个平台</p>\n<h3 id=\"项目难点：\"><a href=\"#项目难点：\" class=\"headerlink\" title=\"项目难点：\"></a>项目难点：</h3><p>商品上传模块过于复杂，\b技术不成熟代码也写得最复杂。这是我写过的最艰难的代码，可能确定内功不够，模块的设计也是不成功，技术上受限制，想采用Masonry的技术来实现。</p>\n<p>\u001e1、实现商品上传，有图有没有图是两种不一样的显示状态，自己还运用了Masonry的动态进行实现。</p>\n<p>2、要实现类别联动，也就是选择一个父类后要显示对应的子类，如果没有父类则显示默认，选择还需要选择变动请求网络，所以独立出来了一个模块</p>\n<p>3、标签多种选择，一个类别有几个规格，比如尺寸有：大中小，颜色有红黄绿，最开始产品设计不能满足产品多样规格的需求，后面我们虽然即时想去了列表显示的方式解决问题，但是所有商品使用同一个规格表，导致哪怕是新加一个商品，都要做选择，只有一两个属性还好，想想20多个属性去选择是什么概念，每点一个要显示出来，每个列表的规格值还可以动态添加或者删除，另外提交的时候要去判断是不是该商品所有的规格选中了，没有选择还要提示，另外如果商品没有设置规格那么使用另外一种方式显示。总之逻辑上就够你确定半天了。技术上当时最让我头痛的就是不断增加的属性列表，以及最后的提交计算，你可能觉得可能没那么复杂。但是涉及到TableViewCell不动态刷新，Masonry动态添加删除控件，以及20多个属性的组合，就有点让人觉得疯狂了，最好还是做出来了，但是不想再去看第二眼，大大小小的各类模块和不规范的代码让自己读起来都有点吃力。程序设计一定要严谨。</p>\n<h3 id=\"二：动态图文列表\"><a href=\"#二：动态图文列表\" class=\"headerlink\" title=\"二：动态图文列表\"></a>二：动态图文列表</h3><p>要做到图文混排，很多人觉得可能TableView就可以了，但是TableView不好处理单位Cell的长度增长，就是我在中间的文字区域编辑，内容增加或减少引起的行变化。TableView每次都得去刷新，非常麻烦，而且刷新你是不能编辑的，也就是刷新的时候没有输入焦点，无法输入。图片好处理，文字的动态变化非常伤脑筋。幸好当时深入研究了Masonry的约束规则，采用了约束的办法动态调整TextView的高度变化，还可以在文字删除完毕时把对应的TextView也干掉，比较合适的解决了这个问题。后面我发现这方面处理的最好的是wordpress的App版本，采用JS与html交互的方式，可能对文字加粗变长斜之类的，非常方便。功能非常强大，关系是完成后直接生成html代码，方便Web直接使用。非常完善的解决了这个需求。后面自己的项目也想接入这个模块用于发布文章，无奈老是有那么几个链接错误找不到原因解决。后面要尝试解决。</p>\n<h3 id=\"三：没有做本地缓存和缺少有效通知机制\"><a href=\"#三：没有做本地缓存和缺少有效通知机制\" class=\"headerlink\" title=\"三：没有做本地缓存和缺少有效通知机制\"></a>三：没有做本地缓存和缺少有效通知机制</h3><p>虽然有WebImageChache这个类别减少图片的请求，但每次进入首页都要请求一次各种消息：比如商户帮助文字、用户是否有某个状态更改了，非常的消耗流量，特别是帮助，并不是经常更新的东西，安全可以采用本地缓存加通知更新的方式解决，特别是把推送和本地数据库的功能用好，采用Version判断是不是要更新某个信息，重新请求。包括和系在内都可以采用这种方式减少不必要的流量消耗，当时提出来了，可惜由于各种原因，最终没有实现。</p>\n<p>总的来说和商助手基本满足用户使用需求，但是技术和设计上还有许多要改进优化的地方。</p>\n<img src=\"/2019/03/06/hexi-assist/2.jpg\" title=\"产品图片\">\n<img src=\"/2019/03/06/hexi-assist/3.jpg\" title=\"产品图片\">\n<img src=\"/2019/03/06/hexi-assist/4.jpg\" title=\"产品图片\">\n"},{"title":"hexi_travel","date":"2019-03-06T15:24:33.000Z","_content":"\n{% asset_img 1.png %}\n\n\n\n项目概况：\n\n这两款软件是和系的洐生软件，一开始和系要做一个综合平台，包括电子商务、家政服务、周边旅游，后面进行了业务拆分，自然就有了和家政和和乡游，一个是针对成都本地的家政服务，一个针对成都周边的乡村旅游，都有很好的布局，很大的市场前景。不过最后还是因为多方面考虑，公司叫停了这两个项目，这算是自己最开始完全负责的App,体会也很多，收获也很大。\n\n技术上\n\n1、学习了TableView控件的headerView的使用，TableCell的拓展，\n\n2、较为复杂的页面布局，逐步单独接触并完成聊天、地图、及网页加载一系列功能\n\n看似简单，但是要求很细致才行，比如WebView的高度老是算不准确，场景切换不能多样化，以前等比例布局。这两个软件都为我提供了很好的实战参考。\n\n苹果的图已经全部找不到了，就用安卓的代替了，另外和家政找不到了，只有项目图标，小型项目的开发其实在已经有和系的基础上很方快的。\n\n<% asset_img 2.png %>\n\n<% asset_img 3.png %>\n\n\n\n","source":"_posts/hexi-travel.md","raw":"---\ntitle: hexi_travel\ndate: 2019-03-06 15:24:33\ntags: 项目经历\n---\n\n{% asset_img 1.png %}\n\n\n\n项目概况：\n\n这两款软件是和系的洐生软件，一开始和系要做一个综合平台，包括电子商务、家政服务、周边旅游，后面进行了业务拆分，自然就有了和家政和和乡游，一个是针对成都本地的家政服务，一个针对成都周边的乡村旅游，都有很好的布局，很大的市场前景。不过最后还是因为多方面考虑，公司叫停了这两个项目，这算是自己最开始完全负责的App,体会也很多，收获也很大。\n\n技术上\n\n1、学习了TableView控件的headerView的使用，TableCell的拓展，\n\n2、较为复杂的页面布局，逐步单独接触并完成聊天、地图、及网页加载一系列功能\n\n看似简单，但是要求很细致才行，比如WebView的高度老是算不准确，场景切换不能多样化，以前等比例布局。这两个软件都为我提供了很好的实战参考。\n\n苹果的图已经全部找不到了，就用安卓的代替了，另外和家政找不到了，只有项目图标，小型项目的开发其实在已经有和系的基础上很方快的。\n\n<% asset_img 2.png %>\n\n<% asset_img 3.png %>\n\n\n\n","slug":"hexi-travel","published":1,"updated":"2021-05-14T02:01:17.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno3q001jkuo4jxsgl9r8","content":"<img src=\"/2019/03/06/hexi-travel/1.png\">\n<p>项目概况：</p>\n<p>这两款软件是和系的洐生软件，一开始和系要做一个综合平台，包括电子商务、家政服务、周边旅游，后面进行了业务拆分，自然就有了和家政和和乡游，一个是针对成都本地的家政服务，一个针对成都周边的乡村旅游，都有很好的布局，很大的市场前景。不过最后还是因为多方面考虑，公司叫停了这两个项目，这算是自己最开始完全负责的App,体会也很多，收获也很大。</p>\n<p>技术上</p>\n<p>1、学习了TableView控件的headerView的使用，TableCell的拓展，</p>\n<p>2、较为复杂的页面布局，逐步单独接触并完成聊天、地图、及网页加载一系列功能</p>\n<p>看似简单，但是要求很细致才行，比如WebView的高度老是算不准确，场景切换不能多样化，以前等比例布局。这两个软件都为我提供了很好的实战参考。</p>\n<p>苹果的图已经全部找不到了，就用安卓的代替了，另外和家政找不到了，只有项目图标，小型项目的开发其实在已经有和系的基础上很方快的。</p>\n<p>&lt;% asset_img 2.png %&gt;</p>\n<p>&lt;% asset_img 3.png %&gt;</p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/2019/03/06/hexi-travel/1.png\">\n<p>项目概况：</p>\n<p>这两款软件是和系的洐生软件，一开始和系要做一个综合平台，包括电子商务、家政服务、周边旅游，后面进行了业务拆分，自然就有了和家政和和乡游，一个是针对成都本地的家政服务，一个针对成都周边的乡村旅游，都有很好的布局，很大的市场前景。不过最后还是因为多方面考虑，公司叫停了这两个项目，这算是自己最开始完全负责的App,体会也很多，收获也很大。</p>\n<p>技术上</p>\n<p>1、学习了TableView控件的headerView的使用，TableCell的拓展，</p>\n<p>2、较为复杂的页面布局，逐步单独接触并完成聊天、地图、及网页加载一系列功能</p>\n<p>看似简单，但是要求很细致才行，比如WebView的高度老是算不准确，场景切换不能多样化，以前等比例布局。这两个软件都为我提供了很好的实战参考。</p>\n<p>苹果的图已经全部找不到了，就用安卓的代替了，另外和家政找不到了，只有项目图标，小型项目的开发其实在已经有和系的基础上很方快的。</p>\n<p>&lt;% asset_img 2.png %&gt;</p>\n<p>&lt;% asset_img 3.png %&gt;</p>\n"},{"title":"heidakeng","date":"2019-03-06T15:25:21.000Z","_content":"\n# 黑大坑iOS端开发体\n\n\n\n{% asset_img 1.png 产品图片 %}\n\n说好听叫创业叫外水，说不好听叫折腾，本来挑50斤的人要去挑百斤的担子，自己一个人挑还不够，硬是要叫一伙人挑，我都有点佩服自己作死的勇气。\n\n**机缘巧合认识老板**\n\n不得不说，一个圈子很重要，特别是个优质的圈子。\n\n为什么ACM比赛，电子科技大学的编程就是那么牛，因为他们有传统，除了选手优质外，有那么多老司机带路，能不厉害吗？\n\n为什么同样是两年，有的人在小公司闭门造车，有的人在BAT进步神速。你是资源是远远比不上别人的，直接输在起跑线上，要追不得不付出代价。\n\n明白了之前滴滴同城开比我小还却宝马的小伙给我说过人走茶凉的道理，你走了关系不一定能带走，因为你当时建立的关系别人看重的是你背后公司的资源。所以平台特别重要，特别是优质的平台，回报超出了你的付出。\n\n头马是个优质而广阔的圈子，圈子里的人来自各行各业，而且由于有英语水平限制，进来的人算得上比较优质。在这里你的官员职位，你做的演讲级别是个很有用的铭牌。不仅仅是锻炼了你的社交能力，更是让你与其他人有不少的合作机会。于是结识了很厉害的David，通过他认识了很厉害的老G，因为我的工作和他们的需求联系起来。同样，你有某方面的需求，也会找到对应的人才。比如前段时间找职业规划师，就在群里面推荐了很优秀的阿舟老师。\n\n圈子越大，机会越多，圈子优质，人就越可靠。\n\n**如果产品需求和设计可以重来，我宁愿花一半的时间做这个事情**\n\n客户对于产品的认识是不够全面的，所以你需要帮助他确定产品的预期效果，越准确越好，好处也非常的明显：帮助他清楚的知道自己要做哪一块，比如最开始我们这边得到的信息是做一个钓鱼资讯类的App，结果到后来卖票实现就可以了。导致做了很多无用的模块，最后被一一砍去。\n\n关于界面效果一定要拿非常细致的设计图出来，原因有三：1、让他自己对看到的效果非常确信，这样后面他不会说你这个设计不如我看到的某个好看之类的2、你的开发任务更加明确，防止做重复工作和无用功。3、避免团队士气受打击，如果要推倒重做或者重要修改是非常麻烦的事情，因为不仅仅关系到个人，而是团队，从美工，到后台再到前端效果可能都需要修改，牵一发动全身。如果有临时要改的，要么列到下一个开发周期内进行。不然会造成非常混乱的结果。\n\n这方面经验严重不足，导致后面出了很多问题。\n\n**进度缓慢是谁的责任，不要和最好的朋友合伙开公司**\n\n都说亲兄弟可以明算帐，但是在真正重视的人面前说狠话真的很难，特别是中国这个环境，工作和生活是分不开的，你不可能说今天我是你老板你工作干得不好臭骂你一顿，下班就找你出来玩，唱酒KTV，大家嗨起来当上班事情没发生，太难。项目容不能差错，兄弟伙也不能将就 ，该说指正的就要去说服。我也知道这个道理，但是往往会出现执行能力太差，做事拖拉你也不好明说。他也是有势无恐，我们这么铁的关系，我没时间做，你不能强制我吧。一方面老板要求的任务，另一方面要顾全面子，左右为难。\n\n最好开始就说清楚，利益怎么分，你这个完成多少，你如果没有及时完成扣多少，如果你干不下来，那怎么办，这些不是因为相信就可以不先商量的。虽然这样开始关系会有点僵，但真的效果要好得多。\n\n**需要担当，更需要实际行动**\n\n一开始我想的合伙人模式，你完成你的模块，我完成我的模块，然后我们交接打通，项目就成了，钱也到手了，大家都高兴。但是发现这个过程中有三个很大的弊端：\n\n1、软件开发是个体系动作，不是拼积木这么简单。从需求不明确就产生错误指导开始，数据库开始设计如果我就能参与其中，就不会有两个后台各自设计自已的数据库表，也会有一套详细的数据库设计文档，字段对应。另外后台也不会出现两种不同的调用方式、数据处理不统一，后台代码提交也出现问题。为什么做后台的人往往能成为一个公司的技术总监，因为他们往往掌握了核心技术，前端只是用户显示而已。所以需要担当，去把握核心的技术，制定标准的数据处理步骤和代码规范前期相当的重要。\n\n2、有效沟通，为什么程序员会留给外界死板的印像，因为他们总是在开发的角度想问题，没有在客户的角度考虑问题，第一反应是这个该用什么来实现，或者这个东西我觉得这样挺好的，为什么你偏偏要改。以前有个段子说：什么方法让程序员自杀，那就是改三次需求。因为对于需求的理解和修改优化的目的非常的不了解，没有换位思考。在他觉技术没有问题这种情况下，你的优化方案是很难说服他的，特别是涉及我这个模块已经写了很多代码了，为什么你要改。你费了半天都可能在做无用功，另外有些时候重构要比修改来得高效。需求是不断变化的，这也是要求代码有良好拓展性和细分模块的原因所在。\n\n3、确定他能不能做，程序员的核心能力我觉得应该是不断的学习实践能力。快速尝试学习使用新鲜技术，好奇心驱动应该是很重要的一环。当项目分工时，你真的要学会去判定他到底能不能做，做得出哪个效果。因为这个关心到整个项目的进度问题，他做不出来，不愿意去学习，那么开始的所有交代，沟通白搭。中途换人可能要从零开始，损失非常惨重，他固然有原因，但是属于你决策失误，预估不足，负主要责任。\n\n合伙人制真的需要强力CP才能完成，在经验和能力缺少的情况下一味相信是不够的，而应该采取老板制，首先个人把头带好，然后强势、严格的要求每一个人和我一样做好自己的工作，开头说明直接与利益挂钩，合理安排时间完成规定任务，不妥协，不心软、不将就。虽然看似过份，但大家都有看得见的好处。值！\u001c\n\n**涉及经验积累：**\n\n阿里云服务器开通使用\n\n阿里云OSS调用\n\n微信开放平台微信支付申请\n\n腾讯开发者平台申请\n\n新浪平台申请\n\n第三方地图使用及导航\n\n优酷SDK调用\n\n数据库创建与使用\n\nPHP标记语言使用\n\nHTML+CSS实践\n\nBootstrap研究学习\n\nLinux WordPress的搭建\n\n视频SDK调用\n\n来一波视图：\n\n\n\n\n\n{% asset_img 2.png 产品图片 %}\n\n{% asset_img 3.png 产品图片 %}\n\n{% asset_img 4.png 产品图片 %}\n\n{% asset_img 5.png 产品图片 %}\n\n{% asset_img 6.png 产品图片 %}\n\n{% asset_img 7.png 产品图片 %}\n\n{% asset_img 8.png 产品图片 %}\n\n{% asset_img 9.png 产品图片 %}","source":"_posts/heidakeng.md","raw":"---\ntitle: heidakeng\ndate: 2019-03-06 15:25:21\ntags: 项目\ncategories: 编程思想\n---\n\n# 黑大坑iOS端开发体\n\n\n\n{% asset_img 1.png 产品图片 %}\n\n说好听叫创业叫外水，说不好听叫折腾，本来挑50斤的人要去挑百斤的担子，自己一个人挑还不够，硬是要叫一伙人挑，我都有点佩服自己作死的勇气。\n\n**机缘巧合认识老板**\n\n不得不说，一个圈子很重要，特别是个优质的圈子。\n\n为什么ACM比赛，电子科技大学的编程就是那么牛，因为他们有传统，除了选手优质外，有那么多老司机带路，能不厉害吗？\n\n为什么同样是两年，有的人在小公司闭门造车，有的人在BAT进步神速。你是资源是远远比不上别人的，直接输在起跑线上，要追不得不付出代价。\n\n明白了之前滴滴同城开比我小还却宝马的小伙给我说过人走茶凉的道理，你走了关系不一定能带走，因为你当时建立的关系别人看重的是你背后公司的资源。所以平台特别重要，特别是优质的平台，回报超出了你的付出。\n\n头马是个优质而广阔的圈子，圈子里的人来自各行各业，而且由于有英语水平限制，进来的人算得上比较优质。在这里你的官员职位，你做的演讲级别是个很有用的铭牌。不仅仅是锻炼了你的社交能力，更是让你与其他人有不少的合作机会。于是结识了很厉害的David，通过他认识了很厉害的老G，因为我的工作和他们的需求联系起来。同样，你有某方面的需求，也会找到对应的人才。比如前段时间找职业规划师，就在群里面推荐了很优秀的阿舟老师。\n\n圈子越大，机会越多，圈子优质，人就越可靠。\n\n**如果产品需求和设计可以重来，我宁愿花一半的时间做这个事情**\n\n客户对于产品的认识是不够全面的，所以你需要帮助他确定产品的预期效果，越准确越好，好处也非常的明显：帮助他清楚的知道自己要做哪一块，比如最开始我们这边得到的信息是做一个钓鱼资讯类的App，结果到后来卖票实现就可以了。导致做了很多无用的模块，最后被一一砍去。\n\n关于界面效果一定要拿非常细致的设计图出来，原因有三：1、让他自己对看到的效果非常确信，这样后面他不会说你这个设计不如我看到的某个好看之类的2、你的开发任务更加明确，防止做重复工作和无用功。3、避免团队士气受打击，如果要推倒重做或者重要修改是非常麻烦的事情，因为不仅仅关系到个人，而是团队，从美工，到后台再到前端效果可能都需要修改，牵一发动全身。如果有临时要改的，要么列到下一个开发周期内进行。不然会造成非常混乱的结果。\n\n这方面经验严重不足，导致后面出了很多问题。\n\n**进度缓慢是谁的责任，不要和最好的朋友合伙开公司**\n\n都说亲兄弟可以明算帐，但是在真正重视的人面前说狠话真的很难，特别是中国这个环境，工作和生活是分不开的，你不可能说今天我是你老板你工作干得不好臭骂你一顿，下班就找你出来玩，唱酒KTV，大家嗨起来当上班事情没发生，太难。项目容不能差错，兄弟伙也不能将就 ，该说指正的就要去说服。我也知道这个道理，但是往往会出现执行能力太差，做事拖拉你也不好明说。他也是有势无恐，我们这么铁的关系，我没时间做，你不能强制我吧。一方面老板要求的任务，另一方面要顾全面子，左右为难。\n\n最好开始就说清楚，利益怎么分，你这个完成多少，你如果没有及时完成扣多少，如果你干不下来，那怎么办，这些不是因为相信就可以不先商量的。虽然这样开始关系会有点僵，但真的效果要好得多。\n\n**需要担当，更需要实际行动**\n\n一开始我想的合伙人模式，你完成你的模块，我完成我的模块，然后我们交接打通，项目就成了，钱也到手了，大家都高兴。但是发现这个过程中有三个很大的弊端：\n\n1、软件开发是个体系动作，不是拼积木这么简单。从需求不明确就产生错误指导开始，数据库开始设计如果我就能参与其中，就不会有两个后台各自设计自已的数据库表，也会有一套详细的数据库设计文档，字段对应。另外后台也不会出现两种不同的调用方式、数据处理不统一，后台代码提交也出现问题。为什么做后台的人往往能成为一个公司的技术总监，因为他们往往掌握了核心技术，前端只是用户显示而已。所以需要担当，去把握核心的技术，制定标准的数据处理步骤和代码规范前期相当的重要。\n\n2、有效沟通，为什么程序员会留给外界死板的印像，因为他们总是在开发的角度想问题，没有在客户的角度考虑问题，第一反应是这个该用什么来实现，或者这个东西我觉得这样挺好的，为什么你偏偏要改。以前有个段子说：什么方法让程序员自杀，那就是改三次需求。因为对于需求的理解和修改优化的目的非常的不了解，没有换位思考。在他觉技术没有问题这种情况下，你的优化方案是很难说服他的，特别是涉及我这个模块已经写了很多代码了，为什么你要改。你费了半天都可能在做无用功，另外有些时候重构要比修改来得高效。需求是不断变化的，这也是要求代码有良好拓展性和细分模块的原因所在。\n\n3、确定他能不能做，程序员的核心能力我觉得应该是不断的学习实践能力。快速尝试学习使用新鲜技术，好奇心驱动应该是很重要的一环。当项目分工时，你真的要学会去判定他到底能不能做，做得出哪个效果。因为这个关心到整个项目的进度问题，他做不出来，不愿意去学习，那么开始的所有交代，沟通白搭。中途换人可能要从零开始，损失非常惨重，他固然有原因，但是属于你决策失误，预估不足，负主要责任。\n\n合伙人制真的需要强力CP才能完成，在经验和能力缺少的情况下一味相信是不够的，而应该采取老板制，首先个人把头带好，然后强势、严格的要求每一个人和我一样做好自己的工作，开头说明直接与利益挂钩，合理安排时间完成规定任务，不妥协，不心软、不将就。虽然看似过份，但大家都有看得见的好处。值！\u001c\n\n**涉及经验积累：**\n\n阿里云服务器开通使用\n\n阿里云OSS调用\n\n微信开放平台微信支付申请\n\n腾讯开发者平台申请\n\n新浪平台申请\n\n第三方地图使用及导航\n\n优酷SDK调用\n\n数据库创建与使用\n\nPHP标记语言使用\n\nHTML+CSS实践\n\nBootstrap研究学习\n\nLinux WordPress的搭建\n\n视频SDK调用\n\n来一波视图：\n\n\n\n\n\n{% asset_img 2.png 产品图片 %}\n\n{% asset_img 3.png 产品图片 %}\n\n{% asset_img 4.png 产品图片 %}\n\n{% asset_img 5.png 产品图片 %}\n\n{% asset_img 6.png 产品图片 %}\n\n{% asset_img 7.png 产品图片 %}\n\n{% asset_img 8.png 产品图片 %}\n\n{% asset_img 9.png 产品图片 %}","slug":"heidakeng","published":1,"updated":"2021-05-14T02:01:17.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno3r001lkuo4qaytlrxk","content":"<h1 id=\"黑大坑iOS端开发体\"><a href=\"#黑大坑iOS端开发体\" class=\"headerlink\" title=\"黑大坑iOS端开发体\"></a>黑大坑iOS端开发体</h1><img src=\"/2019/03/06/heidakeng/1.png\" title=\"产品图片\">\n<p>说好听叫创业叫外水，说不好听叫折腾，本来挑50斤的人要去挑百斤的担子，自己一个人挑还不够，硬是要叫一伙人挑，我都有点佩服自己作死的勇气。</p>\n<p><strong>机缘巧合认识老板</strong></p>\n<p>不得不说，一个圈子很重要，特别是个优质的圈子。</p>\n<p>为什么ACM比赛，电子科技大学的编程就是那么牛，因为他们有传统，除了选手优质外，有那么多老司机带路，能不厉害吗？</p>\n<p>为什么同样是两年，有的人在小公司闭门造车，有的人在BAT进步神速。你是资源是远远比不上别人的，直接输在起跑线上，要追不得不付出代价。</p>\n<p>明白了之前滴滴同城开比我小还却宝马的小伙给我说过人走茶凉的道理，你走了关系不一定能带走，因为你当时建立的关系别人看重的是你背后公司的资源。所以平台特别重要，特别是优质的平台，回报超出了你的付出。</p>\n<p>头马是个优质而广阔的圈子，圈子里的人来自各行各业，而且由于有英语水平限制，进来的人算得上比较优质。在这里你的官员职位，你做的演讲级别是个很有用的铭牌。不仅仅是锻炼了你的社交能力，更是让你与其他人有不少的合作机会。于是结识了很厉害的David，通过他认识了很厉害的老G，因为我的工作和他们的需求联系起来。同样，你有某方面的需求，也会找到对应的人才。比如前段时间找职业规划师，就在群里面推荐了很优秀的阿舟老师。</p>\n<p>圈子越大，机会越多，圈子优质，人就越可靠。</p>\n<p><strong>如果产品需求和设计可以重来，我宁愿花一半的时间做这个事情</strong></p>\n<p>客户对于产品的认识是不够全面的，所以你需要帮助他确定产品的预期效果，越准确越好，好处也非常的明显：帮助他清楚的知道自己要做哪一块，比如最开始我们这边得到的信息是做一个钓鱼资讯类的App，结果到后来卖票实现就可以了。导致做了很多无用的模块，最后被一一砍去。</p>\n<p>关于界面效果一定要拿非常细致的设计图出来，原因有三：1、让他自己对看到的效果非常确信，这样后面他不会说你这个设计不如我看到的某个好看之类的2、你的开发任务更加明确，防止做重复工作和无用功。3、避免团队士气受打击，如果要推倒重做或者重要修改是非常麻烦的事情，因为不仅仅关系到个人，而是团队，从美工，到后台再到前端效果可能都需要修改，牵一发动全身。如果有临时要改的，要么列到下一个开发周期内进行。不然会造成非常混乱的结果。</p>\n<p>这方面经验严重不足，导致后面出了很多问题。</p>\n<p><strong>进度缓慢是谁的责任，不要和最好的朋友合伙开公司</strong></p>\n<p>都说亲兄弟可以明算帐，但是在真正重视的人面前说狠话真的很难，特别是中国这个环境，工作和生活是分不开的，你不可能说今天我是你老板你工作干得不好臭骂你一顿，下班就找你出来玩，唱酒KTV，大家嗨起来当上班事情没发生，太难。项目容不能差错，兄弟伙也不能将就 ，该说指正的就要去说服。我也知道这个道理，但是往往会出现执行能力太差，做事拖拉你也不好明说。他也是有势无恐，我们这么铁的关系，我没时间做，你不能强制我吧。一方面老板要求的任务，另一方面要顾全面子，左右为难。</p>\n<p>最好开始就说清楚，利益怎么分，你这个完成多少，你如果没有及时完成扣多少，如果你干不下来，那怎么办，这些不是因为相信就可以不先商量的。虽然这样开始关系会有点僵，但真的效果要好得多。</p>\n<p><strong>需要担当，更需要实际行动</strong></p>\n<p>一开始我想的合伙人模式，你完成你的模块，我完成我的模块，然后我们交接打通，项目就成了，钱也到手了，大家都高兴。但是发现这个过程中有三个很大的弊端：</p>\n<p>1、软件开发是个体系动作，不是拼积木这么简单。从需求不明确就产生错误指导开始，数据库开始设计如果我就能参与其中，就不会有两个后台各自设计自已的数据库表，也会有一套详细的数据库设计文档，字段对应。另外后台也不会出现两种不同的调用方式、数据处理不统一，后台代码提交也出现问题。为什么做后台的人往往能成为一个公司的技术总监，因为他们往往掌握了核心技术，前端只是用户显示而已。所以需要担当，去把握核心的技术，制定标准的数据处理步骤和代码规范前期相当的重要。</p>\n<p>2、有效沟通，为什么程序员会留给外界死板的印像，因为他们总是在开发的角度想问题，没有在客户的角度考虑问题，第一反应是这个该用什么来实现，或者这个东西我觉得这样挺好的，为什么你偏偏要改。以前有个段子说：什么方法让程序员自杀，那就是改三次需求。因为对于需求的理解和修改优化的目的非常的不了解，没有换位思考。在他觉技术没有问题这种情况下，你的优化方案是很难说服他的，特别是涉及我这个模块已经写了很多代码了，为什么你要改。你费了半天都可能在做无用功，另外有些时候重构要比修改来得高效。需求是不断变化的，这也是要求代码有良好拓展性和细分模块的原因所在。</p>\n<p>3、确定他能不能做，程序员的核心能力我觉得应该是不断的学习实践能力。快速尝试学习使用新鲜技术，好奇心驱动应该是很重要的一环。当项目分工时，你真的要学会去判定他到底能不能做，做得出哪个效果。因为这个关心到整个项目的进度问题，他做不出来，不愿意去学习，那么开始的所有交代，沟通白搭。中途换人可能要从零开始，损失非常惨重，他固然有原因，但是属于你决策失误，预估不足，负主要责任。</p>\n<p>合伙人制真的需要强力CP才能完成，在经验和能力缺少的情况下一味相信是不够的，而应该采取老板制，首先个人把头带好，然后强势、严格的要求每一个人和我一样做好自己的工作，开头说明直接与利益挂钩，合理安排时间完成规定任务，不妥协，不心软、不将就。虽然看似过份，但大家都有看得见的好处。值！\u001c</p>\n<p><strong>涉及经验积累：</strong></p>\n<p>阿里云服务器开通使用</p>\n<p>阿里云OSS调用</p>\n<p>微信开放平台微信支付申请</p>\n<p>腾讯开发者平台申请</p>\n<p>新浪平台申请</p>\n<p>第三方地图使用及导航</p>\n<p>优酷SDK调用</p>\n<p>数据库创建与使用</p>\n<p>PHP标记语言使用</p>\n<p>HTML+CSS实践</p>\n<p>Bootstrap研究学习</p>\n<p>Linux WordPress的搭建</p>\n<p>视频SDK调用</p>\n<p>来一波视图：</p>\n<img src=\"/2019/03/06/heidakeng/2.png\" title=\"产品图片\">\n<img src=\"/2019/03/06/heidakeng/3.png\" title=\"产品图片\">\n<img src=\"/2019/03/06/heidakeng/4.png\" title=\"产品图片\">\n<img src=\"/2019/03/06/heidakeng/5.png\" title=\"产品图片\">\n<img src=\"/2019/03/06/heidakeng/6.png\" title=\"产品图片\">\n<img src=\"/2019/03/06/heidakeng/7.png\" title=\"产品图片\">\n<img src=\"/2019/03/06/heidakeng/8.png\" title=\"产品图片\">\n<img src=\"/2019/03/06/heidakeng/9.png\" title=\"产品图片\">","site":{"data":{}},"excerpt":"","more":"<h1 id=\"黑大坑iOS端开发体\"><a href=\"#黑大坑iOS端开发体\" class=\"headerlink\" title=\"黑大坑iOS端开发体\"></a>黑大坑iOS端开发体</h1><img src=\"/2019/03/06/heidakeng/1.png\" title=\"产品图片\">\n<p>说好听叫创业叫外水，说不好听叫折腾，本来挑50斤的人要去挑百斤的担子，自己一个人挑还不够，硬是要叫一伙人挑，我都有点佩服自己作死的勇气。</p>\n<p><strong>机缘巧合认识老板</strong></p>\n<p>不得不说，一个圈子很重要，特别是个优质的圈子。</p>\n<p>为什么ACM比赛，电子科技大学的编程就是那么牛，因为他们有传统，除了选手优质外，有那么多老司机带路，能不厉害吗？</p>\n<p>为什么同样是两年，有的人在小公司闭门造车，有的人在BAT进步神速。你是资源是远远比不上别人的，直接输在起跑线上，要追不得不付出代价。</p>\n<p>明白了之前滴滴同城开比我小还却宝马的小伙给我说过人走茶凉的道理，你走了关系不一定能带走，因为你当时建立的关系别人看重的是你背后公司的资源。所以平台特别重要，特别是优质的平台，回报超出了你的付出。</p>\n<p>头马是个优质而广阔的圈子，圈子里的人来自各行各业，而且由于有英语水平限制，进来的人算得上比较优质。在这里你的官员职位，你做的演讲级别是个很有用的铭牌。不仅仅是锻炼了你的社交能力，更是让你与其他人有不少的合作机会。于是结识了很厉害的David，通过他认识了很厉害的老G，因为我的工作和他们的需求联系起来。同样，你有某方面的需求，也会找到对应的人才。比如前段时间找职业规划师，就在群里面推荐了很优秀的阿舟老师。</p>\n<p>圈子越大，机会越多，圈子优质，人就越可靠。</p>\n<p><strong>如果产品需求和设计可以重来，我宁愿花一半的时间做这个事情</strong></p>\n<p>客户对于产品的认识是不够全面的，所以你需要帮助他确定产品的预期效果，越准确越好，好处也非常的明显：帮助他清楚的知道自己要做哪一块，比如最开始我们这边得到的信息是做一个钓鱼资讯类的App，结果到后来卖票实现就可以了。导致做了很多无用的模块，最后被一一砍去。</p>\n<p>关于界面效果一定要拿非常细致的设计图出来，原因有三：1、让他自己对看到的效果非常确信，这样后面他不会说你这个设计不如我看到的某个好看之类的2、你的开发任务更加明确，防止做重复工作和无用功。3、避免团队士气受打击，如果要推倒重做或者重要修改是非常麻烦的事情，因为不仅仅关系到个人，而是团队，从美工，到后台再到前端效果可能都需要修改，牵一发动全身。如果有临时要改的，要么列到下一个开发周期内进行。不然会造成非常混乱的结果。</p>\n<p>这方面经验严重不足，导致后面出了很多问题。</p>\n<p><strong>进度缓慢是谁的责任，不要和最好的朋友合伙开公司</strong></p>\n<p>都说亲兄弟可以明算帐，但是在真正重视的人面前说狠话真的很难，特别是中国这个环境，工作和生活是分不开的，你不可能说今天我是你老板你工作干得不好臭骂你一顿，下班就找你出来玩，唱酒KTV，大家嗨起来当上班事情没发生，太难。项目容不能差错，兄弟伙也不能将就 ，该说指正的就要去说服。我也知道这个道理，但是往往会出现执行能力太差，做事拖拉你也不好明说。他也是有势无恐，我们这么铁的关系，我没时间做，你不能强制我吧。一方面老板要求的任务，另一方面要顾全面子，左右为难。</p>\n<p>最好开始就说清楚，利益怎么分，你这个完成多少，你如果没有及时完成扣多少，如果你干不下来，那怎么办，这些不是因为相信就可以不先商量的。虽然这样开始关系会有点僵，但真的效果要好得多。</p>\n<p><strong>需要担当，更需要实际行动</strong></p>\n<p>一开始我想的合伙人模式，你完成你的模块，我完成我的模块，然后我们交接打通，项目就成了，钱也到手了，大家都高兴。但是发现这个过程中有三个很大的弊端：</p>\n<p>1、软件开发是个体系动作，不是拼积木这么简单。从需求不明确就产生错误指导开始，数据库开始设计如果我就能参与其中，就不会有两个后台各自设计自已的数据库表，也会有一套详细的数据库设计文档，字段对应。另外后台也不会出现两种不同的调用方式、数据处理不统一，后台代码提交也出现问题。为什么做后台的人往往能成为一个公司的技术总监，因为他们往往掌握了核心技术，前端只是用户显示而已。所以需要担当，去把握核心的技术，制定标准的数据处理步骤和代码规范前期相当的重要。</p>\n<p>2、有效沟通，为什么程序员会留给外界死板的印像，因为他们总是在开发的角度想问题，没有在客户的角度考虑问题，第一反应是这个该用什么来实现，或者这个东西我觉得这样挺好的，为什么你偏偏要改。以前有个段子说：什么方法让程序员自杀，那就是改三次需求。因为对于需求的理解和修改优化的目的非常的不了解，没有换位思考。在他觉技术没有问题这种情况下，你的优化方案是很难说服他的，特别是涉及我这个模块已经写了很多代码了，为什么你要改。你费了半天都可能在做无用功，另外有些时候重构要比修改来得高效。需求是不断变化的，这也是要求代码有良好拓展性和细分模块的原因所在。</p>\n<p>3、确定他能不能做，程序员的核心能力我觉得应该是不断的学习实践能力。快速尝试学习使用新鲜技术，好奇心驱动应该是很重要的一环。当项目分工时，你真的要学会去判定他到底能不能做，做得出哪个效果。因为这个关心到整个项目的进度问题，他做不出来，不愿意去学习，那么开始的所有交代，沟通白搭。中途换人可能要从零开始，损失非常惨重，他固然有原因，但是属于你决策失误，预估不足，负主要责任。</p>\n<p>合伙人制真的需要强力CP才能完成，在经验和能力缺少的情况下一味相信是不够的，而应该采取老板制，首先个人把头带好，然后强势、严格的要求每一个人和我一样做好自己的工作，开头说明直接与利益挂钩，合理安排时间完成规定任务，不妥协，不心软、不将就。虽然看似过份，但大家都有看得见的好处。值！\u001c</p>\n<p><strong>涉及经验积累：</strong></p>\n<p>阿里云服务器开通使用</p>\n<p>阿里云OSS调用</p>\n<p>微信开放平台微信支付申请</p>\n<p>腾讯开发者平台申请</p>\n<p>新浪平台申请</p>\n<p>第三方地图使用及导航</p>\n<p>优酷SDK调用</p>\n<p>数据库创建与使用</p>\n<p>PHP标记语言使用</p>\n<p>HTML+CSS实践</p>\n<p>Bootstrap研究学习</p>\n<p>Linux WordPress的搭建</p>\n<p>视频SDK调用</p>\n<p>来一波视图：</p>\n<img src=\"/2019/03/06/heidakeng/2.png\" title=\"产品图片\">\n<img src=\"/2019/03/06/heidakeng/3.png\" title=\"产品图片\">\n<img src=\"/2019/03/06/heidakeng/4.png\" title=\"产品图片\">\n<img src=\"/2019/03/06/heidakeng/5.png\" title=\"产品图片\">\n<img src=\"/2019/03/06/heidakeng/6.png\" title=\"产品图片\">\n<img src=\"/2019/03/06/heidakeng/7.png\" title=\"产品图片\">\n<img src=\"/2019/03/06/heidakeng/8.png\" title=\"产品图片\">\n<img src=\"/2019/03/06/heidakeng/9.png\" title=\"产品图片\">"},{"title":"RSS安装","date":"2019-03-06T17:31:28.000Z","_content":"\n\n## 安装feed插件\n\nhexo博客有一个专门生成RSS xml文件的插件`hexo-generator-feed`\n我们来安装它\n\n\n\n```bash\n$ npm install hexo-generator-feed\nadded 3 packages in 30.155s\n```\n\n看到added 3 packages说明安装成功了。\n\n## 启用插件\n\n在博客工程文件根目录下`_config.yml`文件中添加如下内容\n\n\n\n```bash\n# Extensions\nplugins:\n    hexo-generator-feed\n#Feed Atom\nfeed:\n    type: atom\n    path: atom.xml\n    limit: 20\n```\n\n## 生成RSS\n\n```csharp\n$ hexo g\n(node:6520) [DEP0061] DeprecationWarning: fs.SyncWriteStream is depre                                                                                                                           cated.\nINFO  Start processing\nINFO  Files loaded in 6.33 s\nINFO  Generated: atom.xml <----------成功生成atom.xml文件\nINFO  Generated: sitemap.xml\nINFO  Generated: baidusitemap.xml\nINFO  Generated: about/index.html\n......\n......\n......\n```\n\n## ![image-20210109161634042](hexo博客配置/image-20210109161634042.png)\n","source":"_posts/hexo博客配置.md","raw":"---\ntitle: RSS安装\ndate: 2019-03-06 17:31:28\ntags: rss\ncategories: 博客建站\n---\n\n\n## 安装feed插件\n\nhexo博客有一个专门生成RSS xml文件的插件`hexo-generator-feed`\n我们来安装它\n\n\n\n```bash\n$ npm install hexo-generator-feed\nadded 3 packages in 30.155s\n```\n\n看到added 3 packages说明安装成功了。\n\n## 启用插件\n\n在博客工程文件根目录下`_config.yml`文件中添加如下内容\n\n\n\n```bash\n# Extensions\nplugins:\n    hexo-generator-feed\n#Feed Atom\nfeed:\n    type: atom\n    path: atom.xml\n    limit: 20\n```\n\n## 生成RSS\n\n```csharp\n$ hexo g\n(node:6520) [DEP0061] DeprecationWarning: fs.SyncWriteStream is depre                                                                                                                           cated.\nINFO  Start processing\nINFO  Files loaded in 6.33 s\nINFO  Generated: atom.xml <----------成功生成atom.xml文件\nINFO  Generated: sitemap.xml\nINFO  Generated: baidusitemap.xml\nINFO  Generated: about/index.html\n......\n......\n......\n```\n\n## ![image-20210109161634042](hexo博客配置/image-20210109161634042.png)\n","slug":"hexo博客配置","published":1,"updated":"2021-05-14T02:01:17.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno3t001qkuo4nted3v1r","content":"<h2 id=\"安装feed插件\"><a href=\"#安装feed插件\" class=\"headerlink\" title=\"安装feed插件\"></a>安装feed插件</h2><p>hexo博客有一个专门生成RSS xml文件的插件<code>hexo-generator-feed</code><br>我们来安装它</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-feed</span><br><span class=\"line\">added 3 packages <span class=\"keyword\">in</span> 30.155s</span><br></pre></td></tr></table></figure>\n<p>看到added 3 packages说明安装成功了。</p>\n<h2 id=\"启用插件\"><a href=\"#启用插件\" class=\"headerlink\" title=\"启用插件\"></a>启用插件</h2><p>在博客工程文件根目录下<code>_config.yml</code>文件中添加如下内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\">plugins:</span><br><span class=\"line\">    hexo-generator-feed</span><br><span class=\"line\"><span class=\"comment\">#Feed Atom</span></span><br><span class=\"line\">feed:</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: atom</span><br><span class=\"line\">    path: atom.xml</span><br><span class=\"line\">    <span class=\"built_in\">limit</span>: 20</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成RSS\"><a href=\"#生成RSS\" class=\"headerlink\" title=\"生成RSS\"></a>生成RSS</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">(node:<span class=\"number\">6520</span>) [DEP0061] DeprecationWarning: fs.SyncWriteStream <span class=\"keyword\">is</span> depre                                                                                                                           cated.</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Files loaded <span class=\"keyword\">in</span> <span class=\"number\">6.33</span> s</span><br><span class=\"line\">INFO  Generated: atom.xml &lt;----------成功生成atom.xml文件</span><br><span class=\"line\">INFO  Generated: sitemap.xml</span><br><span class=\"line\">INFO  Generated: baidusitemap.xml</span><br><span class=\"line\">INFO  Generated: about/index.html</span><br><span class=\"line\">......</span><br><span class=\"line\">......</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"/2019/03/06/hexo博客配置/image-20210109161634042.png\" alt=\"image-20210109161634042\"></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装feed插件\"><a href=\"#安装feed插件\" class=\"headerlink\" title=\"安装feed插件\"></a>安装feed插件</h2><p>hexo博客有一个专门生成RSS xml文件的插件<code>hexo-generator-feed</code><br>我们来安装它</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-feed</span><br><span class=\"line\">added 3 packages <span class=\"keyword\">in</span> 30.155s</span><br></pre></td></tr></table></figure>\n<p>看到added 3 packages说明安装成功了。</p>\n<h2 id=\"启用插件\"><a href=\"#启用插件\" class=\"headerlink\" title=\"启用插件\"></a>启用插件</h2><p>在博客工程文件根目录下<code>_config.yml</code>文件中添加如下内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\">plugins:</span><br><span class=\"line\">    hexo-generator-feed</span><br><span class=\"line\"><span class=\"comment\">#Feed Atom</span></span><br><span class=\"line\">feed:</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: atom</span><br><span class=\"line\">    path: atom.xml</span><br><span class=\"line\">    <span class=\"built_in\">limit</span>: 20</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成RSS\"><a href=\"#生成RSS\" class=\"headerlink\" title=\"生成RSS\"></a>生成RSS</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">(node:<span class=\"number\">6520</span>) [DEP0061] DeprecationWarning: fs.SyncWriteStream <span class=\"keyword\">is</span> depre                                                                                                                           cated.</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Files loaded <span class=\"keyword\">in</span> <span class=\"number\">6.33</span> s</span><br><span class=\"line\">INFO  Generated: atom.xml &lt;----------成功生成atom.xml文件</span><br><span class=\"line\">INFO  Generated: sitemap.xml</span><br><span class=\"line\">INFO  Generated: baidusitemap.xml</span><br><span class=\"line\">INFO  Generated: about/index.html</span><br><span class=\"line\">......</span><br><span class=\"line\">......</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"/2019/03/06/hexo博客配置/image-20210109161634042.png\" alt=\"image-20210109161634042\"></h2>"},{"title":"iOS再次打开推送总结","date":"2019-03-06T17:42:40.000Z","_content":"","source":"_posts/iOS再次打开推送总结.md","raw":"---\ntitle: iOS再次打开推送总结\ndate: 2019-03-06 17:42:40\ntags: iOS\ncategories: 苹果开发\n---\n","slug":"iOS再次打开推送总结","published":1,"updated":"2021-05-14T02:01:17.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno3u001skuo4koi1w6i6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"homeBrew","date":"2019-03-06T17:31:14.000Z","_content":"","source":"_posts/homeBrew.md","raw":"---\ntitle: homeBrew\ndate: 2019-03-06 17:31:14\ntags:\n---\n","slug":"homeBrew","published":1,"updated":"2021-05-14T02:01:17.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno3w001wkuo4saqaogav","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"iOS_AlertController使用方法","date":"2019-03-06T17:39:50.000Z","_content":"\n###UIAlertController是iOS8引入的新特性，可以使用它代替AlertView或ActionSheet，主要方法如下：\n```\n#import <UIKit/UIViewController.h>\n\nNS_ASSUME_NONNULL_BEGIN\n//定义每个选项的特性（默认、取消、红色标记按钮）\ntypedef NS_ENUM(NSInteger, UIAlertActionStyle) {\n    UIAlertActionStyleDefault = 0,\n    UIAlertActionStyleCancel,\t\n    UIAlertActionStyleDestructive\n} NS_ENUM_AVAILABLE_IOS(8_0);\n//定义弹出框样式\ntypedef NS_ENUM(NSInteger, UIAlertControllerStyle) {\n    UIAlertControllerStyleActionSheet = 0,\n    UIAlertControllerStyleAlert\n} NS_ENUM_AVAILABLE_IOS(8_0);\n\nNS_CLASS_AVAILABLE_IOS(8_0) @interface UIAlertAction : NSObject <NSCopying>\n//初始化每个按钮选项\n+ (instancetype)actionWithTitle:(nullable NSString *)title style:(UIAlertActionStyle)style handler:(void (^ __nullable)(UIAlertAction *action))handler;\n\n@property (nullable, nonatomic, readonly) NSString *title;\n@property (nonatomic, readonly) UIAlertActionStyle style;\n@property (nonatomic, getter=isEnabled) BOOL enabled;\n\n@end\n\nNS_CLASS_AVAILABLE_IOS(8_0) @interface UIAlertController : UIViewController\n//初始化弹出框\n+ (instancetype)alertControllerWithTitle:(nullable NSString *)title message:(nullable NSString *)message preferredStyle:(UIAlertControllerStyle)preferredStyle;\n\n- (void)addAction:(UIAlertAction *)action;\n@property (nonatomic, readonly) NSArray<UIAlertAction *> *actions;\n\n@property (nonatomic, strong, nullable) UIAlertAction *preferredAction NS_AVAILABLE_IOS(9_0);\n- (void)addTextFieldWithConfigurationHandler:(void (^ __nullable)(UITextField *textField))configurationHandler;\n@property (nullable, nonatomic, readonly) NSArray<UITextField *> *textFields;\n\n@property (nullable, nonatomic, copy) NSString *title;\n@property (nullable, nonatomic, copy) NSString *message;\n\n@property (nonatomic, readonly) UIAlertControllerStyle preferredStyle;\n\n@end\n\nNS_ASSUME_NONNULL_END\n```\n添加方法：\n\n```\n-(void)alertControllerShow{\n    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@\"好分期\" message:@\"非常好的投资平台\" preferredStyle:UIAlertControllerStyleAlert];\n    [alertController addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n        NSLog(@\"%@\",textField.text);\n        textField.placeholder = @\"addSomeText\";\n    }];\n    \n    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@\"取消\" style:UIAlertActionStyleCancel handler:nil];\n    [alertController addAction:cancelAction];\n    \n    UIAlertAction *signAction = [UIAlertAction actionWithTitle:@\"签到\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n\n    }];\n    [alertController addAction:signAction];\n    \n    UIAlertAction *changePasswordAction = [UIAlertAction actionWithTitle:@\"修改密码\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n    }];\n    [alertController addAction:changePasswordAction];\n    \n    NSString *cachesPath = [CacheOperation getCachesPath];///获得缓存路径\n    float cacheSize = [CacheOperation getCacheSizeAtPath:cachesPath];///获得缓存大小\n    if (cacheSize > 10.0) {///如果缓存大于10M则显示清除缓存按钮\n        UIAlertAction *clearCacheAction = [UIAlertAction actionWithTitle:[NSString stringWithFormat:@\"清除缓存 - %.2fM\", cacheSize] style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n            [CacheOperation clearCacheAtPath:cachesPath];///清除缓存\n        }];\n        [alertController addAction:clearCacheAction];\n    }\n    \n    UIAlertAction *exitLoginAction = [UIAlertAction actionWithTitle:@\"退出登录\" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {\n        //UIAlertActionStyleDestructive：毁灭性按钮，红色标注\n\n    }];\n    [alertController addAction:exitLoginAction];\n    \n    [self presentViewController:alertController animated:YES completion:nil];\n}\n```\n\n\n###不同于UIAlertView,ActionSheet要去设置委托，代码块方式直接使用，非常方便","source":"_posts/iOS-AlertController使用方法.md","raw":"---\ntitle: iOS_AlertController使用方法\ndate: 2019-03-06 17:39:50\ntags: iOS\ncategories: 苹果开发\n---\n\n###UIAlertController是iOS8引入的新特性，可以使用它代替AlertView或ActionSheet，主要方法如下：\n```\n#import <UIKit/UIViewController.h>\n\nNS_ASSUME_NONNULL_BEGIN\n//定义每个选项的特性（默认、取消、红色标记按钮）\ntypedef NS_ENUM(NSInteger, UIAlertActionStyle) {\n    UIAlertActionStyleDefault = 0,\n    UIAlertActionStyleCancel,\t\n    UIAlertActionStyleDestructive\n} NS_ENUM_AVAILABLE_IOS(8_0);\n//定义弹出框样式\ntypedef NS_ENUM(NSInteger, UIAlertControllerStyle) {\n    UIAlertControllerStyleActionSheet = 0,\n    UIAlertControllerStyleAlert\n} NS_ENUM_AVAILABLE_IOS(8_0);\n\nNS_CLASS_AVAILABLE_IOS(8_0) @interface UIAlertAction : NSObject <NSCopying>\n//初始化每个按钮选项\n+ (instancetype)actionWithTitle:(nullable NSString *)title style:(UIAlertActionStyle)style handler:(void (^ __nullable)(UIAlertAction *action))handler;\n\n@property (nullable, nonatomic, readonly) NSString *title;\n@property (nonatomic, readonly) UIAlertActionStyle style;\n@property (nonatomic, getter=isEnabled) BOOL enabled;\n\n@end\n\nNS_CLASS_AVAILABLE_IOS(8_0) @interface UIAlertController : UIViewController\n//初始化弹出框\n+ (instancetype)alertControllerWithTitle:(nullable NSString *)title message:(nullable NSString *)message preferredStyle:(UIAlertControllerStyle)preferredStyle;\n\n- (void)addAction:(UIAlertAction *)action;\n@property (nonatomic, readonly) NSArray<UIAlertAction *> *actions;\n\n@property (nonatomic, strong, nullable) UIAlertAction *preferredAction NS_AVAILABLE_IOS(9_0);\n- (void)addTextFieldWithConfigurationHandler:(void (^ __nullable)(UITextField *textField))configurationHandler;\n@property (nullable, nonatomic, readonly) NSArray<UITextField *> *textFields;\n\n@property (nullable, nonatomic, copy) NSString *title;\n@property (nullable, nonatomic, copy) NSString *message;\n\n@property (nonatomic, readonly) UIAlertControllerStyle preferredStyle;\n\n@end\n\nNS_ASSUME_NONNULL_END\n```\n添加方法：\n\n```\n-(void)alertControllerShow{\n    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@\"好分期\" message:@\"非常好的投资平台\" preferredStyle:UIAlertControllerStyleAlert];\n    [alertController addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n        NSLog(@\"%@\",textField.text);\n        textField.placeholder = @\"addSomeText\";\n    }];\n    \n    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@\"取消\" style:UIAlertActionStyleCancel handler:nil];\n    [alertController addAction:cancelAction];\n    \n    UIAlertAction *signAction = [UIAlertAction actionWithTitle:@\"签到\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n\n    }];\n    [alertController addAction:signAction];\n    \n    UIAlertAction *changePasswordAction = [UIAlertAction actionWithTitle:@\"修改密码\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n    }];\n    [alertController addAction:changePasswordAction];\n    \n    NSString *cachesPath = [CacheOperation getCachesPath];///获得缓存路径\n    float cacheSize = [CacheOperation getCacheSizeAtPath:cachesPath];///获得缓存大小\n    if (cacheSize > 10.0) {///如果缓存大于10M则显示清除缓存按钮\n        UIAlertAction *clearCacheAction = [UIAlertAction actionWithTitle:[NSString stringWithFormat:@\"清除缓存 - %.2fM\", cacheSize] style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n            [CacheOperation clearCacheAtPath:cachesPath];///清除缓存\n        }];\n        [alertController addAction:clearCacheAction];\n    }\n    \n    UIAlertAction *exitLoginAction = [UIAlertAction actionWithTitle:@\"退出登录\" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {\n        //UIAlertActionStyleDestructive：毁灭性按钮，红色标注\n\n    }];\n    [alertController addAction:exitLoginAction];\n    \n    [self presentViewController:alertController animated:YES completion:nil];\n}\n```\n\n\n###不同于UIAlertView,ActionSheet要去设置委托，代码块方式直接使用，非常方便","slug":"iOS-AlertController使用方法","published":1,"updated":"2021-05-14T02:01:17.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno3y001zkuo4svsajg5s","content":"<p>###UIAlertController是iOS8引入的新特性，可以使用它代替AlertView或ActionSheet，主要方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit/UIViewController.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">NS_ASSUME_NONNULL_BEGIN</span><br><span class=\"line\">//定义每个选项的特性（默认、取消、红色标记按钮）</span><br><span class=\"line\">typedef NS_ENUM(NSInteger, UIAlertActionStyle) &#123;</span><br><span class=\"line\">    UIAlertActionStyleDefault = 0,</span><br><span class=\"line\">    UIAlertActionStyleCancel,\t</span><br><span class=\"line\">    UIAlertActionStyleDestructive</span><br><span class=\"line\">&#125; NS_ENUM_AVAILABLE_IOS(8_0);</span><br><span class=\"line\">//定义弹出框样式</span><br><span class=\"line\">typedef NS_ENUM(NSInteger, UIAlertControllerStyle) &#123;</span><br><span class=\"line\">    UIAlertControllerStyleActionSheet = 0,</span><br><span class=\"line\">    UIAlertControllerStyleAlert</span><br><span class=\"line\">&#125; NS_ENUM_AVAILABLE_IOS(8_0);</span><br><span class=\"line\"></span><br><span class=\"line\">NS_CLASS_AVAILABLE_IOS(8_0) @interface UIAlertAction : NSObject &lt;NSCopying&gt;</span><br><span class=\"line\">//初始化每个按钮选项</span><br><span class=\"line\">+ (instancetype)actionWithTitle:(nullable NSString *)title style:(UIAlertActionStyle)style handler:(void (^ __nullable)(UIAlertAction *action))handler;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nullable, nonatomic, readonly) NSString *title;</span><br><span class=\"line\">@property (nonatomic, readonly) UIAlertActionStyle style;</span><br><span class=\"line\">@property (nonatomic, getter=isEnabled) BOOL enabled;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">NS_CLASS_AVAILABLE_IOS(8_0) @interface UIAlertController : UIViewController</span><br><span class=\"line\">//初始化弹出框</span><br><span class=\"line\">+ (instancetype)alertControllerWithTitle:(nullable NSString *)title message:(nullable NSString *)message preferredStyle:(UIAlertControllerStyle)preferredStyle;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)addAction:(UIAlertAction *)action;</span><br><span class=\"line\">@property (nonatomic, readonly) NSArray&lt;UIAlertAction *&gt; *actions;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, strong, nullable) UIAlertAction *preferredAction NS_AVAILABLE_IOS(9_0);</span><br><span class=\"line\">- (void)addTextFieldWithConfigurationHandler:(void (^ __nullable)(UITextField *textField))configurationHandler;</span><br><span class=\"line\">@property (nullable, nonatomic, readonly) NSArray&lt;UITextField *&gt; *textFields;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nullable, nonatomic, copy) NSString *title;</span><br><span class=\"line\">@property (nullable, nonatomic, copy) NSString *message;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, readonly) UIAlertControllerStyle preferredStyle;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure></p>\n<p>添加方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)alertControllerShow&#123;</span><br><span class=\"line\">    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@&quot;好分期&quot; message:@&quot;非常好的投资平台&quot; preferredStyle:UIAlertControllerStyleAlert];</span><br><span class=\"line\">    [alertController addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) &#123;</span><br><span class=\"line\">        NSLog(@&quot;%@&quot;,textField.text);</span><br><span class=\"line\">        textField.placeholder = @&quot;addSomeText&quot;;</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@&quot;取消&quot; style:UIAlertActionStyleCancel handler:nil];</span><br><span class=\"line\">    [alertController addAction:cancelAction];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIAlertAction *signAction = [UIAlertAction actionWithTitle:@&quot;签到&quot; style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    [alertController addAction:signAction];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIAlertAction *changePasswordAction = [UIAlertAction actionWithTitle:@&quot;修改密码&quot; style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) &#123;</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    [alertController addAction:changePasswordAction];</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSString *cachesPath = [CacheOperation getCachesPath];///获得缓存路径</span><br><span class=\"line\">    float cacheSize = [CacheOperation getCacheSizeAtPath:cachesPath];///获得缓存大小</span><br><span class=\"line\">    if (cacheSize &gt; 10.0) &#123;///如果缓存大于10M则显示清除缓存按钮</span><br><span class=\"line\">        UIAlertAction *clearCacheAction = [UIAlertAction actionWithTitle:[NSString stringWithFormat:@&quot;清除缓存 - %.2fM&quot;, cacheSize] style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) &#123;</span><br><span class=\"line\">            [CacheOperation clearCacheAtPath:cachesPath];///清除缓存</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">        [alertController addAction:clearCacheAction];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIAlertAction *exitLoginAction = [UIAlertAction actionWithTitle:@&quot;退出登录&quot; style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) &#123;</span><br><span class=\"line\">        //UIAlertActionStyleDestructive：毁灭性按钮，红色标注</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    [alertController addAction:exitLoginAction];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [self presentViewController:alertController animated:YES completion:nil];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>###不同于UIAlertView,ActionSheet要去设置委托，代码块方式直接使用，非常方便</p>\n","site":{"data":{}},"excerpt":"","more":"<p>###UIAlertController是iOS8引入的新特性，可以使用它代替AlertView或ActionSheet，主要方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit/UIViewController.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">NS_ASSUME_NONNULL_BEGIN</span><br><span class=\"line\">//定义每个选项的特性（默认、取消、红色标记按钮）</span><br><span class=\"line\">typedef NS_ENUM(NSInteger, UIAlertActionStyle) &#123;</span><br><span class=\"line\">    UIAlertActionStyleDefault = 0,</span><br><span class=\"line\">    UIAlertActionStyleCancel,\t</span><br><span class=\"line\">    UIAlertActionStyleDestructive</span><br><span class=\"line\">&#125; NS_ENUM_AVAILABLE_IOS(8_0);</span><br><span class=\"line\">//定义弹出框样式</span><br><span class=\"line\">typedef NS_ENUM(NSInteger, UIAlertControllerStyle) &#123;</span><br><span class=\"line\">    UIAlertControllerStyleActionSheet = 0,</span><br><span class=\"line\">    UIAlertControllerStyleAlert</span><br><span class=\"line\">&#125; NS_ENUM_AVAILABLE_IOS(8_0);</span><br><span class=\"line\"></span><br><span class=\"line\">NS_CLASS_AVAILABLE_IOS(8_0) @interface UIAlertAction : NSObject &lt;NSCopying&gt;</span><br><span class=\"line\">//初始化每个按钮选项</span><br><span class=\"line\">+ (instancetype)actionWithTitle:(nullable NSString *)title style:(UIAlertActionStyle)style handler:(void (^ __nullable)(UIAlertAction *action))handler;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nullable, nonatomic, readonly) NSString *title;</span><br><span class=\"line\">@property (nonatomic, readonly) UIAlertActionStyle style;</span><br><span class=\"line\">@property (nonatomic, getter=isEnabled) BOOL enabled;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">NS_CLASS_AVAILABLE_IOS(8_0) @interface UIAlertController : UIViewController</span><br><span class=\"line\">//初始化弹出框</span><br><span class=\"line\">+ (instancetype)alertControllerWithTitle:(nullable NSString *)title message:(nullable NSString *)message preferredStyle:(UIAlertControllerStyle)preferredStyle;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)addAction:(UIAlertAction *)action;</span><br><span class=\"line\">@property (nonatomic, readonly) NSArray&lt;UIAlertAction *&gt; *actions;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, strong, nullable) UIAlertAction *preferredAction NS_AVAILABLE_IOS(9_0);</span><br><span class=\"line\">- (void)addTextFieldWithConfigurationHandler:(void (^ __nullable)(UITextField *textField))configurationHandler;</span><br><span class=\"line\">@property (nullable, nonatomic, readonly) NSArray&lt;UITextField *&gt; *textFields;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nullable, nonatomic, copy) NSString *title;</span><br><span class=\"line\">@property (nullable, nonatomic, copy) NSString *message;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, readonly) UIAlertControllerStyle preferredStyle;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure></p>\n<p>添加方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)alertControllerShow&#123;</span><br><span class=\"line\">    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@&quot;好分期&quot; message:@&quot;非常好的投资平台&quot; preferredStyle:UIAlertControllerStyleAlert];</span><br><span class=\"line\">    [alertController addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) &#123;</span><br><span class=\"line\">        NSLog(@&quot;%@&quot;,textField.text);</span><br><span class=\"line\">        textField.placeholder = @&quot;addSomeText&quot;;</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@&quot;取消&quot; style:UIAlertActionStyleCancel handler:nil];</span><br><span class=\"line\">    [alertController addAction:cancelAction];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIAlertAction *signAction = [UIAlertAction actionWithTitle:@&quot;签到&quot; style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    [alertController addAction:signAction];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIAlertAction *changePasswordAction = [UIAlertAction actionWithTitle:@&quot;修改密码&quot; style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) &#123;</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    [alertController addAction:changePasswordAction];</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSString *cachesPath = [CacheOperation getCachesPath];///获得缓存路径</span><br><span class=\"line\">    float cacheSize = [CacheOperation getCacheSizeAtPath:cachesPath];///获得缓存大小</span><br><span class=\"line\">    if (cacheSize &gt; 10.0) &#123;///如果缓存大于10M则显示清除缓存按钮</span><br><span class=\"line\">        UIAlertAction *clearCacheAction = [UIAlertAction actionWithTitle:[NSString stringWithFormat:@&quot;清除缓存 - %.2fM&quot;, cacheSize] style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) &#123;</span><br><span class=\"line\">            [CacheOperation clearCacheAtPath:cachesPath];///清除缓存</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">        [alertController addAction:clearCacheAction];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIAlertAction *exitLoginAction = [UIAlertAction actionWithTitle:@&quot;退出登录&quot; style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) &#123;</span><br><span class=\"line\">        //UIAlertActionStyleDestructive：毁灭性按钮，红色标注</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    [alertController addAction:exitLoginAction];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [self presentViewController:alertController animated:YES completion:nil];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>###不同于UIAlertView,ActionSheet要去设置委托，代码块方式直接使用，非常方便</p>\n"},{"title":"item的简单高效使用","date":"2019-03-06T17:35:46.000Z","_content":"\n在项目开发中我们往往需要进行模型设计，为一个对象配置多个属性，以前的方法前后端都需要分别进行设置，往往还容易出错，重复编写，实际上谷歌早就提供了一套成熟可行的方法可以统一开发中的模型，那就是：\n[Protobuf](https://developers.google.com/protocol-buffers/docs/proto?hl=zh-cn)\n\n先在Github下载[源代码](https://github.com/protocolbuffers/protobuf)\n下载后通过命令行进行安装：\n    \n     1 $ ./autogen.sh\n      2 $ ./configure\n      3 $ make\n      4 $ make check\n      5 $ sudo make install\n\n安装耗时较多，完成最后一步后可以看到命令行中多了protoc这个命令，主要的作用是把proto源文件转化为目标文件（包括Java\\python\\oc\\go）中的类型定义文件。\n主要命令示例：\n    \n    //DIR为路径\n    protoc --proto_path=$DIR --objc_out=$DIR  Define.proto\n    \n     --cpp_out=OUT_DIR           Generate C++ header and source.\n     --csharp_out=OUT_DIR        Generate C# source file.\n     --java_out=OUT_DIR          Generate Java source file.\n     --js_out=OUT_DIR            Generate JavaScript source.\n     --objc_out=OUT_DIR          Generate Objective C header and source.\n     --php_out=OUT_DIR           Generate PHP source file.\n     --python_out=OUT_DIR        Generate Python source file.\n     --ruby_out=OUT_DIR          Generate Ruby source file.\n\n以OC为例，转换成功后会生成.h和.m文件，把生成后的放入项目中，在项目Pod中引入：\n  pod 'Protobuf', '~> 3.4.0'\n\n如果手动加入需要添加:-fno-objc-arc  因为该类不支https://blog.csdn.net/u010019717/article/details/44830601持ARC\n配置好会在项目中就可以直接使用该类了，特别方便。\n\n关于proto书写格式\n    \n    syntax = \"proto2\";\n    \n    package XHR.Group;\n    import \"XHR.BaseDefine.proto\";\n    option optimize_for = LITE_RUNTIME;\n    \n    // CID_GROUP_REQ_GROUP_LIST             0x0301      获取群列表\n    message XHRGroupListReq{\n        \trequired string uid = 1;\n        \trequired uint64 latest_update_time = 2;\n    }\n    \n    // CID_GROUP_RSP_GROUP_LIST             0x0302   \n    message XHRGroupListRsp{\n    \t    required XHR.BaseDefine.ResultType result_code = 1;\n        required string result_string = 2;\n        required string uid = 3;\n        repeated XHR.BaseDefine.GroupInfo group_list = 4;\n        required uint64 latest_update_time = 5;\n    }\n\n参考文章：\n[Protocol Buffers(Protobuf)开发者指南---概览](https://blog.csdn.net/u010019717/article/details/44830573)\n[Protobuf3语言指南](https://blog.csdn.net/u011518120/article/details/54604615#JSONMapping)\n [Protobuf 从入门到实战](https://www.cnblogs.com/NeilZhang/p/8410589.html)","source":"_posts/item的简单高效使用.md","raw":"---\ntitle: item的简单高效使用\ndate: 2019-03-06 17:35:46\ntags: item\ncategories: 编程工具\n---\n\n在项目开发中我们往往需要进行模型设计，为一个对象配置多个属性，以前的方法前后端都需要分别进行设置，往往还容易出错，重复编写，实际上谷歌早就提供了一套成熟可行的方法可以统一开发中的模型，那就是：\n[Protobuf](https://developers.google.com/protocol-buffers/docs/proto?hl=zh-cn)\n\n先在Github下载[源代码](https://github.com/protocolbuffers/protobuf)\n下载后通过命令行进行安装：\n    \n     1 $ ./autogen.sh\n      2 $ ./configure\n      3 $ make\n      4 $ make check\n      5 $ sudo make install\n\n安装耗时较多，完成最后一步后可以看到命令行中多了protoc这个命令，主要的作用是把proto源文件转化为目标文件（包括Java\\python\\oc\\go）中的类型定义文件。\n主要命令示例：\n    \n    //DIR为路径\n    protoc --proto_path=$DIR --objc_out=$DIR  Define.proto\n    \n     --cpp_out=OUT_DIR           Generate C++ header and source.\n     --csharp_out=OUT_DIR        Generate C# source file.\n     --java_out=OUT_DIR          Generate Java source file.\n     --js_out=OUT_DIR            Generate JavaScript source.\n     --objc_out=OUT_DIR          Generate Objective C header and source.\n     --php_out=OUT_DIR           Generate PHP source file.\n     --python_out=OUT_DIR        Generate Python source file.\n     --ruby_out=OUT_DIR          Generate Ruby source file.\n\n以OC为例，转换成功后会生成.h和.m文件，把生成后的放入项目中，在项目Pod中引入：\n  pod 'Protobuf', '~> 3.4.0'\n\n如果手动加入需要添加:-fno-objc-arc  因为该类不支https://blog.csdn.net/u010019717/article/details/44830601持ARC\n配置好会在项目中就可以直接使用该类了，特别方便。\n\n关于proto书写格式\n    \n    syntax = \"proto2\";\n    \n    package XHR.Group;\n    import \"XHR.BaseDefine.proto\";\n    option optimize_for = LITE_RUNTIME;\n    \n    // CID_GROUP_REQ_GROUP_LIST             0x0301      获取群列表\n    message XHRGroupListReq{\n        \trequired string uid = 1;\n        \trequired uint64 latest_update_time = 2;\n    }\n    \n    // CID_GROUP_RSP_GROUP_LIST             0x0302   \n    message XHRGroupListRsp{\n    \t    required XHR.BaseDefine.ResultType result_code = 1;\n        required string result_string = 2;\n        required string uid = 3;\n        repeated XHR.BaseDefine.GroupInfo group_list = 4;\n        required uint64 latest_update_time = 5;\n    }\n\n参考文章：\n[Protocol Buffers(Protobuf)开发者指南---概览](https://blog.csdn.net/u010019717/article/details/44830573)\n[Protobuf3语言指南](https://blog.csdn.net/u011518120/article/details/54604615#JSONMapping)\n [Protobuf 从入门到实战](https://www.cnblogs.com/NeilZhang/p/8410589.html)","slug":"item的简单高效使用","published":1,"updated":"2021-05-14T02:01:17.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno410023kuo49lrtbwdu","content":"<p>在项目开发中我们往往需要进行模型设计，为一个对象配置多个属性，以前的方法前后端都需要分别进行设置，往往还容易出错，重复编写，实际上谷歌早就提供了一套成熟可行的方法可以统一开发中的模型，那就是：<br><a href=\"https://developers.google.com/protocol-buffers/docs/proto?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">Protobuf</a></p>\n<p>先在Github下载<a href=\"https://github.com/protocolbuffers/protobuf\" target=\"_blank\" rel=\"noopener\">源代码</a><br>下载后通过命令行进行安装：</p>\n<pre><code>1 $ ./autogen.sh\n 2 $ ./configure\n 3 $ make\n 4 $ make check\n 5 $ sudo make install\n</code></pre><p>安装耗时较多，完成最后一步后可以看到命令行中多了protoc这个命令，主要的作用是把proto源文件转化为目标文件（包括Java\\python\\oc\\go）中的类型定义文件。<br>主要命令示例：</p>\n<pre><code>//DIR为路径\nprotoc --proto_path=$DIR --objc_out=$DIR  Define.proto\n\n --cpp_out=OUT_DIR           Generate C++ header and source.\n --csharp_out=OUT_DIR        Generate C# source file.\n --java_out=OUT_DIR          Generate Java source file.\n --js_out=OUT_DIR            Generate JavaScript source.\n --objc_out=OUT_DIR          Generate Objective C header and source.\n --php_out=OUT_DIR           Generate PHP source file.\n --python_out=OUT_DIR        Generate Python source file.\n --ruby_out=OUT_DIR          Generate Ruby source file.\n</code></pre><p>以OC为例，转换成功后会生成.h和.m文件，把生成后的放入项目中，在项目Pod中引入：<br>  pod ‘Protobuf’, ‘~&gt; 3.4.0’</p>\n<p>如果手动加入需要添加:-fno-objc-arc  因为该类不支<a href=\"https://blog.csdn.net/u010019717/article/details/44830601持ARC\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010019717/article/details/44830601持ARC</a><br>配置好会在项目中就可以直接使用该类了，特别方便。</p>\n<p>关于proto书写格式</p>\n<pre><code>syntax = &quot;proto2&quot;;\n\npackage XHR.Group;\nimport &quot;XHR.BaseDefine.proto&quot;;\noption optimize_for = LITE_RUNTIME;\n\n// CID_GROUP_REQ_GROUP_LIST             0x0301      获取群列表\nmessage XHRGroupListReq{\n        required string uid = 1;\n        required uint64 latest_update_time = 2;\n}\n\n// CID_GROUP_RSP_GROUP_LIST             0x0302   \nmessage XHRGroupListRsp{\n        required XHR.BaseDefine.ResultType result_code = 1;\n    required string result_string = 2;\n    required string uid = 3;\n    repeated XHR.BaseDefine.GroupInfo group_list = 4;\n    required uint64 latest_update_time = 5;\n}\n</code></pre><p>参考文章：<br><a href=\"https://blog.csdn.net/u010019717/article/details/44830573\" target=\"_blank\" rel=\"noopener\">Protocol Buffers(Protobuf)开发者指南—概览</a><br><a href=\"https://blog.csdn.net/u011518120/article/details/54604615#JSONMapping\" target=\"_blank\" rel=\"noopener\">Protobuf3语言指南</a><br> <a href=\"https://www.cnblogs.com/NeilZhang/p/8410589.html\" target=\"_blank\" rel=\"noopener\">Protobuf 从入门到实战</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在项目开发中我们往往需要进行模型设计，为一个对象配置多个属性，以前的方法前后端都需要分别进行设置，往往还容易出错，重复编写，实际上谷歌早就提供了一套成熟可行的方法可以统一开发中的模型，那就是：<br><a href=\"https://developers.google.com/protocol-buffers/docs/proto?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">Protobuf</a></p>\n<p>先在Github下载<a href=\"https://github.com/protocolbuffers/protobuf\" target=\"_blank\" rel=\"noopener\">源代码</a><br>下载后通过命令行进行安装：</p>\n<pre><code>1 $ ./autogen.sh\n 2 $ ./configure\n 3 $ make\n 4 $ make check\n 5 $ sudo make install\n</code></pre><p>安装耗时较多，完成最后一步后可以看到命令行中多了protoc这个命令，主要的作用是把proto源文件转化为目标文件（包括Java\\python\\oc\\go）中的类型定义文件。<br>主要命令示例：</p>\n<pre><code>//DIR为路径\nprotoc --proto_path=$DIR --objc_out=$DIR  Define.proto\n\n --cpp_out=OUT_DIR           Generate C++ header and source.\n --csharp_out=OUT_DIR        Generate C# source file.\n --java_out=OUT_DIR          Generate Java source file.\n --js_out=OUT_DIR            Generate JavaScript source.\n --objc_out=OUT_DIR          Generate Objective C header and source.\n --php_out=OUT_DIR           Generate PHP source file.\n --python_out=OUT_DIR        Generate Python source file.\n --ruby_out=OUT_DIR          Generate Ruby source file.\n</code></pre><p>以OC为例，转换成功后会生成.h和.m文件，把生成后的放入项目中，在项目Pod中引入：<br>  pod ‘Protobuf’, ‘~&gt; 3.4.0’</p>\n<p>如果手动加入需要添加:-fno-objc-arc  因为该类不支<a href=\"https://blog.csdn.net/u010019717/article/details/44830601持ARC\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010019717/article/details/44830601持ARC</a><br>配置好会在项目中就可以直接使用该类了，特别方便。</p>\n<p>关于proto书写格式</p>\n<pre><code>syntax = &quot;proto2&quot;;\n\npackage XHR.Group;\nimport &quot;XHR.BaseDefine.proto&quot;;\noption optimize_for = LITE_RUNTIME;\n\n// CID_GROUP_REQ_GROUP_LIST             0x0301      获取群列表\nmessage XHRGroupListReq{\n        required string uid = 1;\n        required uint64 latest_update_time = 2;\n}\n\n// CID_GROUP_RSP_GROUP_LIST             0x0302   \nmessage XHRGroupListRsp{\n        required XHR.BaseDefine.ResultType result_code = 1;\n    required string result_string = 2;\n    required string uid = 3;\n    repeated XHR.BaseDefine.GroupInfo group_list = 4;\n    required uint64 latest_update_time = 5;\n}\n</code></pre><p>参考文章：<br><a href=\"https://blog.csdn.net/u010019717/article/details/44830573\" target=\"_blank\" rel=\"noopener\">Protocol Buffers(Protobuf)开发者指南—概览</a><br><a href=\"https://blog.csdn.net/u011518120/article/details/54604615#JSONMapping\" target=\"_blank\" rel=\"noopener\">Protobuf3语言指南</a><br> <a href=\"https://www.cnblogs.com/NeilZhang/p/8410589.html\" target=\"_blank\" rel=\"noopener\">Protobuf 从入门到实战</a></p>\n"},{"title":"iOS端本地sqlite批量插入对比","date":"2019-03-06T17:42:54.000Z","_content":"\n###1、Sqlite优势明显\niOS端本地数据库一般用sqlite,而且相对于plist、userdefault、文本存储等，使用数据库方便大量数据的操作，而且与后台数据库具有一致性，减少中间不必要的转换，适应能力强。配合FMDB来使用，非常的方便，有一点需要在App内部空间创建.sqlite文件，如果去包含资源文件是可读不可写的。\n###2、什么文件适合数据库\n对于常见的行政区域，由于可能会出现数据相应的调整，虽然不是很频繁，但是如果保存在本地会影响相关的业务。比如成都这几年分出了天府新区，郫县改为了区，谁能保证以后会不会还有大动作，所以从后台获取较妥，为了避免不必要的数据请求，App启动前可以进行版本检查，判断是否对某些文件进行更新。\n###3、放在数据库要注意的事情 \n  . 数据库句柄的引用和关闭，每次打开是要判断是否数据库可用，用完后即时关闭，避免资源占用\n  . 可以独立出来统一管理，比如通知消息一般会存数据库，那么通知的增删查改可以放数据库，地址查对应省市区也可以，可以采用一个单例来统一管理.\n  . 性能和效率\n\n      dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\n            dispatch_sync(queue, ^{\n                [dataBase open];\n                for (NSInteger index = 0; index < contentArr.count; index++) {\n                    NSDictionary *dic = [contentArr objectAtIndex:index];\n                    BOOL resulat = [dataBase executeUpdate:@\"INSERT INTO address(L0_CMT,L0_ID,L1_CMT,L1_ID,L2_CMT,L2_ID,L3_CMT,L3_ID,P_ID) VALUES(?,?,?,?,?,?,?,?,?);\",[dic objectForKey:@\"L0_CMT\"]\n                                    ,[dic objectForKey:@\"L0_ID\"]\n                                    ,[dic objectForKey:@\"L1_CMT\"]\n                                    ,[dic objectForKey:@\"L1_ID\"]\n                                    ,[dic objectForKey:@\"L2_CMT\"]\n                                    ,[dic objectForKey:@\"L2_ID\"]\n                                    ,[dic objectForKey:@\"L3_CMT\"]\n                                    ,[dic objectForKey:@\"L3_ID\"]\n                                    ,[dic objectForKey:@\"P_ID\"]];\n                    if (resulat) {\n                    }\n                }\n                [dataBase close];\n      );\n如上图所示看似没有问题，实际上暗茂杀机。之前使用dispatch_async来进行异步数据操作完成批量数据写入，但是运行时报错无法打开数据库句柄，推断数据库是线程安全，不允许多个线程同时对其进行操作，所以对数据库的操作应该放在主线程中。\n\n问题又来了，放在主线程通过全局串行队列进行的时候，可能会导致操作卡顿，因为省市区几千条数据，我是循环插入的，那该怎么办，于是有了后面的批量插入，效率快多了\n\n             [dataBase setShouldCacheStatements:YES];//是否应该缓存插入描述\n                static NSString *insertSQLStatment = @\"INSERT INTO address(L0_CMT,L0_ID,L1_CMT,L1_ID,L2_CMT,L2_ID,L3_CMT,L3_ID,P_ID) VALUES(?,?,?,?,?,?,?,?,?);\";\n                [dataBase beginTransaction]; //启动事务\n                for (NSDictionary *dic in contentArr)\n                {\n                    [dataBase executeUpdate:insertSQLStatment withArgumentsInArray:@[\n                                                                                     [dic objectForKey:@\"L0_CMT\"]\n                                                                                     ,[dic objectForKey:@\"L0_ID\"]\n                                                                                      ,[dic objectForKey:@\"L1_CMT\"]\n                                                                                     ,[dic objectForKey:@\"L1_ID\"]\n                                                                                     ,[dic objectForKey:@\"L2_CMT\"]\n                                                                                     ,[dic objectForKey:@\"L2_ID\"]\n                                                                                     ,[dic objectForKey:@\"L3_CMT\"]\n                                                                                     ,[dic objectForKey:@\"L3_ID\"]\n                                                                                    ,[dic objectForKey:@\"P_ID\"]]\n                                                                                     ];\n                }\n                [dataBase commit]; //开始执行\n                [dataBase close];\n\n事务对于大批量操作太管用了，主要是快，这样就算有阻塞，时间短得可怜，用户无法察觉。\n\n欢迎讨论交流","source":"_posts/iOS端本地sqlite批量插入对比.md","raw":"---\ntitle: iOS端本地sqlite批量插入对比\ndate: 2019-03-06 17:42:54\ntags: iOS\ncategories: 苹果开发\n---\n\n###1、Sqlite优势明显\niOS端本地数据库一般用sqlite,而且相对于plist、userdefault、文本存储等，使用数据库方便大量数据的操作，而且与后台数据库具有一致性，减少中间不必要的转换，适应能力强。配合FMDB来使用，非常的方便，有一点需要在App内部空间创建.sqlite文件，如果去包含资源文件是可读不可写的。\n###2、什么文件适合数据库\n对于常见的行政区域，由于可能会出现数据相应的调整，虽然不是很频繁，但是如果保存在本地会影响相关的业务。比如成都这几年分出了天府新区，郫县改为了区，谁能保证以后会不会还有大动作，所以从后台获取较妥，为了避免不必要的数据请求，App启动前可以进行版本检查，判断是否对某些文件进行更新。\n###3、放在数据库要注意的事情 \n  . 数据库句柄的引用和关闭，每次打开是要判断是否数据库可用，用完后即时关闭，避免资源占用\n  . 可以独立出来统一管理，比如通知消息一般会存数据库，那么通知的增删查改可以放数据库，地址查对应省市区也可以，可以采用一个单例来统一管理.\n  . 性能和效率\n\n      dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\n            dispatch_sync(queue, ^{\n                [dataBase open];\n                for (NSInteger index = 0; index < contentArr.count; index++) {\n                    NSDictionary *dic = [contentArr objectAtIndex:index];\n                    BOOL resulat = [dataBase executeUpdate:@\"INSERT INTO address(L0_CMT,L0_ID,L1_CMT,L1_ID,L2_CMT,L2_ID,L3_CMT,L3_ID,P_ID) VALUES(?,?,?,?,?,?,?,?,?);\",[dic objectForKey:@\"L0_CMT\"]\n                                    ,[dic objectForKey:@\"L0_ID\"]\n                                    ,[dic objectForKey:@\"L1_CMT\"]\n                                    ,[dic objectForKey:@\"L1_ID\"]\n                                    ,[dic objectForKey:@\"L2_CMT\"]\n                                    ,[dic objectForKey:@\"L2_ID\"]\n                                    ,[dic objectForKey:@\"L3_CMT\"]\n                                    ,[dic objectForKey:@\"L3_ID\"]\n                                    ,[dic objectForKey:@\"P_ID\"]];\n                    if (resulat) {\n                    }\n                }\n                [dataBase close];\n      );\n如上图所示看似没有问题，实际上暗茂杀机。之前使用dispatch_async来进行异步数据操作完成批量数据写入，但是运行时报错无法打开数据库句柄，推断数据库是线程安全，不允许多个线程同时对其进行操作，所以对数据库的操作应该放在主线程中。\n\n问题又来了，放在主线程通过全局串行队列进行的时候，可能会导致操作卡顿，因为省市区几千条数据，我是循环插入的，那该怎么办，于是有了后面的批量插入，效率快多了\n\n             [dataBase setShouldCacheStatements:YES];//是否应该缓存插入描述\n                static NSString *insertSQLStatment = @\"INSERT INTO address(L0_CMT,L0_ID,L1_CMT,L1_ID,L2_CMT,L2_ID,L3_CMT,L3_ID,P_ID) VALUES(?,?,?,?,?,?,?,?,?);\";\n                [dataBase beginTransaction]; //启动事务\n                for (NSDictionary *dic in contentArr)\n                {\n                    [dataBase executeUpdate:insertSQLStatment withArgumentsInArray:@[\n                                                                                     [dic objectForKey:@\"L0_CMT\"]\n                                                                                     ,[dic objectForKey:@\"L0_ID\"]\n                                                                                      ,[dic objectForKey:@\"L1_CMT\"]\n                                                                                     ,[dic objectForKey:@\"L1_ID\"]\n                                                                                     ,[dic objectForKey:@\"L2_CMT\"]\n                                                                                     ,[dic objectForKey:@\"L2_ID\"]\n                                                                                     ,[dic objectForKey:@\"L3_CMT\"]\n                                                                                     ,[dic objectForKey:@\"L3_ID\"]\n                                                                                    ,[dic objectForKey:@\"P_ID\"]]\n                                                                                     ];\n                }\n                [dataBase commit]; //开始执行\n                [dataBase close];\n\n事务对于大批量操作太管用了，主要是快，这样就算有阻塞，时间短得可怜，用户无法察觉。\n\n欢迎讨论交流","slug":"iOS端本地sqlite批量插入对比","published":1,"updated":"2021-05-14T02:01:17.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno450027kuo4dk8z0l7p","content":"<p>###1、Sqlite优势明显<br>iOS端本地数据库一般用sqlite,而且相对于plist、userdefault、文本存储等，使用数据库方便大量数据的操作，而且与后台数据库具有一致性，减少中间不必要的转换，适应能力强。配合FMDB来使用，非常的方便，有一点需要在App内部空间创建.sqlite文件，如果去包含资源文件是可读不可写的。</p>\n<p>###2、什么文件适合数据库<br>对于常见的行政区域，由于可能会出现数据相应的调整，虽然不是很频繁，但是如果保存在本地会影响相关的业务。比如成都这几年分出了天府新区，郫县改为了区，谁能保证以后会不会还有大动作，所以从后台获取较妥，为了避免不必要的数据请求，App启动前可以进行版本检查，判断是否对某些文件进行更新。</p>\n<p>###3、放在数据库要注意的事情<br>  . 数据库句柄的引用和关闭，每次打开是要判断是否数据库可用，用完后即时关闭，避免资源占用<br>  . 可以独立出来统一管理，比如通知消息一般会存数据库，那么通知的增删查改可以放数据库，地址查对应省市区也可以，可以采用一个单例来统一管理.<br>  . 性能和效率</p>\n<pre><code>dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\n      dispatch_sync(queue, ^{\n          [dataBase open];\n          for (NSInteger index = 0; index &lt; contentArr.count; index++) {\n              NSDictionary *dic = [contentArr objectAtIndex:index];\n              BOOL resulat = [dataBase executeUpdate:@&quot;INSERT INTO address(L0_CMT,L0_ID,L1_CMT,L1_ID,L2_CMT,L2_ID,L3_CMT,L3_ID,P_ID) VALUES(?,?,?,?,?,?,?,?,?);&quot;,[dic objectForKey:@&quot;L0_CMT&quot;]\n                              ,[dic objectForKey:@&quot;L0_ID&quot;]\n                              ,[dic objectForKey:@&quot;L1_CMT&quot;]\n                              ,[dic objectForKey:@&quot;L1_ID&quot;]\n                              ,[dic objectForKey:@&quot;L2_CMT&quot;]\n                              ,[dic objectForKey:@&quot;L2_ID&quot;]\n                              ,[dic objectForKey:@&quot;L3_CMT&quot;]\n                              ,[dic objectForKey:@&quot;L3_ID&quot;]\n                              ,[dic objectForKey:@&quot;P_ID&quot;]];\n              if (resulat) {\n              }\n          }\n          [dataBase close];\n);\n</code></pre><p>如上图所示看似没有问题，实际上暗茂杀机。之前使用dispatch_async来进行异步数据操作完成批量数据写入，但是运行时报错无法打开数据库句柄，推断数据库是线程安全，不允许多个线程同时对其进行操作，所以对数据库的操作应该放在主线程中。</p>\n<p>问题又来了，放在主线程通过全局串行队列进行的时候，可能会导致操作卡顿，因为省市区几千条数据，我是循环插入的，那该怎么办，于是有了后面的批量插入，效率快多了</p>\n<pre><code>[dataBase setShouldCacheStatements:YES];//是否应该缓存插入描述\n   static NSString *insertSQLStatment = @&quot;INSERT INTO address(L0_CMT,L0_ID,L1_CMT,L1_ID,L2_CMT,L2_ID,L3_CMT,L3_ID,P_ID) VALUES(?,?,?,?,?,?,?,?,?);&quot;;\n   [dataBase beginTransaction]; //启动事务\n   for (NSDictionary *dic in contentArr)\n   {\n       [dataBase executeUpdate:insertSQLStatment withArgumentsInArray:@[\n                                                                        [dic objectForKey:@&quot;L0_CMT&quot;]\n                                                                        ,[dic objectForKey:@&quot;L0_ID&quot;]\n                                                                         ,[dic objectForKey:@&quot;L1_CMT&quot;]\n                                                                        ,[dic objectForKey:@&quot;L1_ID&quot;]\n                                                                        ,[dic objectForKey:@&quot;L2_CMT&quot;]\n                                                                        ,[dic objectForKey:@&quot;L2_ID&quot;]\n                                                                        ,[dic objectForKey:@&quot;L3_CMT&quot;]\n                                                                        ,[dic objectForKey:@&quot;L3_ID&quot;]\n                                                                       ,[dic objectForKey:@&quot;P_ID&quot;]]\n                                                                        ];\n   }\n   [dataBase commit]; //开始执行\n   [dataBase close];\n</code></pre><p>事务对于大批量操作太管用了，主要是快，这样就算有阻塞，时间短得可怜，用户无法察觉。</p>\n<p>欢迎讨论交流</p>\n","site":{"data":{}},"excerpt":"","more":"<p>###1、Sqlite优势明显<br>iOS端本地数据库一般用sqlite,而且相对于plist、userdefault、文本存储等，使用数据库方便大量数据的操作，而且与后台数据库具有一致性，减少中间不必要的转换，适应能力强。配合FMDB来使用，非常的方便，有一点需要在App内部空间创建.sqlite文件，如果去包含资源文件是可读不可写的。</p>\n<p>###2、什么文件适合数据库<br>对于常见的行政区域，由于可能会出现数据相应的调整，虽然不是很频繁，但是如果保存在本地会影响相关的业务。比如成都这几年分出了天府新区，郫县改为了区，谁能保证以后会不会还有大动作，所以从后台获取较妥，为了避免不必要的数据请求，App启动前可以进行版本检查，判断是否对某些文件进行更新。</p>\n<p>###3、放在数据库要注意的事情<br>  . 数据库句柄的引用和关闭，每次打开是要判断是否数据库可用，用完后即时关闭，避免资源占用<br>  . 可以独立出来统一管理，比如通知消息一般会存数据库，那么通知的增删查改可以放数据库，地址查对应省市区也可以，可以采用一个单例来统一管理.<br>  . 性能和效率</p>\n<pre><code>dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\n      dispatch_sync(queue, ^{\n          [dataBase open];\n          for (NSInteger index = 0; index &lt; contentArr.count; index++) {\n              NSDictionary *dic = [contentArr objectAtIndex:index];\n              BOOL resulat = [dataBase executeUpdate:@&quot;INSERT INTO address(L0_CMT,L0_ID,L1_CMT,L1_ID,L2_CMT,L2_ID,L3_CMT,L3_ID,P_ID) VALUES(?,?,?,?,?,?,?,?,?);&quot;,[dic objectForKey:@&quot;L0_CMT&quot;]\n                              ,[dic objectForKey:@&quot;L0_ID&quot;]\n                              ,[dic objectForKey:@&quot;L1_CMT&quot;]\n                              ,[dic objectForKey:@&quot;L1_ID&quot;]\n                              ,[dic objectForKey:@&quot;L2_CMT&quot;]\n                              ,[dic objectForKey:@&quot;L2_ID&quot;]\n                              ,[dic objectForKey:@&quot;L3_CMT&quot;]\n                              ,[dic objectForKey:@&quot;L3_ID&quot;]\n                              ,[dic objectForKey:@&quot;P_ID&quot;]];\n              if (resulat) {\n              }\n          }\n          [dataBase close];\n);\n</code></pre><p>如上图所示看似没有问题，实际上暗茂杀机。之前使用dispatch_async来进行异步数据操作完成批量数据写入，但是运行时报错无法打开数据库句柄，推断数据库是线程安全，不允许多个线程同时对其进行操作，所以对数据库的操作应该放在主线程中。</p>\n<p>问题又来了，放在主线程通过全局串行队列进行的时候，可能会导致操作卡顿，因为省市区几千条数据，我是循环插入的，那该怎么办，于是有了后面的批量插入，效率快多了</p>\n<pre><code>[dataBase setShouldCacheStatements:YES];//是否应该缓存插入描述\n   static NSString *insertSQLStatment = @&quot;INSERT INTO address(L0_CMT,L0_ID,L1_CMT,L1_ID,L2_CMT,L2_ID,L3_CMT,L3_ID,P_ID) VALUES(?,?,?,?,?,?,?,?,?);&quot;;\n   [dataBase beginTransaction]; //启动事务\n   for (NSDictionary *dic in contentArr)\n   {\n       [dataBase executeUpdate:insertSQLStatment withArgumentsInArray:@[\n                                                                        [dic objectForKey:@&quot;L0_CMT&quot;]\n                                                                        ,[dic objectForKey:@&quot;L0_ID&quot;]\n                                                                         ,[dic objectForKey:@&quot;L1_CMT&quot;]\n                                                                        ,[dic objectForKey:@&quot;L1_ID&quot;]\n                                                                        ,[dic objectForKey:@&quot;L2_CMT&quot;]\n                                                                        ,[dic objectForKey:@&quot;L2_ID&quot;]\n                                                                        ,[dic objectForKey:@&quot;L3_CMT&quot;]\n                                                                        ,[dic objectForKey:@&quot;L3_ID&quot;]\n                                                                       ,[dic objectForKey:@&quot;P_ID&quot;]]\n                                                                        ];\n   }\n   [dataBase commit]; //开始执行\n   [dataBase close];\n</code></pre><p>事务对于大批量操作太管用了，主要是快，这样就算有阻塞，时间短得可怜，用户无法察觉。</p>\n<p>欢迎讨论交流</p>\n"},{"title":"npm配置文件及包管理","date":"2021-01-09T18:32:00.000Z","_content":"\nnpm全局配置文件可以通过以下命令进行查找\n\n```\nnpm config get userconfig  *## 查看配置文件路径\n```\n\n作为全局配置\n\n还可以在Node项目中添加.npmrc作为项目配置\n\n**config常用命令**\n\n```\nnpm config ls -l  *##　查看所有配置项* npm config get cache  *## 查看缓存配置，get后面可以跟任意配置项* npm config edit  *## 直接编辑config文件，这个会打开文本*\n```\n\n**配置文件内容**\n\n```\nregistry=https://registry.npm.taobao.org/    //下载源\n\n@yh:registry=http://*****\t\t\t\t\t\t\t\t\t\t//私有仓库\n\t\nhome=https://www.npmjs.org\n\nELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/\n\n//registry.npm.taobao.org/:_password=\"bnBtUEBzc3cwcmQxMjM=\"\n\n//registry.npm.taobao.org/:username=cooler112\n\n//registry.npm.taobao.org/:email=971656743@qq.com\n\n//registry.npm.taobao.org/:always-auth=false\n\n//registry.npmjs.org/:_authToken=7cbacf76-47c5-480d-aaba-7d26d75e356f\n\nprefix=/Users/smithcool/.nvm/versions/node/v10.15.3\t\t//npm下载包保存路径\n```\n\n\n\nnpm查看本地包版本号和远程包的版本号\nnpm 查看远程包\n第一种方法:\n```\nnpm info <packageName>\n```\n\n第二种方法:\n```\nnpm view <packageName> versions --json\n```\nnpm查看本地安装的包版本号\n```\nnpm ls <packageName>        // 本地包\nnpm ls <packageName> -g     // 全局安装包\n```\nnpm语义化版本号\n\nnpm使用 a.b.c 的版本号来管理安装包，a为达版本号，有重大api改变，一般不向下兼容，b为小版本号，新增功能，向下兼容，c为补丁号，通常修复一些bug。npm安装包的时候允许使用一些特殊符号表示安装的版本范围，如：\n```\n~a.b.c :    取最新的c的版本号值，a与b保持不变\n^a.b.c :    取b和c均为最新版本号，a保持不变\n```","source":"_posts/npm配置文件及包管理.md","raw":"---\ntitle: npm配置文件及包管理\ndate: 2021-01-09 18:32:00\ntags:\n---\n\nnpm全局配置文件可以通过以下命令进行查找\n\n```\nnpm config get userconfig  *## 查看配置文件路径\n```\n\n作为全局配置\n\n还可以在Node项目中添加.npmrc作为项目配置\n\n**config常用命令**\n\n```\nnpm config ls -l  *##　查看所有配置项* npm config get cache  *## 查看缓存配置，get后面可以跟任意配置项* npm config edit  *## 直接编辑config文件，这个会打开文本*\n```\n\n**配置文件内容**\n\n```\nregistry=https://registry.npm.taobao.org/    //下载源\n\n@yh:registry=http://*****\t\t\t\t\t\t\t\t\t\t//私有仓库\n\t\nhome=https://www.npmjs.org\n\nELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/\n\n//registry.npm.taobao.org/:_password=\"bnBtUEBzc3cwcmQxMjM=\"\n\n//registry.npm.taobao.org/:username=cooler112\n\n//registry.npm.taobao.org/:email=971656743@qq.com\n\n//registry.npm.taobao.org/:always-auth=false\n\n//registry.npmjs.org/:_authToken=7cbacf76-47c5-480d-aaba-7d26d75e356f\n\nprefix=/Users/smithcool/.nvm/versions/node/v10.15.3\t\t//npm下载包保存路径\n```\n\n\n\nnpm查看本地包版本号和远程包的版本号\nnpm 查看远程包\n第一种方法:\n```\nnpm info <packageName>\n```\n\n第二种方法:\n```\nnpm view <packageName> versions --json\n```\nnpm查看本地安装的包版本号\n```\nnpm ls <packageName>        // 本地包\nnpm ls <packageName> -g     // 全局安装包\n```\nnpm语义化版本号\n\nnpm使用 a.b.c 的版本号来管理安装包，a为达版本号，有重大api改变，一般不向下兼容，b为小版本号，新增功能，向下兼容，c为补丁号，通常修复一些bug。npm安装包的时候允许使用一些特殊符号表示安装的版本范围，如：\n```\n~a.b.c :    取最新的c的版本号值，a与b保持不变\n^a.b.c :    取b和c均为最新版本号，a保持不变\n```","slug":"npm配置文件及包管理","published":1,"updated":"2021-05-14T02:01:17.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno480029kuo41ox2d4dp","content":"<p>npm全局配置文件可以通过以下命令进行查找</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get userconfig  *## 查看配置文件路径</span><br></pre></td></tr></table></figure>\n<p>作为全局配置</p>\n<p>还可以在Node项目中添加.npmrc作为项目配置</p>\n<p><strong>config常用命令</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config ls -l  *##　查看所有配置项* npm config get cache  *## 查看缓存配置，get后面可以跟任意配置项* npm config edit  *## 直接编辑config文件，这个会打开文本*</span><br></pre></td></tr></table></figure>\n<p><strong>配置文件内容</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry=https://registry.npm.taobao.org/    //下载源</span><br><span class=\"line\"></span><br><span class=\"line\">@yh:registry=http://*****\t\t\t\t\t\t\t\t\t\t//私有仓库</span><br><span class=\"line\">\t</span><br><span class=\"line\">home=https://www.npmjs.org</span><br><span class=\"line\"></span><br><span class=\"line\">ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/</span><br><span class=\"line\"></span><br><span class=\"line\">//registry.npm.taobao.org/:_password=&quot;bnBtUEBzc3cwcmQxMjM=&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">//registry.npm.taobao.org/:username=cooler112</span><br><span class=\"line\"></span><br><span class=\"line\">//registry.npm.taobao.org/:email=971656743@qq.com</span><br><span class=\"line\"></span><br><span class=\"line\">//registry.npm.taobao.org/:always-auth=false</span><br><span class=\"line\"></span><br><span class=\"line\">//registry.npmjs.org/:_authToken=7cbacf76-47c5-480d-aaba-7d26d75e356f</span><br><span class=\"line\"></span><br><span class=\"line\">prefix=/Users/smithcool/.nvm/versions/node/v10.15.3\t\t//npm下载包保存路径</span><br></pre></td></tr></table></figure>\n<p>npm查看本地包版本号和远程包的版本号<br>npm 查看远程包<br>第一种方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm info &lt;packageName&gt;</span><br></pre></td></tr></table></figure></p>\n<p>第二种方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm view &lt;packageName&gt; versions --json</span><br></pre></td></tr></table></figure></p>\n<p>npm查看本地安装的包版本号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm ls &lt;packageName&gt;        // 本地包</span><br><span class=\"line\">npm ls &lt;packageName&gt; -g     // 全局安装包</span><br></pre></td></tr></table></figure></p>\n<p>npm语义化版本号</p>\n<p>npm使用 a.b.c 的版本号来管理安装包，a为达版本号，有重大api改变，一般不向下兼容，b为小版本号，新增功能，向下兼容，c为补丁号，通常修复一些bug。npm安装包的时候允许使用一些特殊符号表示安装的版本范围，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~a.b.c :    取最新的c的版本号值，a与b保持不变</span><br><span class=\"line\">^a.b.c :    取b和c均为最新版本号，a保持不变</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>npm全局配置文件可以通过以下命令进行查找</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get userconfig  *## 查看配置文件路径</span><br></pre></td></tr></table></figure>\n<p>作为全局配置</p>\n<p>还可以在Node项目中添加.npmrc作为项目配置</p>\n<p><strong>config常用命令</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config ls -l  *##　查看所有配置项* npm config get cache  *## 查看缓存配置，get后面可以跟任意配置项* npm config edit  *## 直接编辑config文件，这个会打开文本*</span><br></pre></td></tr></table></figure>\n<p><strong>配置文件内容</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry=https://registry.npm.taobao.org/    //下载源</span><br><span class=\"line\"></span><br><span class=\"line\">@yh:registry=http://*****\t\t\t\t\t\t\t\t\t\t//私有仓库</span><br><span class=\"line\">\t</span><br><span class=\"line\">home=https://www.npmjs.org</span><br><span class=\"line\"></span><br><span class=\"line\">ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/</span><br><span class=\"line\"></span><br><span class=\"line\">//registry.npm.taobao.org/:_password=&quot;bnBtUEBzc3cwcmQxMjM=&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">//registry.npm.taobao.org/:username=cooler112</span><br><span class=\"line\"></span><br><span class=\"line\">//registry.npm.taobao.org/:email=971656743@qq.com</span><br><span class=\"line\"></span><br><span class=\"line\">//registry.npm.taobao.org/:always-auth=false</span><br><span class=\"line\"></span><br><span class=\"line\">//registry.npmjs.org/:_authToken=7cbacf76-47c5-480d-aaba-7d26d75e356f</span><br><span class=\"line\"></span><br><span class=\"line\">prefix=/Users/smithcool/.nvm/versions/node/v10.15.3\t\t//npm下载包保存路径</span><br></pre></td></tr></table></figure>\n<p>npm查看本地包版本号和远程包的版本号<br>npm 查看远程包<br>第一种方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm info &lt;packageName&gt;</span><br></pre></td></tr></table></figure></p>\n<p>第二种方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm view &lt;packageName&gt; versions --json</span><br></pre></td></tr></table></figure></p>\n<p>npm查看本地安装的包版本号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm ls &lt;packageName&gt;        // 本地包</span><br><span class=\"line\">npm ls &lt;packageName&gt; -g     // 全局安装包</span><br></pre></td></tr></table></figure></p>\n<p>npm语义化版本号</p>\n<p>npm使用 a.b.c 的版本号来管理安装包，a为达版本号，有重大api改变，一般不向下兼容，b为小版本号，新增功能，向下兼容，c为补丁号，通常修复一些bug。npm安装包的时候允许使用一些特殊符号表示安装的版本范围，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~a.b.c :    取最新的c的版本号值，a与b保持不变</span><br><span class=\"line\">^a.b.c :    取b和c均为最新版本号，a保持不变</span><br></pre></td></tr></table></figure></p>\n"},{"title":"pm2 Vue进程管理工具","date":"2021-01-09T19:17:25.000Z","_content":"\n当你的Node项目打包发布时，需要进行进程管理，pm是一个不错的选择\npm2是一个进程管理工具,可以用它来管理你的node进程，并查看node进程的状态，当然也支持性能监控，进程守护，负载均衡等功能\n1、 pm2需要全局安装\n\n```\nnpm install -g pm2\n```\n\n2、进入项目根目录\n```\n2.1 启动进程/应用 pm2 start bin/www 或 pm2 start app.js\n2.2 重命名进程/应用 pm2 start app.js --name wb123\n2.3 添加进程/应用 watch pm2 start bin/www --watch\n2.4 结束进程/应用 pm2 stop www\n2.5 结束所有进程/应用 pm2 stop all\n2.6 删除进程/应用 pm2 delete www\n2.7 删除所有进程/应用 pm2 delete all\n2.8 列出所有进程/应用 pm2 list\n2.9 查看某个进程/应用具体情况 pm2 describe www\n2.10 查看进程/应用的资源消耗情况 pm2 monit\n2.11 查看pm2的日志 pm2 logs\n2.12 若要查看某个进程/应用的日志,使用 pm2 logs www\n2.13 重新启动进程/应用 pm2 restart www\n2.14 重新启动所有进程/应用 pm2 restart all\n```","source":"_posts/pm2-Vue进程管理工具.md","raw":"---\ntitle: pm2 Vue进程管理工具\ndate: 2021-01-09 19:17:25\ntags: pm2\ncategories: 编程工具\n---\n\n当你的Node项目打包发布时，需要进行进程管理，pm是一个不错的选择\npm2是一个进程管理工具,可以用它来管理你的node进程，并查看node进程的状态，当然也支持性能监控，进程守护，负载均衡等功能\n1、 pm2需要全局安装\n\n```\nnpm install -g pm2\n```\n\n2、进入项目根目录\n```\n2.1 启动进程/应用 pm2 start bin/www 或 pm2 start app.js\n2.2 重命名进程/应用 pm2 start app.js --name wb123\n2.3 添加进程/应用 watch pm2 start bin/www --watch\n2.4 结束进程/应用 pm2 stop www\n2.5 结束所有进程/应用 pm2 stop all\n2.6 删除进程/应用 pm2 delete www\n2.7 删除所有进程/应用 pm2 delete all\n2.8 列出所有进程/应用 pm2 list\n2.9 查看某个进程/应用具体情况 pm2 describe www\n2.10 查看进程/应用的资源消耗情况 pm2 monit\n2.11 查看pm2的日志 pm2 logs\n2.12 若要查看某个进程/应用的日志,使用 pm2 logs www\n2.13 重新启动进程/应用 pm2 restart www\n2.14 重新启动所有进程/应用 pm2 restart all\n```","slug":"pm2-Vue进程管理工具","published":1,"updated":"2021-05-14T02:01:17.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno4b002ekuo4gfn234ub","content":"<p>当你的Node项目打包发布时，需要进行进程管理，pm是一个不错的选择<br>pm2是一个进程管理工具,可以用它来管理你的node进程，并查看node进程的状态，当然也支持性能监控，进程守护，负载均衡等功能<br>1、 pm2需要全局安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br></pre></td></tr></table></figure>\n<p>2、进入项目根目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.1 启动进程/应用 pm2 start bin/www 或 pm2 start app.js</span><br><span class=\"line\">2.2 重命名进程/应用 pm2 start app.js --name wb123</span><br><span class=\"line\">2.3 添加进程/应用 watch pm2 start bin/www --watch</span><br><span class=\"line\">2.4 结束进程/应用 pm2 stop www</span><br><span class=\"line\">2.5 结束所有进程/应用 pm2 stop all</span><br><span class=\"line\">2.6 删除进程/应用 pm2 delete www</span><br><span class=\"line\">2.7 删除所有进程/应用 pm2 delete all</span><br><span class=\"line\">2.8 列出所有进程/应用 pm2 list</span><br><span class=\"line\">2.9 查看某个进程/应用具体情况 pm2 describe www</span><br><span class=\"line\">2.10 查看进程/应用的资源消耗情况 pm2 monit</span><br><span class=\"line\">2.11 查看pm2的日志 pm2 logs</span><br><span class=\"line\">2.12 若要查看某个进程/应用的日志,使用 pm2 logs www</span><br><span class=\"line\">2.13 重新启动进程/应用 pm2 restart www</span><br><span class=\"line\">2.14 重新启动所有进程/应用 pm2 restart all</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>当你的Node项目打包发布时，需要进行进程管理，pm是一个不错的选择<br>pm2是一个进程管理工具,可以用它来管理你的node进程，并查看node进程的状态，当然也支持性能监控，进程守护，负载均衡等功能<br>1、 pm2需要全局安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br></pre></td></tr></table></figure>\n<p>2、进入项目根目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.1 启动进程/应用 pm2 start bin/www 或 pm2 start app.js</span><br><span class=\"line\">2.2 重命名进程/应用 pm2 start app.js --name wb123</span><br><span class=\"line\">2.3 添加进程/应用 watch pm2 start bin/www --watch</span><br><span class=\"line\">2.4 结束进程/应用 pm2 stop www</span><br><span class=\"line\">2.5 结束所有进程/应用 pm2 stop all</span><br><span class=\"line\">2.6 删除进程/应用 pm2 delete www</span><br><span class=\"line\">2.7 删除所有进程/应用 pm2 delete all</span><br><span class=\"line\">2.8 列出所有进程/应用 pm2 list</span><br><span class=\"line\">2.9 查看某个进程/应用具体情况 pm2 describe www</span><br><span class=\"line\">2.10 查看进程/应用的资源消耗情况 pm2 monit</span><br><span class=\"line\">2.11 查看pm2的日志 pm2 logs</span><br><span class=\"line\">2.12 若要查看某个进程/应用的日志,使用 pm2 logs www</span><br><span class=\"line\">2.13 重新启动进程/应用 pm2 restart www</span><br><span class=\"line\">2.14 重新启动所有进程/应用 pm2 restart all</span><br></pre></td></tr></table></figure></p>\n"},{"title":"vue-draggable使用","date":"2021-01-16T11:23:12.000Z","_content":"\n在Vue业务开发中，会用到功能菜单的位置变换，比如支付宝的菜单换行， 是怎么实现的呢？\n\n可以直接使用Vue的draggable组件\n\n安装方式：\n\n```\nnpm i vuedraggable\n```\n\n页面引用\n\n```\nimport vuedraggable from 'vuedraggable'\n......\n  components: {\n    vuedraggable\n  },\n```\n\n直接使用,可以在内部添加简单动画\n\n```\n <vuedraggable \n \tv-model=\"menus\" \n \tdragable=\"true\" \n  @change=\"change\"\n  @start=\"start\"\n  @end=\"end\"\n  :move=\"move\"\n  :disabled=\"isEdit\">\n    <transition-group class=\"my-func-group\">\n      <div\n      class=\"menu-item menu-item-drag\"\n      v-for=\"item in menus\"\n      :key=\"item.bh\"\n      >\n        <div class=\"func-icon-wrapper\" @click.stop=\"fnClick(item)\">\n        <img class=\"func-icon\" :src=\"item.realUrl\" />\n      </div>\n      \t<div class=\"menu-text\">{{ item.mc }}</div>\n      </div>\n    </transition-group>\n  </vuedraggable>\n```\n\n另外切换的元素本身是可以点击的，需要添加@click.stop禁止点击元素向上传递事件\n\n","source":"_posts/vue-draggable使用.md","raw":"---\ntitle: vue-draggable使用\ndate: 2021-01-16 11:23:12\ntags: vue\ncategories: 前端开发\n---\n\n在Vue业务开发中，会用到功能菜单的位置变换，比如支付宝的菜单换行， 是怎么实现的呢？\n\n可以直接使用Vue的draggable组件\n\n安装方式：\n\n```\nnpm i vuedraggable\n```\n\n页面引用\n\n```\nimport vuedraggable from 'vuedraggable'\n......\n  components: {\n    vuedraggable\n  },\n```\n\n直接使用,可以在内部添加简单动画\n\n```\n <vuedraggable \n \tv-model=\"menus\" \n \tdragable=\"true\" \n  @change=\"change\"\n  @start=\"start\"\n  @end=\"end\"\n  :move=\"move\"\n  :disabled=\"isEdit\">\n    <transition-group class=\"my-func-group\">\n      <div\n      class=\"menu-item menu-item-drag\"\n      v-for=\"item in menus\"\n      :key=\"item.bh\"\n      >\n        <div class=\"func-icon-wrapper\" @click.stop=\"fnClick(item)\">\n        <img class=\"func-icon\" :src=\"item.realUrl\" />\n      </div>\n      \t<div class=\"menu-text\">{{ item.mc }}</div>\n      </div>\n    </transition-group>\n  </vuedraggable>\n```\n\n另外切换的元素本身是可以点击的，需要添加@click.stop禁止点击元素向上传递事件\n\n","slug":"vue-draggable使用","published":1,"updated":"2021-05-14T02:01:17.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno4e002gkuo4az48id9y","content":"<p>在Vue业务开发中，会用到功能菜单的位置变换，比如支付宝的菜单换行， 是怎么实现的呢？</p>\n<p>可以直接使用Vue的draggable组件</p>\n<p>安装方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i vuedraggable</span><br></pre></td></tr></table></figure>\n<p>页面引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import vuedraggable from &apos;vuedraggable&apos;</span><br><span class=\"line\">......</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    vuedraggable</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>直接使用,可以在内部添加简单动画</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;vuedraggable </span><br><span class=\"line\">\tv-model=&quot;menus&quot; </span><br><span class=\"line\">\tdragable=&quot;true&quot; </span><br><span class=\"line\"> @change=&quot;change&quot;</span><br><span class=\"line\"> @start=&quot;start&quot;</span><br><span class=\"line\"> @end=&quot;end&quot;</span><br><span class=\"line\"> :move=&quot;move&quot;</span><br><span class=\"line\"> :disabled=&quot;isEdit&quot;&gt;</span><br><span class=\"line\">   &lt;transition-group class=&quot;my-func-group&quot;&gt;</span><br><span class=\"line\">     &lt;div</span><br><span class=\"line\">     class=&quot;menu-item menu-item-drag&quot;</span><br><span class=\"line\">     v-for=&quot;item in menus&quot;</span><br><span class=\"line\">     :key=&quot;item.bh&quot;</span><br><span class=\"line\">     &gt;</span><br><span class=\"line\">       &lt;div class=&quot;func-icon-wrapper&quot; @click.stop=&quot;fnClick(item)&quot;&gt;</span><br><span class=\"line\">       &lt;img class=&quot;func-icon&quot; :src=&quot;item.realUrl&quot; /&gt;</span><br><span class=\"line\">     &lt;/div&gt;</span><br><span class=\"line\">     \t&lt;div class=&quot;menu-text&quot;&gt;&#123;&#123; item.mc &#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">     &lt;/div&gt;</span><br><span class=\"line\">   &lt;/transition-group&gt;</span><br><span class=\"line\"> &lt;/vuedraggable&gt;</span><br></pre></td></tr></table></figure>\n<p>另外切换的元素本身是可以点击的，需要添加@click.stop禁止点击元素向上传递事件</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在Vue业务开发中，会用到功能菜单的位置变换，比如支付宝的菜单换行， 是怎么实现的呢？</p>\n<p>可以直接使用Vue的draggable组件</p>\n<p>安装方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i vuedraggable</span><br></pre></td></tr></table></figure>\n<p>页面引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import vuedraggable from &apos;vuedraggable&apos;</span><br><span class=\"line\">......</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    vuedraggable</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>直接使用,可以在内部添加简单动画</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;vuedraggable </span><br><span class=\"line\">\tv-model=&quot;menus&quot; </span><br><span class=\"line\">\tdragable=&quot;true&quot; </span><br><span class=\"line\"> @change=&quot;change&quot;</span><br><span class=\"line\"> @start=&quot;start&quot;</span><br><span class=\"line\"> @end=&quot;end&quot;</span><br><span class=\"line\"> :move=&quot;move&quot;</span><br><span class=\"line\"> :disabled=&quot;isEdit&quot;&gt;</span><br><span class=\"line\">   &lt;transition-group class=&quot;my-func-group&quot;&gt;</span><br><span class=\"line\">     &lt;div</span><br><span class=\"line\">     class=&quot;menu-item menu-item-drag&quot;</span><br><span class=\"line\">     v-for=&quot;item in menus&quot;</span><br><span class=\"line\">     :key=&quot;item.bh&quot;</span><br><span class=\"line\">     &gt;</span><br><span class=\"line\">       &lt;div class=&quot;func-icon-wrapper&quot; @click.stop=&quot;fnClick(item)&quot;&gt;</span><br><span class=\"line\">       &lt;img class=&quot;func-icon&quot; :src=&quot;item.realUrl&quot; /&gt;</span><br><span class=\"line\">     &lt;/div&gt;</span><br><span class=\"line\">     \t&lt;div class=&quot;menu-text&quot;&gt;&#123;&#123; item.mc &#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">     &lt;/div&gt;</span><br><span class=\"line\">   &lt;/transition-group&gt;</span><br><span class=\"line\"> &lt;/vuedraggable&gt;</span><br></pre></td></tr></table></figure>\n<p>另外切换的元素本身是可以点击的，需要添加@click.stop禁止点击元素向上传递事件</p>\n"},{"title":"vscode的几个特别好用的快捷键","date":"2021-01-09T17:31:28.000Z","_content":"\n####1.复选多个word然后一起修改\n\n```\ncommand + D //选中word，然后修改。\n```\n\n####2.comment 插入\n\n```\nopt + shift + a: // 插入 /* */ （toggle)\n\nCmd + /: //插入 //\n```\n\n####3.左右挪行\n\n选中复数行 tab： 向右缩进\n\n```\nshift+tab： //向左回退\n```\n\n####4.上下挪行\n\n```\nOption + Up/Down //光标停在想要挪动的行上，可以将该行上下移动 复选多行 则多行同时移动\n```\n\n####5.拷贝行\n\n```\nOption+Shift+Up/Down 可以将该行往上/下拷贝\n```\n\n####6.增加和删除行\n\n```\nCmd + enter //在该行下面增加新行，不论当前光标是否在行尾\n\nCmd + Shift + K //删除当前行\n```\n\n####7.移动光标\n\nCmd + 光标的上下左右，可以将光标移到行Top，行End，行最左，行最右\n\n####8.寻找下一个match 的字串\n\nctrl+F 在文中查找字串，找到一个后，enter就可跳转到下一个。\n\n以上为mac 下的VScode 操作快捷键。","source":"_posts/vs code快捷键.md","raw":"---\ntitle: vscode的几个特别好用的快捷键\ndate: 2021-1-9 17:31:28\ntags: 快捷键\ncategories: 编程工具\n---\n\n####1.复选多个word然后一起修改\n\n```\ncommand + D //选中word，然后修改。\n```\n\n####2.comment 插入\n\n```\nopt + shift + a: // 插入 /* */ （toggle)\n\nCmd + /: //插入 //\n```\n\n####3.左右挪行\n\n选中复数行 tab： 向右缩进\n\n```\nshift+tab： //向左回退\n```\n\n####4.上下挪行\n\n```\nOption + Up/Down //光标停在想要挪动的行上，可以将该行上下移动 复选多行 则多行同时移动\n```\n\n####5.拷贝行\n\n```\nOption+Shift+Up/Down 可以将该行往上/下拷贝\n```\n\n####6.增加和删除行\n\n```\nCmd + enter //在该行下面增加新行，不论当前光标是否在行尾\n\nCmd + Shift + K //删除当前行\n```\n\n####7.移动光标\n\nCmd + 光标的上下左右，可以将光标移到行Top，行End，行最左，行最右\n\n####8.寻找下一个match 的字串\n\nctrl+F 在文中查找字串，找到一个后，enter就可跳转到下一个。\n\n以上为mac 下的VScode 操作快捷键。","slug":"vs code快捷键","published":1,"updated":"2021-05-14T02:01:17.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno4g002kkuo4zpg6s4gk","content":"<p>####1.复选多个word然后一起修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command + D //选中word，然后修改。</span><br></pre></td></tr></table></figure>\n<p>####2.comment 插入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opt + shift + a: // 插入 /* */ （toggle)</span><br><span class=\"line\"></span><br><span class=\"line\">Cmd + /: //插入 //</span><br></pre></td></tr></table></figure>\n<p>####3.左右挪行</p>\n<p>选中复数行 tab： 向右缩进</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shift+tab： //向左回退</span><br></pre></td></tr></table></figure>\n<p>####4.上下挪行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Option + Up/Down //光标停在想要挪动的行上，可以将该行上下移动 复选多行 则多行同时移动</span><br></pre></td></tr></table></figure>\n<p>####5.拷贝行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Option+Shift+Up/Down 可以将该行往上/下拷贝</span><br></pre></td></tr></table></figure>\n<p>####6.增加和删除行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cmd + enter //在该行下面增加新行，不论当前光标是否在行尾</span><br><span class=\"line\"></span><br><span class=\"line\">Cmd + Shift + K //删除当前行</span><br></pre></td></tr></table></figure>\n<p>####7.移动光标</p>\n<p>Cmd + 光标的上下左右，可以将光标移到行Top，行End，行最左，行最右</p>\n<p>####8.寻找下一个match 的字串</p>\n<p>ctrl+F 在文中查找字串，找到一个后，enter就可跳转到下一个。</p>\n<p>以上为mac 下的VScode 操作快捷键。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>####1.复选多个word然后一起修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command + D //选中word，然后修改。</span><br></pre></td></tr></table></figure>\n<p>####2.comment 插入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opt + shift + a: // 插入 /* */ （toggle)</span><br><span class=\"line\"></span><br><span class=\"line\">Cmd + /: //插入 //</span><br></pre></td></tr></table></figure>\n<p>####3.左右挪行</p>\n<p>选中复数行 tab： 向右缩进</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shift+tab： //向左回退</span><br></pre></td></tr></table></figure>\n<p>####4.上下挪行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Option + Up/Down //光标停在想要挪动的行上，可以将该行上下移动 复选多行 则多行同时移动</span><br></pre></td></tr></table></figure>\n<p>####5.拷贝行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Option+Shift+Up/Down 可以将该行往上/下拷贝</span><br></pre></td></tr></table></figure>\n<p>####6.增加和删除行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cmd + enter //在该行下面增加新行，不论当前光标是否在行尾</span><br><span class=\"line\"></span><br><span class=\"line\">Cmd + Shift + K //删除当前行</span><br></pre></td></tr></table></figure>\n<p>####7.移动光标</p>\n<p>Cmd + 光标的上下左右，可以将光标移到行Top，行End，行最左，行最右</p>\n<p>####8.寻找下一个match 的字串</p>\n<p>ctrl+F 在文中查找字串，找到一个后，enter就可跳转到下一个。</p>\n<p>以上为mac 下的VScode 操作快捷键。</p>\n"},{"title":"npm npm link使用方法","date":"2021-01-16T14:10:57.000Z","_content":"\n 初始链接模块修改main文件指向当前运行主文件，不是打包文件目录\n ```\n 从dist/index.js改为src/main.js\n ```\n\n\n1. 项目和模块在同一个目录下，可以使用相对路径\n```\nnpm link ../module\n```\n\n\n\n2. 项目和模块不在同一个目录下\n\ncd到模块目录，\n\n\n\n```\nnpm link，进行全局link\n```\ncd到项目目录\n```\nnpm link 模块名(package.json中的name)\n```\n3. 解除link\n\n解除项目和模块link，项目目录下\n```\nnpm unlink 模块名\n```\n解除模块全局link，模块目录下\n```\nnpm unlink 模块名\n```","source":"_posts/npm-npm-link使用方法.md","raw":"---\ntitle: npm npm link使用方法\ndate: 2021-01-16 14:10:57\ntags: npm\ncategories: 前端开发\n---\n\n 初始链接模块修改main文件指向当前运行主文件，不是打包文件目录\n ```\n 从dist/index.js改为src/main.js\n ```\n\n\n1. 项目和模块在同一个目录下，可以使用相对路径\n```\nnpm link ../module\n```\n\n\n\n2. 项目和模块不在同一个目录下\n\ncd到模块目录，\n\n\n\n```\nnpm link，进行全局link\n```\ncd到项目目录\n```\nnpm link 模块名(package.json中的name)\n```\n3. 解除link\n\n解除项目和模块link，项目目录下\n```\nnpm unlink 模块名\n```\n解除模块全局link，模块目录下\n```\nnpm unlink 模块名\n```","slug":"npm-npm-link使用方法","published":1,"updated":"2021-05-14T02:01:17.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno4i002nkuo4xk1as0v3","content":"<p> 初始链接模块修改main文件指向当前运行主文件，不是打包文件目录<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从dist/index.js改为src/main.js</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><p>项目和模块在同一个目录下，可以使用相对路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm link ../module</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>项目和模块不在同一个目录下</p>\n</li>\n</ol>\n<p>cd到模块目录，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm link，进行全局link</span><br></pre></td></tr></table></figure>\n<p>cd到项目目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm link 模块名(package.json中的name)</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>解除link</li>\n</ol>\n<p>解除项目和模块link，项目目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm unlink 模块名</span><br></pre></td></tr></table></figure></p>\n<p>解除模块全局link，模块目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm unlink 模块名</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p> 初始链接模块修改main文件指向当前运行主文件，不是打包文件目录<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从dist/index.js改为src/main.js</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><p>项目和模块在同一个目录下，可以使用相对路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm link ../module</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>项目和模块不在同一个目录下</p>\n</li>\n</ol>\n<p>cd到模块目录，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm link，进行全局link</span><br></pre></td></tr></table></figure>\n<p>cd到项目目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm link 模块名(package.json中的name)</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>解除link</li>\n</ol>\n<p>解除项目和模块link，项目目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm unlink 模块名</span><br></pre></td></tr></table></figure></p>\n<p>解除模块全局link，模块目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm unlink 模块名</span><br></pre></td></tr></table></figure></p>\n"},{"title":"vim操作","date":"2019-03-06T17:31:28.000Z","_content":"\n###命令模式\n光标移动\t\t\thjkl\n移动到当前行首\t++\t0\t^(非空首部)\n移动到上行首\t\t—\n移动到下行首\t\tEnter\n移动到文章首\t\tgg\n移动到文章未\t\tG\n\n向上翻页\t\t\tControl + b\n向下翻页\t\t\tControl + f\n屏幕非空首\t\tH\n屏幕非空尾\t\tL\n屏幕中间非空\t\tM\n\n移至次一个单词首\tw\tW(忽略标点)\n移至次一个单词尾\te\tE\n移至前一个单词首\tb\tB\n\n设置行号\t\t\tset number\n跳转到指定行\t\t:n\tnG\n\n句首\t\t\t\t(\n句尾\t\t\t\t）\n段首\t\t\t\t{\n段尾\t\t\t\t]\n在括号上匹配\t\t%\n\n输入模式：\n在单词首输入\t\ti\tinsert\n在行首输入\t\tI\n在单词尾输入\t\ta\tappend\n在行尾输入\t\tA\n在后插入一行输入\to\topen \n在前插入一行输入\tO\n连接后一行\t\tJ\tJoint\n\n删除命令\t\t\t\n删除单行\t\t\tdd\n删除游标所在字元\tx\n删除游标所在前字元 X\n删除至文章首\t\tdgg\n删除至文章尾\t\tdG\n删除至段尾\t\td$\n删除至行首\t\td0 d^(包含游标字元)\n\n替换命令\nr\t\t\t\t替换当前游标字\nR\t\t\t\t进入替换模式Esc返回\ns\t\t\t\t插入式替换内容\ncc\t\t\t\t替换当前行\nc0,c^\t\t\t替换到行首\nc$\t\t\t\t替换到行尾\ncw\t\t\t\t替换英文字母\nu\t\t\t\t返回上一步\nU\t\t\t\t回复当前行操作\nControl + r\t\t向前一步\n\n数目操作命令\n5dd\t\t\t\t删除5行\n8yy\t\t\t\t复制8行\n3r\t\t\t\t重复3次输入字元\n3x\t\t\t\t删除3字元\n5J\t\t\t\t连接5行\n2i hello ESC\t\t重复两次hello\n6G  :6\t\t\t跳转到第6行\n\n复制命令\nyy\t\t\t\t复制当行\n2yy\t\t\t\t复制两行\nyw\t\t\t\t复制word\ny2w\t\t\t\t复制两个字元\ny0\ty^\t\t\t复制到行首\ny$\t\t\t\t复制到行尾\nyG\t\t\t\t复制到文尾\nygg\t\t\t\t复制到文首\nP\t\t\t\t粘贴在游标前\np\t\t\t\t粘贴游标后\nAyy\t\t\t\t复制a缓存区\t","source":"_posts/vim操作.md","raw":"---\ntitle: vim操作\ndate: 2019-03-06 17:31:28\ntags: vim\ncategories: 编程工具\n---\n\n###命令模式\n光标移动\t\t\thjkl\n移动到当前行首\t++\t0\t^(非空首部)\n移动到上行首\t\t—\n移动到下行首\t\tEnter\n移动到文章首\t\tgg\n移动到文章未\t\tG\n\n向上翻页\t\t\tControl + b\n向下翻页\t\t\tControl + f\n屏幕非空首\t\tH\n屏幕非空尾\t\tL\n屏幕中间非空\t\tM\n\n移至次一个单词首\tw\tW(忽略标点)\n移至次一个单词尾\te\tE\n移至前一个单词首\tb\tB\n\n设置行号\t\t\tset number\n跳转到指定行\t\t:n\tnG\n\n句首\t\t\t\t(\n句尾\t\t\t\t）\n段首\t\t\t\t{\n段尾\t\t\t\t]\n在括号上匹配\t\t%\n\n输入模式：\n在单词首输入\t\ti\tinsert\n在行首输入\t\tI\n在单词尾输入\t\ta\tappend\n在行尾输入\t\tA\n在后插入一行输入\to\topen \n在前插入一行输入\tO\n连接后一行\t\tJ\tJoint\n\n删除命令\t\t\t\n删除单行\t\t\tdd\n删除游标所在字元\tx\n删除游标所在前字元 X\n删除至文章首\t\tdgg\n删除至文章尾\t\tdG\n删除至段尾\t\td$\n删除至行首\t\td0 d^(包含游标字元)\n\n替换命令\nr\t\t\t\t替换当前游标字\nR\t\t\t\t进入替换模式Esc返回\ns\t\t\t\t插入式替换内容\ncc\t\t\t\t替换当前行\nc0,c^\t\t\t替换到行首\nc$\t\t\t\t替换到行尾\ncw\t\t\t\t替换英文字母\nu\t\t\t\t返回上一步\nU\t\t\t\t回复当前行操作\nControl + r\t\t向前一步\n\n数目操作命令\n5dd\t\t\t\t删除5行\n8yy\t\t\t\t复制8行\n3r\t\t\t\t重复3次输入字元\n3x\t\t\t\t删除3字元\n5J\t\t\t\t连接5行\n2i hello ESC\t\t重复两次hello\n6G  :6\t\t\t跳转到第6行\n\n复制命令\nyy\t\t\t\t复制当行\n2yy\t\t\t\t复制两行\nyw\t\t\t\t复制word\ny2w\t\t\t\t复制两个字元\ny0\ty^\t\t\t复制到行首\ny$\t\t\t\t复制到行尾\nyG\t\t\t\t复制到文尾\nygg\t\t\t\t复制到文首\nP\t\t\t\t粘贴在游标前\np\t\t\t\t粘贴游标后\nAyy\t\t\t\t复制a缓存区\t","slug":"vim操作","published":1,"updated":"2021-05-14T02:01:17.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno4l002rkuo40zqvvpz8","content":"<p>###命令模式<br>光标移动            hjkl<br>移动到当前行首    ++    0    ^(非空首部)<br>移动到上行首        —<br>移动到下行首        Enter<br>移动到文章首        gg<br>移动到文章未        G</p>\n<p>向上翻页            Control + b<br>向下翻页            Control + f<br>屏幕非空首        H<br>屏幕非空尾        L<br>屏幕中间非空        M</p>\n<p>移至次一个单词首    w    W(忽略标点)<br>移至次一个单词尾    e    E<br>移至前一个单词首    b    B</p>\n<p>设置行号            set number<br>跳转到指定行        :n    nG</p>\n<p>句首                (<br>句尾                ）<br>段首                {<br>段尾                ]<br>在括号上匹配        %</p>\n<p>输入模式：<br>在单词首输入        i    insert<br>在行首输入        I<br>在单词尾输入        a    append<br>在行尾输入        A<br>在后插入一行输入    o    open<br>在前插入一行输入    O<br>连接后一行        J    Joint</p>\n<p>删除命令<br>删除单行            dd<br>删除游标所在字元    x<br>删除游标所在前字元 X<br>删除至文章首        dgg<br>删除至文章尾        dG<br>删除至段尾        d$<br>删除至行首        d0 d^(包含游标字元)</p>\n<p>替换命令<br>r                替换当前游标字<br>R                进入替换模式Esc返回<br>s                插入式替换内容<br>cc                替换当前行<br>c0,c^            替换到行首<br>c$                替换到行尾<br>cw                替换英文字母<br>u                返回上一步<br>U                回复当前行操作<br>Control + r        向前一步</p>\n<p>数目操作命令<br>5dd                删除5行<br>8yy                复制8行<br>3r                重复3次输入字元<br>3x                删除3字元<br>5J                连接5行<br>2i hello ESC        重复两次hello<br>6G  :6            跳转到第6行</p>\n<p>复制命令<br>yy                复制当行<br>2yy                复制两行<br>yw                复制word<br>y2w                复制两个字元<br>y0    y^            复制到行首<br>y$                复制到行尾<br>yG                复制到文尾<br>ygg                复制到文首<br>P                粘贴在游标前<br>p                粘贴游标后<br>Ayy                复制a缓存区    </p>\n","site":{"data":{}},"excerpt":"","more":"<p>###命令模式<br>光标移动            hjkl<br>移动到当前行首    ++    0    ^(非空首部)<br>移动到上行首        —<br>移动到下行首        Enter<br>移动到文章首        gg<br>移动到文章未        G</p>\n<p>向上翻页            Control + b<br>向下翻页            Control + f<br>屏幕非空首        H<br>屏幕非空尾        L<br>屏幕中间非空        M</p>\n<p>移至次一个单词首    w    W(忽略标点)<br>移至次一个单词尾    e    E<br>移至前一个单词首    b    B</p>\n<p>设置行号            set number<br>跳转到指定行        :n    nG</p>\n<p>句首                (<br>句尾                ）<br>段首                {<br>段尾                ]<br>在括号上匹配        %</p>\n<p>输入模式：<br>在单词首输入        i    insert<br>在行首输入        I<br>在单词尾输入        a    append<br>在行尾输入        A<br>在后插入一行输入    o    open<br>在前插入一行输入    O<br>连接后一行        J    Joint</p>\n<p>删除命令<br>删除单行            dd<br>删除游标所在字元    x<br>删除游标所在前字元 X<br>删除至文章首        dgg<br>删除至文章尾        dG<br>删除至段尾        d$<br>删除至行首        d0 d^(包含游标字元)</p>\n<p>替换命令<br>r                替换当前游标字<br>R                进入替换模式Esc返回<br>s                插入式替换内容<br>cc                替换当前行<br>c0,c^            替换到行首<br>c$                替换到行尾<br>cw                替换英文字母<br>u                返回上一步<br>U                回复当前行操作<br>Control + r        向前一步</p>\n<p>数目操作命令<br>5dd                删除5行<br>8yy                复制8行<br>3r                重复3次输入字元<br>3x                删除3字元<br>5J                连接5行<br>2i hello ESC        重复两次hello<br>6G  :6            跳转到第6行</p>\n<p>复制命令<br>yy                复制当行<br>2yy                复制两行<br>yw                复制word<br>y2w                复制两个字元<br>y0    y^            复制到行首<br>y$                复制到行尾<br>yG                复制到文尾<br>ygg                复制到文首<br>P                粘贴在游标前<br>p                粘贴游标后<br>Ayy                复制a缓存区    </p>\n"},{"title":"关于技术实验室网站的创建设想","date":"2019-03-06T15:46:30.000Z","_content":"\n{% asset_img 1.jpg %}\n\n初衷：这个社会都很浮躁，那么如何做好坚持的自己，保持清心寡欲呢？除了内心要足够强大的克制自己的贪欲外，更是要找到和你频率相近的人。也就是一群志同道合的小伙伴。现在叫做社群，一个你可以融入的圈子。比如我最近想提高自己的开发技术，但是获取有用的信息知识面的能力有限，所以可以找多个一起搞这方面技术的朋友来共同提高啊，于是我想到了大家一起分享自己的技术主立章，规定在某个时段要分享自己有价值的内容供大学学习交流，另外为了使更多的人关注和参与进来，我们可以建设一个网站用于技术交流，进而我们搭建博客平台。原来WordPress并没有我们想像的那么复杂，几步轻松建站的同时我们可以创建多个账号共同发表自己的技术在这个平台上。随着后面影响力的逐步扩大，可以所广告链接进来像麦芒实验室<http://www.awnlab.com/>一个。最后形成一个技术社区。\n\n这样做甚少有三个好处：\n\n1. 给大家展示自己技术的机会和交流的机会，在这个过程中不断提高自己的开发技术\n\n2.去学习了解平台运营的模式，网站建设的方法\n\n3.通过后期的流量变现让大家看到自已分享的价值，提高大家的积极性\n\n另外还可以去探索搜索引擎优化SEO，及广告技术的接入，运营管理，宣传吸粉提高影响力，因此是件任重到远但是趣味十足的事情。\n\n这不仅是个实验室，也是实战练习的地方，还是去实现价值的地方。\n\n目前需要进行建设的地方：\n\n网站名称：根据初衷来进行扩展取名\n\n关于赢利模式：前期作为大家技术分享成长的平台，同时研究广告的不反感接入。后期要求高质量的技术文章，让用户为内容付费。\n\n关于发展规划：先网站做好，后面接入App客户端（有开放的第三方控件可能较方便的使用接入）后面逐步形成影响力。\n\n其它方面还没有想好，上面提的可以大家一起讨论优化。\n\n总结:想像很美好，但是往往迈出第一步很难，更可贵的是找到黄金搭挡，强力CP或者志同道合的小团队就可以产生强大的影响力。","source":"_posts/关于技术实验室网站的创建设想.md","raw":"---\ntitle: 关于技术实验室网站的创建设想\ndate: 2019-03-06 15:46:30\ntags: 项目\ncategories: 编程思想\n---\n\n{% asset_img 1.jpg %}\n\n初衷：这个社会都很浮躁，那么如何做好坚持的自己，保持清心寡欲呢？除了内心要足够强大的克制自己的贪欲外，更是要找到和你频率相近的人。也就是一群志同道合的小伙伴。现在叫做社群，一个你可以融入的圈子。比如我最近想提高自己的开发技术，但是获取有用的信息知识面的能力有限，所以可以找多个一起搞这方面技术的朋友来共同提高啊，于是我想到了大家一起分享自己的技术主立章，规定在某个时段要分享自己有价值的内容供大学学习交流，另外为了使更多的人关注和参与进来，我们可以建设一个网站用于技术交流，进而我们搭建博客平台。原来WordPress并没有我们想像的那么复杂，几步轻松建站的同时我们可以创建多个账号共同发表自己的技术在这个平台上。随着后面影响力的逐步扩大，可以所广告链接进来像麦芒实验室<http://www.awnlab.com/>一个。最后形成一个技术社区。\n\n这样做甚少有三个好处：\n\n1. 给大家展示自己技术的机会和交流的机会，在这个过程中不断提高自己的开发技术\n\n2.去学习了解平台运营的模式，网站建设的方法\n\n3.通过后期的流量变现让大家看到自已分享的价值，提高大家的积极性\n\n另外还可以去探索搜索引擎优化SEO，及广告技术的接入，运营管理，宣传吸粉提高影响力，因此是件任重到远但是趣味十足的事情。\n\n这不仅是个实验室，也是实战练习的地方，还是去实现价值的地方。\n\n目前需要进行建设的地方：\n\n网站名称：根据初衷来进行扩展取名\n\n关于赢利模式：前期作为大家技术分享成长的平台，同时研究广告的不反感接入。后期要求高质量的技术文章，让用户为内容付费。\n\n关于发展规划：先网站做好，后面接入App客户端（有开放的第三方控件可能较方便的使用接入）后面逐步形成影响力。\n\n其它方面还没有想好，上面提的可以大家一起讨论优化。\n\n总结:想像很美好，但是往往迈出第一步很难，更可贵的是找到黄金搭挡，强力CP或者志同道合的小团队就可以产生强大的影响力。","slug":"关于技术实验室网站的创建设想","published":1,"updated":"2021-05-14T02:01:17.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno4n002ukuo4cd1kd05f","content":"<img src=\"/2019/03/06/关于技术实验室网站的创建设想/1.jpg\">\n<p>初衷：这个社会都很浮躁，那么如何做好坚持的自己，保持清心寡欲呢？除了内心要足够强大的克制自己的贪欲外，更是要找到和你频率相近的人。也就是一群志同道合的小伙伴。现在叫做社群，一个你可以融入的圈子。比如我最近想提高自己的开发技术，但是获取有用的信息知识面的能力有限，所以可以找多个一起搞这方面技术的朋友来共同提高啊，于是我想到了大家一起分享自己的技术主立章，规定在某个时段要分享自己有价值的内容供大学学习交流，另外为了使更多的人关注和参与进来，我们可以建设一个网站用于技术交流，进而我们搭建博客平台。原来WordPress并没有我们想像的那么复杂，几步轻松建站的同时我们可以创建多个账号共同发表自己的技术在这个平台上。随着后面影响力的逐步扩大，可以所广告链接进来像麦芒实验室<a href=\"http://www.awnlab.com/\" target=\"_blank\" rel=\"noopener\">http://www.awnlab.com/</a>一个。最后形成一个技术社区。</p>\n<p>这样做甚少有三个好处：</p>\n<ol>\n<li>给大家展示自己技术的机会和交流的机会，在这个过程中不断提高自己的开发技术</li>\n</ol>\n<p>2.去学习了解平台运营的模式，网站建设的方法</p>\n<p>3.通过后期的流量变现让大家看到自已分享的价值，提高大家的积极性</p>\n<p>另外还可以去探索搜索引擎优化SEO，及广告技术的接入，运营管理，宣传吸粉提高影响力，因此是件任重到远但是趣味十足的事情。</p>\n<p>这不仅是个实验室，也是实战练习的地方，还是去实现价值的地方。</p>\n<p>目前需要进行建设的地方：</p>\n<p>网站名称：根据初衷来进行扩展取名</p>\n<p>关于赢利模式：前期作为大家技术分享成长的平台，同时研究广告的不反感接入。后期要求高质量的技术文章，让用户为内容付费。</p>\n<p>关于发展规划：先网站做好，后面接入App客户端（有开放的第三方控件可能较方便的使用接入）后面逐步形成影响力。</p>\n<p>其它方面还没有想好，上面提的可以大家一起讨论优化。</p>\n<p>总结:想像很美好，但是往往迈出第一步很难，更可贵的是找到黄金搭挡，强力CP或者志同道合的小团队就可以产生强大的影响力。</p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/2019/03/06/关于技术实验室网站的创建设想/1.jpg\">\n<p>初衷：这个社会都很浮躁，那么如何做好坚持的自己，保持清心寡欲呢？除了内心要足够强大的克制自己的贪欲外，更是要找到和你频率相近的人。也就是一群志同道合的小伙伴。现在叫做社群，一个你可以融入的圈子。比如我最近想提高自己的开发技术，但是获取有用的信息知识面的能力有限，所以可以找多个一起搞这方面技术的朋友来共同提高啊，于是我想到了大家一起分享自己的技术主立章，规定在某个时段要分享自己有价值的内容供大学学习交流，另外为了使更多的人关注和参与进来，我们可以建设一个网站用于技术交流，进而我们搭建博客平台。原来WordPress并没有我们想像的那么复杂，几步轻松建站的同时我们可以创建多个账号共同发表自己的技术在这个平台上。随着后面影响力的逐步扩大，可以所广告链接进来像麦芒实验室<a href=\"http://www.awnlab.com/\" target=\"_blank\" rel=\"noopener\">http://www.awnlab.com/</a>一个。最后形成一个技术社区。</p>\n<p>这样做甚少有三个好处：</p>\n<ol>\n<li>给大家展示自己技术的机会和交流的机会，在这个过程中不断提高自己的开发技术</li>\n</ol>\n<p>2.去学习了解平台运营的模式，网站建设的方法</p>\n<p>3.通过后期的流量变现让大家看到自已分享的价值，提高大家的积极性</p>\n<p>另外还可以去探索搜索引擎优化SEO，及广告技术的接入，运营管理，宣传吸粉提高影响力，因此是件任重到远但是趣味十足的事情。</p>\n<p>这不仅是个实验室，也是实战练习的地方，还是去实现价值的地方。</p>\n<p>目前需要进行建设的地方：</p>\n<p>网站名称：根据初衷来进行扩展取名</p>\n<p>关于赢利模式：前期作为大家技术分享成长的平台，同时研究广告的不反感接入。后期要求高质量的技术文章，让用户为内容付费。</p>\n<p>关于发展规划：先网站做好，后面接入App客户端（有开放的第三方控件可能较方便的使用接入）后面逐步形成影响力。</p>\n<p>其它方面还没有想好，上面提的可以大家一起讨论优化。</p>\n<p>总结:想像很美好，但是往往迈出第一步很难，更可贵的是找到黄金搭挡，强力CP或者志同道合的小团队就可以产生强大的影响力。</p>\n"},{"title":"wordpress安装步骤","date":"2021-01-10T19:19:47.000Z","_content":"\n###安装：\n相对于自己去配置PHP,MYSQL,及HTTP服务，安装LAMP服务器系统（Linux、Apache、MySQL、PHP ）确实好了太多太多，不过自己去配坑多，也是能够很好的吸收建站知识。\n创建LAMP直接下载套件：yum -y install httpd mysql mysql-server php php-mysql php-gd php-xml\nyum 是Linux下包管理命令，\n![屏幕快照 2017-03-28 上午1.27.46.png](wordpress安装步骤/1240.png)\n这种情况下需要自己去下载mysql:\n# 下载mysql源安装包\nshell> wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm\n# 安装mysql源\nshell> yum localinstall mysql57-community-release-el7-8.noarch.rpm\n检查mysql源是否安装成功\nshell> yum repolist enabled | grep \"mysql.*-community.*\"\n￼\n 看到上图所示表示安装成功\n2、安装MySQL\nshell> yum install mysql-community-server\n\n![屏幕快照 2017-03-28 上午1.30.47.png](wordpress安装步骤/1240-20210110191959901.png)\n要安装的东西挺多的\n\n在数据库的操作中学到了几个有用的命令：\n```\n启动\nshell> systemctl start mysqld\n查看MySQL的启动状态\nshell> systemctl status mysqld\n开机启动\nshell> systemctl enable mysqld\nshell> systemctl daemon-reload\n```\n在日志里面查看生成的临时密码，可以通过下面命令快速查找\n```\nshell> grep 'temporary password' /var/log/mysqld.log\n//连接数据库\nmysql -uroot -p\n//重置密码\n ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass4!'; \n//添加远程账号：这个非常有用\nGRANT ALL PRIVILEGES ON *.* TO 'yangxin'@'%' IDENTIFIED BY 'Yangxin0917!' WITH GRANT OPTION;\n```\n\n参考：[[[MySQL] - MySQL的Grant命令](http://www.cnblogs.com/hcbin/archive/2010/04/23/1718379.html)](http://www.cnblogs.com/hcbin/archive/2010/04/23/1718379.html)\n\n修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：\n[mysqld]\ncharacter_set_server=utf8\ninit_connect='SET NAMES utf8'\n\n重新启动mysql服务使配置生效：\nsystemctl restart mysqld\n\n在数据库操作中有几个命令非常重要：\ncreate database ***\ndrop database ***\n\n对于处理初始化主机，腾讯官方提供了非常好的例子：\n\n下载Wordpress的包一定要最新的，老的包会有很多坑，最好是去官网上确认下是不是最新的版本。\n\n\n```\n1 wget http://cn.wordpress.org/wordpress-3.3.2-zh_CN.zip   //下载 \n3 unzip wordpress-3.3.2-zh_CN.zip    //解压 \n5 cp wordpress/* /var/www/html/      //将wordprss下所有的文件复制到apache服务器下的根目录\ncd /var/www/html/wordpress/   //进入wordpress文件夹下\ncp wp-config-sample.php wp-config.php  //复制配置文件\nvim wp-config.php  //编辑wordpress的配置文件\n这个里面配置的一定要与数据库对应的账号密码吻合才行\n```\n最完成的时候再次访问网站一个填好默认配置，一个博客网站就搭建好了，并没有想像的那么难。\n\n\n![屏幕快照 2017-03-28 上午2.10.51.png](wordpress安装步骤/1240-20210110192000056.png)","source":"_posts/wordpress安装步骤.md","raw":"---\ntitle: wordpress安装步骤\ndate: 2021-01-10 19:19:47\ntags: wordpress\ncategories: 博客建站\n---\n\n###安装：\n相对于自己去配置PHP,MYSQL,及HTTP服务，安装LAMP服务器系统（Linux、Apache、MySQL、PHP ）确实好了太多太多，不过自己去配坑多，也是能够很好的吸收建站知识。\n创建LAMP直接下载套件：yum -y install httpd mysql mysql-server php php-mysql php-gd php-xml\nyum 是Linux下包管理命令，\n![屏幕快照 2017-03-28 上午1.27.46.png](wordpress安装步骤/1240.png)\n这种情况下需要自己去下载mysql:\n# 下载mysql源安装包\nshell> wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm\n# 安装mysql源\nshell> yum localinstall mysql57-community-release-el7-8.noarch.rpm\n检查mysql源是否安装成功\nshell> yum repolist enabled | grep \"mysql.*-community.*\"\n￼\n 看到上图所示表示安装成功\n2、安装MySQL\nshell> yum install mysql-community-server\n\n![屏幕快照 2017-03-28 上午1.30.47.png](wordpress安装步骤/1240-20210110191959901.png)\n要安装的东西挺多的\n\n在数据库的操作中学到了几个有用的命令：\n```\n启动\nshell> systemctl start mysqld\n查看MySQL的启动状态\nshell> systemctl status mysqld\n开机启动\nshell> systemctl enable mysqld\nshell> systemctl daemon-reload\n```\n在日志里面查看生成的临时密码，可以通过下面命令快速查找\n```\nshell> grep 'temporary password' /var/log/mysqld.log\n//连接数据库\nmysql -uroot -p\n//重置密码\n ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass4!'; \n//添加远程账号：这个非常有用\nGRANT ALL PRIVILEGES ON *.* TO 'yangxin'@'%' IDENTIFIED BY 'Yangxin0917!' WITH GRANT OPTION;\n```\n\n参考：[[[MySQL] - MySQL的Grant命令](http://www.cnblogs.com/hcbin/archive/2010/04/23/1718379.html)](http://www.cnblogs.com/hcbin/archive/2010/04/23/1718379.html)\n\n修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：\n[mysqld]\ncharacter_set_server=utf8\ninit_connect='SET NAMES utf8'\n\n重新启动mysql服务使配置生效：\nsystemctl restart mysqld\n\n在数据库操作中有几个命令非常重要：\ncreate database ***\ndrop database ***\n\n对于处理初始化主机，腾讯官方提供了非常好的例子：\n\n下载Wordpress的包一定要最新的，老的包会有很多坑，最好是去官网上确认下是不是最新的版本。\n\n\n```\n1 wget http://cn.wordpress.org/wordpress-3.3.2-zh_CN.zip   //下载 \n3 unzip wordpress-3.3.2-zh_CN.zip    //解压 \n5 cp wordpress/* /var/www/html/      //将wordprss下所有的文件复制到apache服务器下的根目录\ncd /var/www/html/wordpress/   //进入wordpress文件夹下\ncp wp-config-sample.php wp-config.php  //复制配置文件\nvim wp-config.php  //编辑wordpress的配置文件\n这个里面配置的一定要与数据库对应的账号密码吻合才行\n```\n最完成的时候再次访问网站一个填好默认配置，一个博客网站就搭建好了，并没有想像的那么难。\n\n\n![屏幕快照 2017-03-28 上午2.10.51.png](wordpress安装步骤/1240-20210110192000056.png)","slug":"wordpress安装步骤","published":1,"updated":"2021-05-14T02:01:17.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno4q002xkuo4uys9bk43","content":"<p>###安装：<br>相对于自己去配置PHP,MYSQL,及HTTP服务，安装LAMP服务器系统（Linux、Apache、MySQL、PHP ）确实好了太多太多，不过自己去配坑多，也是能够很好的吸收建站知识。<br>创建LAMP直接下载套件：yum -y install httpd mysql mysql-server php php-mysql php-gd php-xml<br>yum 是Linux下包管理命令，<br><img src=\"/2021/01/10/wordpress安装步骤/1240.png\" alt=\"屏幕快照 2017-03-28 上午1.27.46.png\"><br>这种情况下需要自己去下载mysql:</p>\n<h1 id=\"下载mysql源安装包\"><a href=\"#下载mysql源安装包\" class=\"headerlink\" title=\"下载mysql源安装包\"></a>下载mysql源安装包</h1><p>shell&gt; wget <a href=\"http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm\" target=\"_blank\" rel=\"noopener\">http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</a></p>\n<h1 id=\"安装mysql源\"><a href=\"#安装mysql源\" class=\"headerlink\" title=\"安装mysql源\"></a>安装mysql源</h1><p>shell&gt; yum localinstall mysql57-community-release-el7-8.noarch.rpm<br>检查mysql源是否安装成功<br>shell&gt; yum repolist enabled | grep “mysql.<em>-community.</em>“<br>￼<br> 看到上图所示表示安装成功<br>2、安装MySQL<br>shell&gt; yum install mysql-community-server</p>\n<p><img src=\"/2021/01/10/wordpress安装步骤/1240-20210110191959901.png\" alt=\"屏幕快照 2017-03-28 上午1.30.47.png\"><br>要安装的东西挺多的</p>\n<p>在数据库的操作中学到了几个有用的命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动</span><br><span class=\"line\">shell&gt; systemctl start mysqld</span><br><span class=\"line\">查看MySQL的启动状态</span><br><span class=\"line\">shell&gt; systemctl status mysqld</span><br><span class=\"line\">开机启动</span><br><span class=\"line\">shell&gt; systemctl enable mysqld</span><br><span class=\"line\">shell&gt; systemctl daemon-reload</span><br></pre></td></tr></table></figure></p>\n<p>在日志里面查看生成的临时密码，可以通过下面命令快速查找<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; grep &apos;temporary password&apos; /var/log/mysqld.log</span><br><span class=\"line\">//连接数据库</span><br><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\">//重置密码</span><br><span class=\"line\"> ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;MyNewPass4!&apos;; </span><br><span class=\"line\">//添加远程账号：这个非常有用</span><br><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO &apos;yangxin&apos;@&apos;%&apos; IDENTIFIED BY &apos;Yangxin0917!&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure></p>\n<p>参考：[<a href=\"http://www.cnblogs.com/hcbin/archive/2010/04/23/1718379.html\" target=\"_blank\" rel=\"noopener\"><a href=\"http://www.cnblogs.com/hcbin/archive/2010/04/23/1718379.html\" target=\"_blank\" rel=\"noopener\">MySQL] - MySQL的Grant命令</a></a></p>\n<p>修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：<br>[mysqld]<br>character_set_server=utf8<br>init_connect=’SET NAMES utf8’</p>\n<p>重新启动mysql服务使配置生效：<br>systemctl restart mysqld</p>\n<p>在数据库操作中有几个命令非常重要：<br>create database <strong><em><br>drop database </em></strong></p>\n<p>对于处理初始化主机，腾讯官方提供了非常好的例子：</p>\n<p>下载Wordpress的包一定要最新的，老的包会有很多坑，最好是去官网上确认下是不是最新的版本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 wget http://cn.wordpress.org/wordpress-3.3.2-zh_CN.zip   //下载 </span><br><span class=\"line\">3 unzip wordpress-3.3.2-zh_CN.zip    //解压 </span><br><span class=\"line\">5 cp wordpress/* /var/www/html/      //将wordprss下所有的文件复制到apache服务器下的根目录</span><br><span class=\"line\">cd /var/www/html/wordpress/   //进入wordpress文件夹下</span><br><span class=\"line\">cp wp-config-sample.php wp-config.php  //复制配置文件</span><br><span class=\"line\">vim wp-config.php  //编辑wordpress的配置文件</span><br><span class=\"line\">这个里面配置的一定要与数据库对应的账号密码吻合才行</span><br></pre></td></tr></table></figure>\n<p>最完成的时候再次访问网站一个填好默认配置，一个博客网站就搭建好了，并没有想像的那么难。</p>\n<p><img src=\"/2021/01/10/wordpress安装步骤/1240-20210110192000056.png\" alt=\"屏幕快照 2017-03-28 上午2.10.51.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>###安装：<br>相对于自己去配置PHP,MYSQL,及HTTP服务，安装LAMP服务器系统（Linux、Apache、MySQL、PHP ）确实好了太多太多，不过自己去配坑多，也是能够很好的吸收建站知识。<br>创建LAMP直接下载套件：yum -y install httpd mysql mysql-server php php-mysql php-gd php-xml<br>yum 是Linux下包管理命令，<br><img src=\"/2021/01/10/wordpress安装步骤/1240.png\" alt=\"屏幕快照 2017-03-28 上午1.27.46.png\"><br>这种情况下需要自己去下载mysql:</p>\n<h1 id=\"下载mysql源安装包\"><a href=\"#下载mysql源安装包\" class=\"headerlink\" title=\"下载mysql源安装包\"></a>下载mysql源安装包</h1><p>shell&gt; wget <a href=\"http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm\" target=\"_blank\" rel=\"noopener\">http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</a></p>\n<h1 id=\"安装mysql源\"><a href=\"#安装mysql源\" class=\"headerlink\" title=\"安装mysql源\"></a>安装mysql源</h1><p>shell&gt; yum localinstall mysql57-community-release-el7-8.noarch.rpm<br>检查mysql源是否安装成功<br>shell&gt; yum repolist enabled | grep “mysql.<em>-community.</em>“<br>￼<br> 看到上图所示表示安装成功<br>2、安装MySQL<br>shell&gt; yum install mysql-community-server</p>\n<p><img src=\"/2021/01/10/wordpress安装步骤/1240-20210110191959901.png\" alt=\"屏幕快照 2017-03-28 上午1.30.47.png\"><br>要安装的东西挺多的</p>\n<p>在数据库的操作中学到了几个有用的命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动</span><br><span class=\"line\">shell&gt; systemctl start mysqld</span><br><span class=\"line\">查看MySQL的启动状态</span><br><span class=\"line\">shell&gt; systemctl status mysqld</span><br><span class=\"line\">开机启动</span><br><span class=\"line\">shell&gt; systemctl enable mysqld</span><br><span class=\"line\">shell&gt; systemctl daemon-reload</span><br></pre></td></tr></table></figure></p>\n<p>在日志里面查看生成的临时密码，可以通过下面命令快速查找<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; grep &apos;temporary password&apos; /var/log/mysqld.log</span><br><span class=\"line\">//连接数据库</span><br><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\">//重置密码</span><br><span class=\"line\"> ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;MyNewPass4!&apos;; </span><br><span class=\"line\">//添加远程账号：这个非常有用</span><br><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO &apos;yangxin&apos;@&apos;%&apos; IDENTIFIED BY &apos;Yangxin0917!&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure></p>\n<p>参考：[<a href=\"http://www.cnblogs.com/hcbin/archive/2010/04/23/1718379.html\" target=\"_blank\" rel=\"noopener\"><a href=\"http://www.cnblogs.com/hcbin/archive/2010/04/23/1718379.html\" target=\"_blank\" rel=\"noopener\">MySQL] - MySQL的Grant命令</a></a></p>\n<p>修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：<br>[mysqld]<br>character_set_server=utf8<br>init_connect=’SET NAMES utf8’</p>\n<p>重新启动mysql服务使配置生效：<br>systemctl restart mysqld</p>\n<p>在数据库操作中有几个命令非常重要：<br>create database <strong><em><br>drop database </em></strong></p>\n<p>对于处理初始化主机，腾讯官方提供了非常好的例子：</p>\n<p>下载Wordpress的包一定要最新的，老的包会有很多坑，最好是去官网上确认下是不是最新的版本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 wget http://cn.wordpress.org/wordpress-3.3.2-zh_CN.zip   //下载 </span><br><span class=\"line\">3 unzip wordpress-3.3.2-zh_CN.zip    //解压 </span><br><span class=\"line\">5 cp wordpress/* /var/www/html/      //将wordprss下所有的文件复制到apache服务器下的根目录</span><br><span class=\"line\">cd /var/www/html/wordpress/   //进入wordpress文件夹下</span><br><span class=\"line\">cp wp-config-sample.php wp-config.php  //复制配置文件</span><br><span class=\"line\">vim wp-config.php  //编辑wordpress的配置文件</span><br><span class=\"line\">这个里面配置的一定要与数据库对应的账号密码吻合才行</span><br></pre></td></tr></table></figure>\n<p>最完成的时候再次访问网站一个填好默认配置，一个博客网站就搭建好了，并没有想像的那么难。</p>\n<p><img src=\"/2021/01/10/wordpress安装步骤/1240-20210110192000056.png\" alt=\"屏幕快照 2017-03-28 上午2.10.51.png\"></p>\n"},{"title":"使用protobuf统一创建项目类","date":"2019-03-06T17:34:52.000Z","_content":"\n在项目开发中我们往往需要进行模型设计，为一个对象配置多个属性，以前的方法前后端都需要分别进行设置，往往还容易出错，重复编写，实际上谷歌早就提供了一套成熟可行的方法可以统一开发中的模型，那就是：\n[Protobuf](https://developers.google.com/protocol-buffers/docs/proto?hl=zh-cn)\n\n先在Github下载[源代码](https://github.com/protocolbuffers/protobuf)\n下载后通过命令行进行安装：\n    \n     1 $ ./autogen.sh\n      2 $ ./configure\n      3 $ make\n      4 $ make check\n      5 $ sudo make install\n\n安装耗时较多，完成最后一步后可以看到命令行中多了protoc这个命令，主要的作用是把proto源文件转化为目标文件（包括Java\\python\\oc\\go）中的类型定义文件。\n主要命令示例：\n    \n    //DIR为路径\n    protoc --proto_path=$DIR --objc_out=$DIR  Define.proto\n    \n     --cpp_out=OUT_DIR           Generate C++ header and source.\n     --csharp_out=OUT_DIR        Generate C# source file.\n     --java_out=OUT_DIR          Generate Java source file.\n     --js_out=OUT_DIR            Generate JavaScript source.\n     --objc_out=OUT_DIR          Generate Objective C header and source.\n     --php_out=OUT_DIR           Generate PHP source file.\n     --python_out=OUT_DIR        Generate Python source file.\n     --ruby_out=OUT_DIR          Generate Ruby source file.\n\n以OC为例，转换成功后会生成.h和.m文件，把生成后的放入项目中，在项目Pod中引入：\n  pod 'Protobuf', '~> 3.4.0'\n\n如果手动加入需要添加:-fno-objc-arc  因为该类不支https://blog.csdn.net/u010019717/article/details/44830601持ARC\n配置好会在项目中就可以直接使用该类了，特别方便。\n\n关于proto书写格式\n    \n    syntax = \"proto2\";\n    \n    package XHR.Group;\n    import \"XHR.BaseDefine.proto\";\n    option optimize_for = LITE_RUNTIME;\n    \n    // CID_GROUP_REQ_GROUP_LIST             0x0301      获取群列表\n    message XHRGroupListReq{\n        \trequired string uid = 1;\n        \trequired uint64 latest_update_time = 2;\n    }\n    \n    // CID_GROUP_RSP_GROUP_LIST             0x0302   \n    message XHRGroupListRsp{\n    \t    required XHR.BaseDefine.ResultType result_code = 1;\n        required string result_string = 2;\n        required string uid = 3;\n        repeated XHR.BaseDefine.GroupInfo group_list = 4;\n        required uint64 latest_update_time = 5;\n    }\n\n参考文章：\n[Protocol Buffers(Protobuf)开发者指南---概览](https://blog.csdn.net/u010019717/article/details/44830573)\n[Protobuf3语言指南](https://blog.csdn.net/u011518120/article/details/54604615#JSONMapping)\n [Protobuf 从入门到实战](https://www.cnblogs.com/NeilZhang/p/8410589.html)","source":"_posts/使用protobuf统一创建项目类.md","raw":"---\ntitle: 使用protobuf统一创建项目类\ndate: 2019-03-06 17:34:52\ntags: protobuf\ncategories: 编程工具\n---\n\n在项目开发中我们往往需要进行模型设计，为一个对象配置多个属性，以前的方法前后端都需要分别进行设置，往往还容易出错，重复编写，实际上谷歌早就提供了一套成熟可行的方法可以统一开发中的模型，那就是：\n[Protobuf](https://developers.google.com/protocol-buffers/docs/proto?hl=zh-cn)\n\n先在Github下载[源代码](https://github.com/protocolbuffers/protobuf)\n下载后通过命令行进行安装：\n    \n     1 $ ./autogen.sh\n      2 $ ./configure\n      3 $ make\n      4 $ make check\n      5 $ sudo make install\n\n安装耗时较多，完成最后一步后可以看到命令行中多了protoc这个命令，主要的作用是把proto源文件转化为目标文件（包括Java\\python\\oc\\go）中的类型定义文件。\n主要命令示例：\n    \n    //DIR为路径\n    protoc --proto_path=$DIR --objc_out=$DIR  Define.proto\n    \n     --cpp_out=OUT_DIR           Generate C++ header and source.\n     --csharp_out=OUT_DIR        Generate C# source file.\n     --java_out=OUT_DIR          Generate Java source file.\n     --js_out=OUT_DIR            Generate JavaScript source.\n     --objc_out=OUT_DIR          Generate Objective C header and source.\n     --php_out=OUT_DIR           Generate PHP source file.\n     --python_out=OUT_DIR        Generate Python source file.\n     --ruby_out=OUT_DIR          Generate Ruby source file.\n\n以OC为例，转换成功后会生成.h和.m文件，把生成后的放入项目中，在项目Pod中引入：\n  pod 'Protobuf', '~> 3.4.0'\n\n如果手动加入需要添加:-fno-objc-arc  因为该类不支https://blog.csdn.net/u010019717/article/details/44830601持ARC\n配置好会在项目中就可以直接使用该类了，特别方便。\n\n关于proto书写格式\n    \n    syntax = \"proto2\";\n    \n    package XHR.Group;\n    import \"XHR.BaseDefine.proto\";\n    option optimize_for = LITE_RUNTIME;\n    \n    // CID_GROUP_REQ_GROUP_LIST             0x0301      获取群列表\n    message XHRGroupListReq{\n        \trequired string uid = 1;\n        \trequired uint64 latest_update_time = 2;\n    }\n    \n    // CID_GROUP_RSP_GROUP_LIST             0x0302   \n    message XHRGroupListRsp{\n    \t    required XHR.BaseDefine.ResultType result_code = 1;\n        required string result_string = 2;\n        required string uid = 3;\n        repeated XHR.BaseDefine.GroupInfo group_list = 4;\n        required uint64 latest_update_time = 5;\n    }\n\n参考文章：\n[Protocol Buffers(Protobuf)开发者指南---概览](https://blog.csdn.net/u010019717/article/details/44830573)\n[Protobuf3语言指南](https://blog.csdn.net/u011518120/article/details/54604615#JSONMapping)\n [Protobuf 从入门到实战](https://www.cnblogs.com/NeilZhang/p/8410589.html)","slug":"使用protobuf统一创建项目类","published":1,"updated":"2021-05-14T02:01:17.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno4s0030kuo4les8hyjs","content":"<p>在项目开发中我们往往需要进行模型设计，为一个对象配置多个属性，以前的方法前后端都需要分别进行设置，往往还容易出错，重复编写，实际上谷歌早就提供了一套成熟可行的方法可以统一开发中的模型，那就是：<br><a href=\"https://developers.google.com/protocol-buffers/docs/proto?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">Protobuf</a></p>\n<p>先在Github下载<a href=\"https://github.com/protocolbuffers/protobuf\" target=\"_blank\" rel=\"noopener\">源代码</a><br>下载后通过命令行进行安装：</p>\n<pre><code>1 $ ./autogen.sh\n 2 $ ./configure\n 3 $ make\n 4 $ make check\n 5 $ sudo make install\n</code></pre><p>安装耗时较多，完成最后一步后可以看到命令行中多了protoc这个命令，主要的作用是把proto源文件转化为目标文件（包括Java\\python\\oc\\go）中的类型定义文件。<br>主要命令示例：</p>\n<pre><code>//DIR为路径\nprotoc --proto_path=$DIR --objc_out=$DIR  Define.proto\n\n --cpp_out=OUT_DIR           Generate C++ header and source.\n --csharp_out=OUT_DIR        Generate C# source file.\n --java_out=OUT_DIR          Generate Java source file.\n --js_out=OUT_DIR            Generate JavaScript source.\n --objc_out=OUT_DIR          Generate Objective C header and source.\n --php_out=OUT_DIR           Generate PHP source file.\n --python_out=OUT_DIR        Generate Python source file.\n --ruby_out=OUT_DIR          Generate Ruby source file.\n</code></pre><p>以OC为例，转换成功后会生成.h和.m文件，把生成后的放入项目中，在项目Pod中引入：<br>  pod ‘Protobuf’, ‘~&gt; 3.4.0’</p>\n<p>如果手动加入需要添加:-fno-objc-arc  因为该类不支<a href=\"https://blog.csdn.net/u010019717/article/details/44830601持ARC\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010019717/article/details/44830601持ARC</a><br>配置好会在项目中就可以直接使用该类了，特别方便。</p>\n<p>关于proto书写格式</p>\n<pre><code>syntax = &quot;proto2&quot;;\n\npackage XHR.Group;\nimport &quot;XHR.BaseDefine.proto&quot;;\noption optimize_for = LITE_RUNTIME;\n\n// CID_GROUP_REQ_GROUP_LIST             0x0301      获取群列表\nmessage XHRGroupListReq{\n        required string uid = 1;\n        required uint64 latest_update_time = 2;\n}\n\n// CID_GROUP_RSP_GROUP_LIST             0x0302   \nmessage XHRGroupListRsp{\n        required XHR.BaseDefine.ResultType result_code = 1;\n    required string result_string = 2;\n    required string uid = 3;\n    repeated XHR.BaseDefine.GroupInfo group_list = 4;\n    required uint64 latest_update_time = 5;\n}\n</code></pre><p>参考文章：<br><a href=\"https://blog.csdn.net/u010019717/article/details/44830573\" target=\"_blank\" rel=\"noopener\">Protocol Buffers(Protobuf)开发者指南—概览</a><br><a href=\"https://blog.csdn.net/u011518120/article/details/54604615#JSONMapping\" target=\"_blank\" rel=\"noopener\">Protobuf3语言指南</a><br> <a href=\"https://www.cnblogs.com/NeilZhang/p/8410589.html\" target=\"_blank\" rel=\"noopener\">Protobuf 从入门到实战</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在项目开发中我们往往需要进行模型设计，为一个对象配置多个属性，以前的方法前后端都需要分别进行设置，往往还容易出错，重复编写，实际上谷歌早就提供了一套成熟可行的方法可以统一开发中的模型，那就是：<br><a href=\"https://developers.google.com/protocol-buffers/docs/proto?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">Protobuf</a></p>\n<p>先在Github下载<a href=\"https://github.com/protocolbuffers/protobuf\" target=\"_blank\" rel=\"noopener\">源代码</a><br>下载后通过命令行进行安装：</p>\n<pre><code>1 $ ./autogen.sh\n 2 $ ./configure\n 3 $ make\n 4 $ make check\n 5 $ sudo make install\n</code></pre><p>安装耗时较多，完成最后一步后可以看到命令行中多了protoc这个命令，主要的作用是把proto源文件转化为目标文件（包括Java\\python\\oc\\go）中的类型定义文件。<br>主要命令示例：</p>\n<pre><code>//DIR为路径\nprotoc --proto_path=$DIR --objc_out=$DIR  Define.proto\n\n --cpp_out=OUT_DIR           Generate C++ header and source.\n --csharp_out=OUT_DIR        Generate C# source file.\n --java_out=OUT_DIR          Generate Java source file.\n --js_out=OUT_DIR            Generate JavaScript source.\n --objc_out=OUT_DIR          Generate Objective C header and source.\n --php_out=OUT_DIR           Generate PHP source file.\n --python_out=OUT_DIR        Generate Python source file.\n --ruby_out=OUT_DIR          Generate Ruby source file.\n</code></pre><p>以OC为例，转换成功后会生成.h和.m文件，把生成后的放入项目中，在项目Pod中引入：<br>  pod ‘Protobuf’, ‘~&gt; 3.4.0’</p>\n<p>如果手动加入需要添加:-fno-objc-arc  因为该类不支<a href=\"https://blog.csdn.net/u010019717/article/details/44830601持ARC\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010019717/article/details/44830601持ARC</a><br>配置好会在项目中就可以直接使用该类了，特别方便。</p>\n<p>关于proto书写格式</p>\n<pre><code>syntax = &quot;proto2&quot;;\n\npackage XHR.Group;\nimport &quot;XHR.BaseDefine.proto&quot;;\noption optimize_for = LITE_RUNTIME;\n\n// CID_GROUP_REQ_GROUP_LIST             0x0301      获取群列表\nmessage XHRGroupListReq{\n        required string uid = 1;\n        required uint64 latest_update_time = 2;\n}\n\n// CID_GROUP_RSP_GROUP_LIST             0x0302   \nmessage XHRGroupListRsp{\n        required XHR.BaseDefine.ResultType result_code = 1;\n    required string result_string = 2;\n    required string uid = 3;\n    repeated XHR.BaseDefine.GroupInfo group_list = 4;\n    required uint64 latest_update_time = 5;\n}\n</code></pre><p>参考文章：<br><a href=\"https://blog.csdn.net/u010019717/article/details/44830573\" target=\"_blank\" rel=\"noopener\">Protocol Buffers(Protobuf)开发者指南—概览</a><br><a href=\"https://blog.csdn.net/u011518120/article/details/54604615#JSONMapping\" target=\"_blank\" rel=\"noopener\">Protobuf3语言指南</a><br> <a href=\"https://www.cnblogs.com/NeilZhang/p/8410589.html\" target=\"_blank\" rel=\"noopener\">Protobuf 从入门到实战</a></p>\n"},{"title":"程序员修炼之道-从小工到专家读书感悟","date":"2019-03-06T15:47:26.000Z","_content":"\n\n\n{% asset_img 1.jpg %}\n\n这是一本程序员思想各级，意识更新的书籍，软件不仅仅是一个工程项目，而更应该是一个严格的艺术品，我们需要更多的科学的方法，前辈的经验进行构造。\n\n在软件开发中有很有红线，比如破窗理论，出现了质量差的代码维护很麻烦，项目会越来越糟糕\n\n石头汤：软件的设计不断的增加的，但你心中要有个明确的框架，清晰的想法才能面对接下来要做的事情\n\n煮青蛙：软件设计一定要规范，不然自己是怎么把程序写死的自己都不知道\n\n正交性设计：各部分应该弱相关，最好的没有关系，不需要进行联运设计是最好的，写羞怯的代码非常重要。解耦设计，对外尽量影响内部的细节，外内模块化设计，元程序编程，方便后台的更换设计。\n\n不要去重复自己，利用代码是很好的办法，不要去偷懒放弃长久的规范设计，不能靠巧合编程，去拼凑代码，这样是很不利的，其它使用一门技术不要用太多试错的方式去完成，而是有很熟悉的理解后再使用能够避免很多不必要的错误\n\n做一个progmatic程序员要了解算法，降低计算的复杂维度，另外需要对以前不合适的代码进行重构，怎样减少优化，而不是去增加东西，写易于测试的代码，更方便开发打出Bug\n\n做一名实效程序员重要的是关心自己的技艺，开发出漂亮的软件，不然用生命去编程是为什么呢？\n\n必须熟练精通一门语言：C++\n\n熟练一种开发工具：Xcode,Visual Studio\n\n熟练一种纯文本工具：Vim\n\n熟练进行源码控制：Git\n\n另外像书中一样为自己定下学习目标：\n\n每年至少一门编程语言，每三个月至少一本技术书籍，\n\n学习IEEE 的文章和讨论的话题，学习Unix程序艺术、Effective C++等优秀的技术书籍","source":"_posts/程序员修炼之道-从小工到专家读书感悟.md","raw":"---\ntitle: 程序员修炼之道-从小工到专家读书感悟\ndate: 2019-03-06 15:47:26\ntags: 修炼\ncategories: 编程思想\n---\n\n\n\n{% asset_img 1.jpg %}\n\n这是一本程序员思想各级，意识更新的书籍，软件不仅仅是一个工程项目，而更应该是一个严格的艺术品，我们需要更多的科学的方法，前辈的经验进行构造。\n\n在软件开发中有很有红线，比如破窗理论，出现了质量差的代码维护很麻烦，项目会越来越糟糕\n\n石头汤：软件的设计不断的增加的，但你心中要有个明确的框架，清晰的想法才能面对接下来要做的事情\n\n煮青蛙：软件设计一定要规范，不然自己是怎么把程序写死的自己都不知道\n\n正交性设计：各部分应该弱相关，最好的没有关系，不需要进行联运设计是最好的，写羞怯的代码非常重要。解耦设计，对外尽量影响内部的细节，外内模块化设计，元程序编程，方便后台的更换设计。\n\n不要去重复自己，利用代码是很好的办法，不要去偷懒放弃长久的规范设计，不能靠巧合编程，去拼凑代码，这样是很不利的，其它使用一门技术不要用太多试错的方式去完成，而是有很熟悉的理解后再使用能够避免很多不必要的错误\n\n做一个progmatic程序员要了解算法，降低计算的复杂维度，另外需要对以前不合适的代码进行重构，怎样减少优化，而不是去增加东西，写易于测试的代码，更方便开发打出Bug\n\n做一名实效程序员重要的是关心自己的技艺，开发出漂亮的软件，不然用生命去编程是为什么呢？\n\n必须熟练精通一门语言：C++\n\n熟练一种开发工具：Xcode,Visual Studio\n\n熟练一种纯文本工具：Vim\n\n熟练进行源码控制：Git\n\n另外像书中一样为自己定下学习目标：\n\n每年至少一门编程语言，每三个月至少一本技术书籍，\n\n学习IEEE 的文章和讨论的话题，学习Unix程序艺术、Effective C++等优秀的技术书籍","slug":"程序员修炼之道-从小工到专家读书感悟","published":1,"updated":"2021-05-14T02:01:17.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno4u0033kuo4s2bb6pr1","content":"<img src=\"/2019/03/06/程序员修炼之道-从小工到专家读书感悟/1.jpg\">\n<p>这是一本程序员思想各级，意识更新的书籍，软件不仅仅是一个工程项目，而更应该是一个严格的艺术品，我们需要更多的科学的方法，前辈的经验进行构造。</p>\n<p>在软件开发中有很有红线，比如破窗理论，出现了质量差的代码维护很麻烦，项目会越来越糟糕</p>\n<p>石头汤：软件的设计不断的增加的，但你心中要有个明确的框架，清晰的想法才能面对接下来要做的事情</p>\n<p>煮青蛙：软件设计一定要规范，不然自己是怎么把程序写死的自己都不知道</p>\n<p>正交性设计：各部分应该弱相关，最好的没有关系，不需要进行联运设计是最好的，写羞怯的代码非常重要。解耦设计，对外尽量影响内部的细节，外内模块化设计，元程序编程，方便后台的更换设计。</p>\n<p>不要去重复自己，利用代码是很好的办法，不要去偷懒放弃长久的规范设计，不能靠巧合编程，去拼凑代码，这样是很不利的，其它使用一门技术不要用太多试错的方式去完成，而是有很熟悉的理解后再使用能够避免很多不必要的错误</p>\n<p>做一个progmatic程序员要了解算法，降低计算的复杂维度，另外需要对以前不合适的代码进行重构，怎样减少优化，而不是去增加东西，写易于测试的代码，更方便开发打出Bug</p>\n<p>做一名实效程序员重要的是关心自己的技艺，开发出漂亮的软件，不然用生命去编程是为什么呢？</p>\n<p>必须熟练精通一门语言：C++</p>\n<p>熟练一种开发工具：Xcode,Visual Studio</p>\n<p>熟练一种纯文本工具：Vim</p>\n<p>熟练进行源码控制：Git</p>\n<p>另外像书中一样为自己定下学习目标：</p>\n<p>每年至少一门编程语言，每三个月至少一本技术书籍，</p>\n<p>学习IEEE 的文章和讨论的话题，学习Unix程序艺术、Effective C++等优秀的技术书籍</p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/2019/03/06/程序员修炼之道-从小工到专家读书感悟/1.jpg\">\n<p>这是一本程序员思想各级，意识更新的书籍，软件不仅仅是一个工程项目，而更应该是一个严格的艺术品，我们需要更多的科学的方法，前辈的经验进行构造。</p>\n<p>在软件开发中有很有红线，比如破窗理论，出现了质量差的代码维护很麻烦，项目会越来越糟糕</p>\n<p>石头汤：软件的设计不断的增加的，但你心中要有个明确的框架，清晰的想法才能面对接下来要做的事情</p>\n<p>煮青蛙：软件设计一定要规范，不然自己是怎么把程序写死的自己都不知道</p>\n<p>正交性设计：各部分应该弱相关，最好的没有关系，不需要进行联运设计是最好的，写羞怯的代码非常重要。解耦设计，对外尽量影响内部的细节，外内模块化设计，元程序编程，方便后台的更换设计。</p>\n<p>不要去重复自己，利用代码是很好的办法，不要去偷懒放弃长久的规范设计，不能靠巧合编程，去拼凑代码，这样是很不利的，其它使用一门技术不要用太多试错的方式去完成，而是有很熟悉的理解后再使用能够避免很多不必要的错误</p>\n<p>做一个progmatic程序员要了解算法，降低计算的复杂维度，另外需要对以前不合适的代码进行重构，怎样减少优化，而不是去增加东西，写易于测试的代码，更方便开发打出Bug</p>\n<p>做一名实效程序员重要的是关心自己的技艺，开发出漂亮的软件，不然用生命去编程是为什么呢？</p>\n<p>必须熟练精通一门语言：C++</p>\n<p>熟练一种开发工具：Xcode,Visual Studio</p>\n<p>熟练一种纯文本工具：Vim</p>\n<p>熟练进行源码控制：Git</p>\n<p>另外像书中一样为自己定下学习目标：</p>\n<p>每年至少一门编程语言，每三个月至少一本技术书籍，</p>\n<p>学习IEEE 的文章和讨论的话题，学习Unix程序艺术、Effective C++等优秀的技术书籍</p>\n"},{"title":"跨平台开发手机网页调试技巧","date":"2021-01-09T18:07:35.000Z","_content":"\n当移动跨平台项目远程加载网址时，为了进行可试化调试\n\n安卓可以使用Chrome提供的Inspect进行调试\n\n苹果可以打开Safari进行调试\n\n**安卓手机加载远程网页**\n\n1.安卓手机连接电脑，允许调试\n\n2.打开Chrome流量器输入：chrome://inspect/#devices\n\n在线调试器，浏览器直接连接手机观察网页\n\n3.配置相关网络请求地址端口号，刷新页面即可同步手机加载的页面\n\n4.点击进入相关页面直接进行浏览器调试、刷新（需要科学上网）\n\n**苹果手机加载远程网页**\n\n1.苹果手机连接电脑，允许信任设备\n\n2.运行项目打开Safari\n\n3.在Develop中选择对应移动调试即可查看网页元素\n\n总结：安卓手机调试较为方便、苹果手机最好在Xcode环境下进行原生调试较方便，但同步较花时间","source":"_posts/跨平台开发手机网页调试技巧.md","raw":"---\ntitle: 跨平台开发手机网页调试技巧\ndate: 2021-01-09 18:07:35\ntags: 调试\ncategories: 前端开发\n---\n\n当移动跨平台项目远程加载网址时，为了进行可试化调试\n\n安卓可以使用Chrome提供的Inspect进行调试\n\n苹果可以打开Safari进行调试\n\n**安卓手机加载远程网页**\n\n1.安卓手机连接电脑，允许调试\n\n2.打开Chrome流量器输入：chrome://inspect/#devices\n\n在线调试器，浏览器直接连接手机观察网页\n\n3.配置相关网络请求地址端口号，刷新页面即可同步手机加载的页面\n\n4.点击进入相关页面直接进行浏览器调试、刷新（需要科学上网）\n\n**苹果手机加载远程网页**\n\n1.苹果手机连接电脑，允许信任设备\n\n2.运行项目打开Safari\n\n3.在Develop中选择对应移动调试即可查看网页元素\n\n总结：安卓手机调试较为方便、苹果手机最好在Xcode环境下进行原生调试较方便，但同步较花时间","slug":"跨平台开发手机网页调试技巧","published":1,"updated":"2021-05-14T02:01:17.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno4w0037kuo4xb32o8r8","content":"<p>当移动跨平台项目远程加载网址时，为了进行可试化调试</p>\n<p>安卓可以使用Chrome提供的Inspect进行调试</p>\n<p>苹果可以打开Safari进行调试</p>\n<p><strong>安卓手机加载远程网页</strong></p>\n<p>1.安卓手机连接电脑，允许调试</p>\n<p>2.打开Chrome流量器输入：chrome://inspect/#devices</p>\n<p>在线调试器，浏览器直接连接手机观察网页</p>\n<p>3.配置相关网络请求地址端口号，刷新页面即可同步手机加载的页面</p>\n<p>4.点击进入相关页面直接进行浏览器调试、刷新（需要科学上网）</p>\n<p><strong>苹果手机加载远程网页</strong></p>\n<p>1.苹果手机连接电脑，允许信任设备</p>\n<p>2.运行项目打开Safari</p>\n<p>3.在Develop中选择对应移动调试即可查看网页元素</p>\n<p>总结：安卓手机调试较为方便、苹果手机最好在Xcode环境下进行原生调试较方便，但同步较花时间</p>\n","site":{"data":{}},"excerpt":"","more":"<p>当移动跨平台项目远程加载网址时，为了进行可试化调试</p>\n<p>安卓可以使用Chrome提供的Inspect进行调试</p>\n<p>苹果可以打开Safari进行调试</p>\n<p><strong>安卓手机加载远程网页</strong></p>\n<p>1.安卓手机连接电脑，允许调试</p>\n<p>2.打开Chrome流量器输入：chrome://inspect/#devices</p>\n<p>在线调试器，浏览器直接连接手机观察网页</p>\n<p>3.配置相关网络请求地址端口号，刷新页面即可同步手机加载的页面</p>\n<p>4.点击进入相关页面直接进行浏览器调试、刷新（需要科学上网）</p>\n<p><strong>苹果手机加载远程网页</strong></p>\n<p>1.苹果手机连接电脑，允许信任设备</p>\n<p>2.运行项目打开Safari</p>\n<p>3.在Develop中选择对应移动调试即可查看网页元素</p>\n<p>总结：安卓手机调试较为方便、苹果手机最好在Xcode环境下进行原生调试较方便，但同步较花时间</p>\n"},{"title":"成为更好的程序员要做到的10个方法","date":"2019-03-06T15:48:15.000Z","_content":"\n\n\n{% asset_img 1.png  image %}\n\n优秀程序员要做到的10件事情：\n\n1、看别人的代码\n\n2、让别人看你的代码\n\n3、写新代码之前解决遗留的问题\n\n4、学习新技术\n\n5、保持简洁\n\n6、以写博客的方式讲述你做的项目、写的代码、学到的东西\n\n7、对开源作出贡献\n\n8、修下它，而不是用暴力\n\n9、增加代码%1的覆盖率（说的是重用吗）\n\n10、经常活动不要一直坐着","source":"_posts/成为更好的程序员要做到的10个方法.md","raw":"---\ntitle: 成为更好的程序员要做到的10个方法\ndate: 2019-03-06 15:48:15\ntags: 修炼\ncategories: 编程思想\n---\n\n\n\n{% asset_img 1.png  image %}\n\n优秀程序员要做到的10件事情：\n\n1、看别人的代码\n\n2、让别人看你的代码\n\n3、写新代码之前解决遗留的问题\n\n4、学习新技术\n\n5、保持简洁\n\n6、以写博客的方式讲述你做的项目、写的代码、学到的东西\n\n7、对开源作出贡献\n\n8、修下它，而不是用暴力\n\n9、增加代码%1的覆盖率（说的是重用吗）\n\n10、经常活动不要一直坐着","slug":"成为更好的程序员要做到的10个方法","published":1,"updated":"2021-05-14T02:01:17.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno4y0039kuo4udtx43qv","content":"<img src=\"/2019/03/06/成为更好的程序员要做到的10个方法/1.png\" title=\"image\">\n<p>优秀程序员要做到的10件事情：</p>\n<p>1、看别人的代码</p>\n<p>2、让别人看你的代码</p>\n<p>3、写新代码之前解决遗留的问题</p>\n<p>4、学习新技术</p>\n<p>5、保持简洁</p>\n<p>6、以写博客的方式讲述你做的项目、写的代码、学到的东西</p>\n<p>7、对开源作出贡献</p>\n<p>8、修下它，而不是用暴力</p>\n<p>9、增加代码%1的覆盖率（说的是重用吗）</p>\n<p>10、经常活动不要一直坐着</p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/2019/03/06/成为更好的程序员要做到的10个方法/1.png\" title=\"image\">\n<p>优秀程序员要做到的10件事情：</p>\n<p>1、看别人的代码</p>\n<p>2、让别人看你的代码</p>\n<p>3、写新代码之前解决遗留的问题</p>\n<p>4、学习新技术</p>\n<p>5、保持简洁</p>\n<p>6、以写博客的方式讲述你做的项目、写的代码、学到的东西</p>\n<p>7、对开源作出贡献</p>\n<p>8、修下它，而不是用暴力</p>\n<p>9、增加代码%1的覆盖率（说的是重用吗）</p>\n<p>10、经常活动不要一直坐着</p>\n"},{"title":"好分期","date":"2019-03-06T15:25:30.000Z","_content":"\n\n\n# 好分期后台管理iOS端维护要点总结：\n\n\n\n{% asset_img 1.png  %}\n\n项目概况：主要为后台审核人员操作手机端操作，已经有人开发得差不多了，所以我的工作主要是维护，在维护中学到了些新东西，总结下\n\n好分期后台管理iOS端开发总结：\n**标准化开发，明确你每句代码的意图**\n\n在前人做了详细备注的基础下，代码一看就懂，没有丝毫入坑的感觉，数据的收发非常的规范，而且后期的扩展相对轻松，不经感叹做好项目代码记录是规范化备注是多么重要的一件事情，不过也不一定是每句代码都 要说明 点什么，除非你是新手第一次接手项目。另外发现几个稍微有点欠妥的地方，一是把网络请求接口直接写在项目代码里面不分层虽然方便了，但是后台如果要统一改接口名称 要一个个去找，不是很方便 。二是搜索这个控件在取消的时候并没进行重新请求（已经修改）。界面全部采用TableView作为基础在Cell上布局控件，这种做法让我耳目一新，但是模块化的效果好很明显。不过重复控件太多，有些可以通过Cell重用实现的。还有就是在加载的时候如果网络出现问题，用户只能等待，这样的体验不是很好，这点也是我以后写代码要注意的地方。这款App主要的功能作用是显示数据，复杂的计算和操作后台都处理好了，所以项目并不算大。维护起来也很轻松\n\n**键盘弹出界面自动移动防止遮挡**\n\n\t\t///IQKeyboardManager:自动处理键盘事件的第三方库\n\t\t\n\t\t​    IQKeyboardManager *manager = [IQKeyboardManager sharedManager];\n\t\t\n\t\t​    manager.enable = YES;//控制整个功能是否启用\n\t\t\n\t\t​    manager.shouldResignOnTouchOutside = YES;//控制点击背景是否收起键盘\n\t\t\n\t\t​    manager.shouldToolbarUsesTextFieldTintColor = YES;//控制键盘上的工具条文字颜色是否用户自定义\n\t\t\n\t\t​    manager.enableAutoToolbar = NO;//控制是否显示键盘上的工具条\n\t\t\n\t\t​    manager.preventShowingBottomBlankSpace = NO;//防止IQKeyboardManager让rootview上滑过度,默认是YES\n\n**IPS****不用第三方可以手动进行采取上传到服务器，用于点对点推送：** \n\n  //注册UserNotification,以获取推送通知的权限\n\n\t\t​    UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeSound | UIUserNotificationTypeAlert | UIUserNotificationTypeBadge categories:nil];\n\t\t\n\t\t​    [application registerUserNotificationSettings:settings];\n\t\t\n\t\t​    //注册远程推送\n\t\t\n\t\t​    [application registerForRemoteNotifications];\n\t\t\n\t\t​    \n\t\t\n\t\t​    // Override point for customization after application launch.\n\t\t\n\t\t​    return YES;\n\t\t\n\t\t}\n\t\t\n\t\t– (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {//处理推送消息\n\t\t\n\t\t​    NSLog(@”userinfo：%@”, userInfo);\n\t\t\n\t\t​    NSLog(@”收到推送消息：%@”, [[userInfo objectForKey:@”aps”] objectForKey:@”alert”]);\n\t\t\n\t\t}\n\t\t\n\t\t///如果注册失败，比如没有证书等等调用\n\t\t\n\t\t– (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {\n\t\t\n\t\t​    NSLog(@”远程通知注册失败：%@”, error);\n\t\t\n\t\t}\n\t\t\n\t\t///用户同意后，会调用此程序，获取系统的deviceToken，应把deviceToken传给服务器保存，此函数会在程序每次启动时调用(前提是用户允许通知)\n\t\t\n\t\t– (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n\t\t\n\t\t​    //NSLog(@”获取到的Token值为：%@”, deviceToken);\n\t\t\n\t\t​    [Defaults setObject:deviceToken forKey:@”deviceToken”];//Token值，用于登录的时候向后台发送用户对应的设备，方便针对进行推送\n\t\n\t\t\t}\t\n\n**强制更新模块：本地调用 版本号与服务器返回版本号对比大小进行控制** \n\n\t\t– (void)versionUpdate:(double)versionInfo {\n\t\t\n\t\t​    ///系统版本更新\n\t\t\n\t\t​    NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];\n\t\t\n\t\t​    NSString *app_Version = [infoDictionary objectForKey:@”CFBundleShortVersionString”];//app版本\n\t\t\n\t\t​    \n\t\t\n\t\t​    if (versionInfo > [app_Version doubleValue]) {\n\t\t\n\t\t​        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@”提示” message:@”有新版本请立即更新” preferredStyle:UIAlertControllerStyleAlert];\n\t\t\n\t\t​        UIAlertAction *firstAction = [UIAlertAction actionWithTitle:@”立即更新” style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {\n\t\t\n\t\t​            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@”https://www.pgyer.com/obUA”]];\n\t\t\n\t\t​        }];\n\t\t\n\t\t​        [alert addAction:firstAction];\n\t\t\n\t\t​        [self presentViewController:alert animated:YES completion:nil];\n\t\t\n\t​    }\n\t\n\t}\n\n**关于列表的动态添加或删除**\n\n对于TableView或CollectionView 的操作，从网络获取列表数据后，可以直接在本地列表进行操作，后台只需要返回成都或失败即可，没有必要去重新请求，刷新列表\n\n**将上传图片加入主线程队列进行，防止阻断，界面更新放到放线程进行**\n\n​\t\t项目概况：主要为后台审核人员操作手机端操作，已经有人开发得差不多了，所以我的工作主要是维护，在维护中学到了些新东西，总结下\n\n好分期后台管理iOS端开发总结：\n**标准化开发，明确你每句代码的意图**\n\n在前人做了详细备注的基础下，代码一看就懂，没有丝毫入坑的感觉，数据的收发非常的规范，而且后期的扩展相对轻松，不经感叹做好项目代码记录是规范化备注是多么重要的一件事情，不过也不一定是每句代码都 要说明 点什么，除非你是新手第一次接手项目。另外发现几个稍微有点欠妥的地方，一是把网络请求接口直接写在项目代码里面不分层虽然方便了，但是后台如果要统一改接口名称 要一个个去找，不是很方便 。二是搜索这个控件在取消的时候并没进行重新请求（已经修改）。界面全部采用TableView作为基础在Cell上布局控件，这种做法让我耳目一新，但是模块化的效果好很明显。不过重复控件太多，有些可以通过Cell重用实现的。还有就是在加载的时候如果网络出现问题，用户只能等待，这样的体验不是很好，这点也是我以后写代码要注意的地方。这款App主要的功能作用是显示数据，复杂的计算和操作后台都处理好了，所以项目并不算大。维护起来也很轻松\n\n**键盘弹出界面自动移动防止遮挡**\n\n\t\t///IQKeyboardManager:自动处理键盘事件的第三方库\n\t\t\n\t\t​    IQKeyboardManager *manager = [IQKeyboardManager sharedManager];\n\t\t\n\t\t​    manager.enable = YES;//控制整个功能是否启用\n\t\t\n\t\t​    manager.shouldResignOnTouchOutside = YES;//控制点击背景是否收起键盘\n\t\t\n\t\t​    manager.shouldToolbarUsesTextFieldTintColor = YES;//控制键盘上的工具条文字颜色是否用户自定义\n\t\t\n\t\t​    manager.enableAutoToolbar = NO;//控制是否显示键盘上的工具条\n\t\t\n\t\t​    manager.preventShowingBottomBlankSpace = NO;//防止IQKeyboardManager让rootview上滑过度,默认是YES\n\n**IPS****不用第三方可以手动进行采取上传到服务器，用于点对点推送：** \n\n\t\t  //注册UserNotification,以获取推送通知的权限\n\t\t\n\t\t​    UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeSound | UIUserNotificationTypeAlert | UIUserNotificationTypeBadge categories:nil];\n\t\t\n\t\t​    [application registerUserNotificationSettings:settings];\n\t\t\n\t\t​    //注册远程推送\n\t\t\n\t\t​    [application registerForRemoteNotifications];\n\t\t\n\t\t​    \n\t\t\n\t\t​    // Override point for customization after application launch.\n\t\t\n\t\t​    return YES;\n\t\t\n\t\t}\n\t\t\n\t\t– (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {//处理推送消息\n\t\t\n\t\t​    NSLog(@”userinfo：%@”, userInfo);\n\t\t\n\t\t​    NSLog(@”收到推送消息：%@”, [[userInfo objectForKey:@”aps”] objectForKey:@”alert”]);\n\t\t\n\t\t}\n\t\t\n\t\t///如果注册失败，比如没有证书等等调用\n\t\t\n\t\t– (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {\n\t\t\n\t\t​    NSLog(@”远程通知注册失败：%@”, error);\n\t\t\n\t\t}\n\t\t\n\t\t///用户同意后，会调用此程序，获取系统的deviceToken，应把deviceToken传给服务器保存，此函数会在程序每次启动时调用(前提是用户允许通知)\n\t\t\n\t\t– (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n\t\t\n\t\t​    //NSLog(@”获取到的Token值为：%@”, deviceToken);\n\t\t\n\t\t​    [Defaults setObject:deviceToken forKey:@”deviceToken”];//Token值，用于登录的时候向后台发送用户对应的设备，方便针对进行推送\n\t\t\n\t\t}\n\t\t\n\t\t**强制更新模块：本地调用 版本号与服务器返回版本号对比大小进行控制** \n\t\t\n\t\t– (void)versionUpdate:(double)versionInfo {\n\t\t\n\t\t​    ///系统版本更新\n\t\t\n\t\t​    NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];\n\t\t\n\t\t​    NSString *app_Version = [infoDictionary objectForKey:@”CFBundleShortVersionString”];//app版本\n\t\t\n\t\t​    \n\t\t\n\t\t​    if (versionInfo > [app_Version doubleValue]) {\n\t\t\n\t\t​        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@”提示” message:@”有新版本请立即更新” preferredStyle:UIAlertControllerStyleAlert];\n\t\t\n\t\t​        UIAlertAction *firstAction = [UIAlertAction actionWithTitle:@”立即更新” style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {\n\t\t\n\t\t​            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@”https://www.pgyer.com/obUA”]];\n\t\t\n\t\t​        }];\n\t\t\n\t\t​        [alert addAction:firstAction];\n\t\t\n\t\t​        [self presentViewController:alert animated:YES completion:nil];\n\t\n\t​    }\n\t\n\t}\n\n**关于列表的动态添加或删除**\n\n对于TableView或CollectionView 的操作，从网络获取列表数据后，可以直接在本地列表进行操作，后台只需要返回成都或失败即可，没有必要去重新请求，刷新列表\n\n**将上传图片加入主线程队列进行，防止阻断，界面更新放到放线程进行**\n\n\t\t  dispatch_async(dispatch_get_global_queue(0, 0), ^{\n\t\t\n\t\t   队列操作。。。        \n\t\t\n\t\t​        [Service serviceWithJAVAUrl:@”” params:params images:imgArr message:@”” controller:self succeedBlock:^(id response) {\n\t\t\n\t\t​            dispatch_async(dispatch_get_main_queue(), ^{\n\t\t\n\t\t​             \n\t\t\n\t\t​            });\n\t\t\n\t\t​        } failBlock:^{\n\t\t\n\t\t​            dispatch_async(dispatch_get_main_queue(), ^{\n\t\t\n\t\t​            });\n\t\t\n\t\t​        }];\n\t\t\n\t\t​    });\n\t\t\n\t\t带图片带参数AFNetworking上传:\n\t\t\n\t\t\\+ (void)serviceWithUrl:(NSString *)url\n\t\t\n\t\t​                params:(NSDictionary *)params\n\t\t\n\t\t​                images:(NSArray *)images\n\t\t\n\t\t​               message:(NSString *)message\n\t\t\n\t\t​            controller:(id)controller\n\t\t\n\t\t​          succeedBlock:(void (^) (id response))succeedBlock\n\t\t\n\t\t​             failBlock:(void (^) (void))failBlock\n\t\t\n\t\t{\n\t\t\n\t\t​    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];\n\t\t\n\t\t//设置可以接收的数据类型\n\t\t\n\t\t​    manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@”application/json”, @”text/json”, @”text/javascript”, @”text/html”, nil];\n\t\t\n\t\t//设置是否对发送数据进行Json格式化\n\t\t\n\t\t​      //manager.requestSerializer=[AFJSONRequestSerializer serializer];\n\t\t\n\t\t//报头标记，只是作为双方识别的记号而已\n\t\t\n\t\t​    [manager.requestSerializer setAuthorizationHeaderFieldWithUsername:@”RqPs” password:@“***********”];\n\t\t\n\t\t​    \n\t\t\n\t\t​    if (![message isEqualToString:@””]) {\n\t\t\n\t\t​        [SVProgressHUD showWithStatus:message maskType:SVProgressHUDMaskTypeBlack];\n\t\t\n\t\t​    }\n\t\t\n\t\t​    \n\t\t\n\t\t​    NSString *URL = [NSString stringWithFormat:@”%@%@”,BASEURL,url];\n\t\t\n\t\t​    [manager POST:URL parameters:params constructingBodyWithBlock:^(id<AFMultipartFormData> formData) {\n\t\t\n\t\t​        //[SVProgressHUD dismiss];\n\t\t\n\t\t​        \n\t\t\n\t\t​        NSMutableArray *arr = [[NSMutableArray alloc] init];\n\t\t\n\t\t​        for (int i = 0; i < images.count; i++) {\n\t\t\n\t\t​            NSDictionary *image = images[i];\n\t\t\n\t\t​            NSString *fileName = image.allKeys[0];\n\t\t\n\t\t​            int nameCount = 0;\n\t\t\n\t\t​            for (NSString *str in arr) {\n\t\t\n\t\t​                if ([str containsString:image.allKeys[0]]) {\n\t\t\n\t\t​                    nameCount++;\n\t\t\n\t\t​                    ///图片等比例压缩\n\t\t\n\t\t​                }\n\t\t\n\t\t​            }\n\t\t\n\t\t​            \n\t\t\n\t\t​            ///重名 添加后缀\n\t\t\n\t\t​            if (nameCount != 0) {\n\t\t\n\t\t​                fileName = [NSString stringWithFormat:@”%@%d”, image.allKeys[0], nameCount+1];\n\t\t\n\t\t​            }\n\t\t\n\t\t​            \n\t\t\n\t\t​            NSDateFormatter *formatter = [[NSDateFormatter alloc] init];\n\t\t\n\t\t​            [formatter setDateFormat:@”yyyyMMddHHmmssSSS”];\n\t\t\n\t\t​            NSString *dateTime = [formatter stringFromDate:[NSDate date]];\n\t\t\n\t\t​            [arr addObject:[NSString stringWithFormat:@”%@_%@”, fileName, dateTime]];\n\t\t\n\t\t​        }\n\t\t\n\t\t​        \n\t\t\n\t\t​       for (int i = 0; i < images.count; i++) {\n\t\t\n\t\t​           NSDictionary *image = images[i];\n\t\t\n\t\t​           [formData appendPartWithFileData: UIImageJPEGRepresentation(image.allValues[0], 0.0) name:arr[i] fileName:[arr[i] stringByAppendingFormat:@”.png”] mimeType:@”image/png”];\n\t\t\n\t\t​       }\n\t\t\n\t\t​        \n\t\t\n\t\t​    } success:^(AFHTTPRequestOperation *operation, id responseObject) {\n\t\t\n\t\t​        [SVProgressHUD dismiss];\n\t\t\n\t\t​        NSLog(@”%@”, responseObject);\n\t\t\n\t\t​        \n\t\t\n\t\t​        NSDictionary *result = responseObject;\n\t\t\n\t\t​        if (![[NSString stringWithFormat:@”%@”, result[@”Flag”]] isEqualToString:@”1″]) {\n\t\t\n\t\t​            [ExtensionMethod simpleAlertWithMessage:responseObject[@”Message”] controller:controller handler:^{\n\t\t\n\t\t​                if (failBlock == NULL) {\n\t\t\n\t\t​                    return;\n\t\t\n\t\t​                }\n\t\t\n\t\t​                failBlock();\n\t\t\n\t\t​            }];\n\t\t\n\t\t​            return;\n\t\t\n\t\t​        } else if (result == nil) {\n\t\t\n\t\t​            [ExtensionMethod simpleAlertWithMessage:@”后台服务异常，请稍后再试” controller:controller handler:nil];\n\t\t\n\t\t​            return;\n\t\t\n\t\t​        }\n\t\t\n\t\t​        \n\t\t\n\t\t​        succeedBlock(responseObject);\n\t\t\n\t\t​    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n\t\t\n\t\t​        [SVProgressHUD dismiss];\n\t\t\n\t\t​        if (failBlock) {\n\t\t\n\t\t​            [ExtensionMethod simpleAlertWithMessage:@”网络异常，请稍后再试” controller:controller handler:^{\n\t\t\n\t\t​                if (failBlock == NULL) {\n\t\t\n\t\t​                    return;\n\t\t\n\t\t​                }\n\t\n\t​                failBlock();\n\t\n\t​            }];\n\t\n\t​        }\n\t\n\t​    }];\n\t\n\t}\n\n​\t\n\n另外使用了比较好用的第三方控件：RMPickerViewController第三方选择器，UUID设备唯一标记方法","source":"_posts/haofenqi.md","raw":"---\ntitle: 好分期\ndate: 2019-03-06 15:25:30\ntags: 项目\ncategories: 编程思想\n---\n\n\n\n# 好分期后台管理iOS端维护要点总结：\n\n\n\n{% asset_img 1.png  %}\n\n项目概况：主要为后台审核人员操作手机端操作，已经有人开发得差不多了，所以我的工作主要是维护，在维护中学到了些新东西，总结下\n\n好分期后台管理iOS端开发总结：\n**标准化开发，明确你每句代码的意图**\n\n在前人做了详细备注的基础下，代码一看就懂，没有丝毫入坑的感觉，数据的收发非常的规范，而且后期的扩展相对轻松，不经感叹做好项目代码记录是规范化备注是多么重要的一件事情，不过也不一定是每句代码都 要说明 点什么，除非你是新手第一次接手项目。另外发现几个稍微有点欠妥的地方，一是把网络请求接口直接写在项目代码里面不分层虽然方便了，但是后台如果要统一改接口名称 要一个个去找，不是很方便 。二是搜索这个控件在取消的时候并没进行重新请求（已经修改）。界面全部采用TableView作为基础在Cell上布局控件，这种做法让我耳目一新，但是模块化的效果好很明显。不过重复控件太多，有些可以通过Cell重用实现的。还有就是在加载的时候如果网络出现问题，用户只能等待，这样的体验不是很好，这点也是我以后写代码要注意的地方。这款App主要的功能作用是显示数据，复杂的计算和操作后台都处理好了，所以项目并不算大。维护起来也很轻松\n\n**键盘弹出界面自动移动防止遮挡**\n\n\t\t///IQKeyboardManager:自动处理键盘事件的第三方库\n\t\t\n\t\t​    IQKeyboardManager *manager = [IQKeyboardManager sharedManager];\n\t\t\n\t\t​    manager.enable = YES;//控制整个功能是否启用\n\t\t\n\t\t​    manager.shouldResignOnTouchOutside = YES;//控制点击背景是否收起键盘\n\t\t\n\t\t​    manager.shouldToolbarUsesTextFieldTintColor = YES;//控制键盘上的工具条文字颜色是否用户自定义\n\t\t\n\t\t​    manager.enableAutoToolbar = NO;//控制是否显示键盘上的工具条\n\t\t\n\t\t​    manager.preventShowingBottomBlankSpace = NO;//防止IQKeyboardManager让rootview上滑过度,默认是YES\n\n**IPS****不用第三方可以手动进行采取上传到服务器，用于点对点推送：** \n\n  //注册UserNotification,以获取推送通知的权限\n\n\t\t​    UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeSound | UIUserNotificationTypeAlert | UIUserNotificationTypeBadge categories:nil];\n\t\t\n\t\t​    [application registerUserNotificationSettings:settings];\n\t\t\n\t\t​    //注册远程推送\n\t\t\n\t\t​    [application registerForRemoteNotifications];\n\t\t\n\t\t​    \n\t\t\n\t\t​    // Override point for customization after application launch.\n\t\t\n\t\t​    return YES;\n\t\t\n\t\t}\n\t\t\n\t\t– (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {//处理推送消息\n\t\t\n\t\t​    NSLog(@”userinfo：%@”, userInfo);\n\t\t\n\t\t​    NSLog(@”收到推送消息：%@”, [[userInfo objectForKey:@”aps”] objectForKey:@”alert”]);\n\t\t\n\t\t}\n\t\t\n\t\t///如果注册失败，比如没有证书等等调用\n\t\t\n\t\t– (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {\n\t\t\n\t\t​    NSLog(@”远程通知注册失败：%@”, error);\n\t\t\n\t\t}\n\t\t\n\t\t///用户同意后，会调用此程序，获取系统的deviceToken，应把deviceToken传给服务器保存，此函数会在程序每次启动时调用(前提是用户允许通知)\n\t\t\n\t\t– (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n\t\t\n\t\t​    //NSLog(@”获取到的Token值为：%@”, deviceToken);\n\t\t\n\t\t​    [Defaults setObject:deviceToken forKey:@”deviceToken”];//Token值，用于登录的时候向后台发送用户对应的设备，方便针对进行推送\n\t\n\t\t\t}\t\n\n**强制更新模块：本地调用 版本号与服务器返回版本号对比大小进行控制** \n\n\t\t– (void)versionUpdate:(double)versionInfo {\n\t\t\n\t\t​    ///系统版本更新\n\t\t\n\t\t​    NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];\n\t\t\n\t\t​    NSString *app_Version = [infoDictionary objectForKey:@”CFBundleShortVersionString”];//app版本\n\t\t\n\t\t​    \n\t\t\n\t\t​    if (versionInfo > [app_Version doubleValue]) {\n\t\t\n\t\t​        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@”提示” message:@”有新版本请立即更新” preferredStyle:UIAlertControllerStyleAlert];\n\t\t\n\t\t​        UIAlertAction *firstAction = [UIAlertAction actionWithTitle:@”立即更新” style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {\n\t\t\n\t\t​            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@”https://www.pgyer.com/obUA”]];\n\t\t\n\t\t​        }];\n\t\t\n\t\t​        [alert addAction:firstAction];\n\t\t\n\t\t​        [self presentViewController:alert animated:YES completion:nil];\n\t\t\n\t​    }\n\t\n\t}\n\n**关于列表的动态添加或删除**\n\n对于TableView或CollectionView 的操作，从网络获取列表数据后，可以直接在本地列表进行操作，后台只需要返回成都或失败即可，没有必要去重新请求，刷新列表\n\n**将上传图片加入主线程队列进行，防止阻断，界面更新放到放线程进行**\n\n​\t\t项目概况：主要为后台审核人员操作手机端操作，已经有人开发得差不多了，所以我的工作主要是维护，在维护中学到了些新东西，总结下\n\n好分期后台管理iOS端开发总结：\n**标准化开发，明确你每句代码的意图**\n\n在前人做了详细备注的基础下，代码一看就懂，没有丝毫入坑的感觉，数据的收发非常的规范，而且后期的扩展相对轻松，不经感叹做好项目代码记录是规范化备注是多么重要的一件事情，不过也不一定是每句代码都 要说明 点什么，除非你是新手第一次接手项目。另外发现几个稍微有点欠妥的地方，一是把网络请求接口直接写在项目代码里面不分层虽然方便了，但是后台如果要统一改接口名称 要一个个去找，不是很方便 。二是搜索这个控件在取消的时候并没进行重新请求（已经修改）。界面全部采用TableView作为基础在Cell上布局控件，这种做法让我耳目一新，但是模块化的效果好很明显。不过重复控件太多，有些可以通过Cell重用实现的。还有就是在加载的时候如果网络出现问题，用户只能等待，这样的体验不是很好，这点也是我以后写代码要注意的地方。这款App主要的功能作用是显示数据，复杂的计算和操作后台都处理好了，所以项目并不算大。维护起来也很轻松\n\n**键盘弹出界面自动移动防止遮挡**\n\n\t\t///IQKeyboardManager:自动处理键盘事件的第三方库\n\t\t\n\t\t​    IQKeyboardManager *manager = [IQKeyboardManager sharedManager];\n\t\t\n\t\t​    manager.enable = YES;//控制整个功能是否启用\n\t\t\n\t\t​    manager.shouldResignOnTouchOutside = YES;//控制点击背景是否收起键盘\n\t\t\n\t\t​    manager.shouldToolbarUsesTextFieldTintColor = YES;//控制键盘上的工具条文字颜色是否用户自定义\n\t\t\n\t\t​    manager.enableAutoToolbar = NO;//控制是否显示键盘上的工具条\n\t\t\n\t\t​    manager.preventShowingBottomBlankSpace = NO;//防止IQKeyboardManager让rootview上滑过度,默认是YES\n\n**IPS****不用第三方可以手动进行采取上传到服务器，用于点对点推送：** \n\n\t\t  //注册UserNotification,以获取推送通知的权限\n\t\t\n\t\t​    UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeSound | UIUserNotificationTypeAlert | UIUserNotificationTypeBadge categories:nil];\n\t\t\n\t\t​    [application registerUserNotificationSettings:settings];\n\t\t\n\t\t​    //注册远程推送\n\t\t\n\t\t​    [application registerForRemoteNotifications];\n\t\t\n\t\t​    \n\t\t\n\t\t​    // Override point for customization after application launch.\n\t\t\n\t\t​    return YES;\n\t\t\n\t\t}\n\t\t\n\t\t– (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {//处理推送消息\n\t\t\n\t\t​    NSLog(@”userinfo：%@”, userInfo);\n\t\t\n\t\t​    NSLog(@”收到推送消息：%@”, [[userInfo objectForKey:@”aps”] objectForKey:@”alert”]);\n\t\t\n\t\t}\n\t\t\n\t\t///如果注册失败，比如没有证书等等调用\n\t\t\n\t\t– (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {\n\t\t\n\t\t​    NSLog(@”远程通知注册失败：%@”, error);\n\t\t\n\t\t}\n\t\t\n\t\t///用户同意后，会调用此程序，获取系统的deviceToken，应把deviceToken传给服务器保存，此函数会在程序每次启动时调用(前提是用户允许通知)\n\t\t\n\t\t– (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n\t\t\n\t\t​    //NSLog(@”获取到的Token值为：%@”, deviceToken);\n\t\t\n\t\t​    [Defaults setObject:deviceToken forKey:@”deviceToken”];//Token值，用于登录的时候向后台发送用户对应的设备，方便针对进行推送\n\t\t\n\t\t}\n\t\t\n\t\t**强制更新模块：本地调用 版本号与服务器返回版本号对比大小进行控制** \n\t\t\n\t\t– (void)versionUpdate:(double)versionInfo {\n\t\t\n\t\t​    ///系统版本更新\n\t\t\n\t\t​    NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];\n\t\t\n\t\t​    NSString *app_Version = [infoDictionary objectForKey:@”CFBundleShortVersionString”];//app版本\n\t\t\n\t\t​    \n\t\t\n\t\t​    if (versionInfo > [app_Version doubleValue]) {\n\t\t\n\t\t​        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@”提示” message:@”有新版本请立即更新” preferredStyle:UIAlertControllerStyleAlert];\n\t\t\n\t\t​        UIAlertAction *firstAction = [UIAlertAction actionWithTitle:@”立即更新” style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {\n\t\t\n\t\t​            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@”https://www.pgyer.com/obUA”]];\n\t\t\n\t\t​        }];\n\t\t\n\t\t​        [alert addAction:firstAction];\n\t\t\n\t\t​        [self presentViewController:alert animated:YES completion:nil];\n\t\n\t​    }\n\t\n\t}\n\n**关于列表的动态添加或删除**\n\n对于TableView或CollectionView 的操作，从网络获取列表数据后，可以直接在本地列表进行操作，后台只需要返回成都或失败即可，没有必要去重新请求，刷新列表\n\n**将上传图片加入主线程队列进行，防止阻断，界面更新放到放线程进行**\n\n\t\t  dispatch_async(dispatch_get_global_queue(0, 0), ^{\n\t\t\n\t\t   队列操作。。。        \n\t\t\n\t\t​        [Service serviceWithJAVAUrl:@”” params:params images:imgArr message:@”” controller:self succeedBlock:^(id response) {\n\t\t\n\t\t​            dispatch_async(dispatch_get_main_queue(), ^{\n\t\t\n\t\t​             \n\t\t\n\t\t​            });\n\t\t\n\t\t​        } failBlock:^{\n\t\t\n\t\t​            dispatch_async(dispatch_get_main_queue(), ^{\n\t\t\n\t\t​            });\n\t\t\n\t\t​        }];\n\t\t\n\t\t​    });\n\t\t\n\t\t带图片带参数AFNetworking上传:\n\t\t\n\t\t\\+ (void)serviceWithUrl:(NSString *)url\n\t\t\n\t\t​                params:(NSDictionary *)params\n\t\t\n\t\t​                images:(NSArray *)images\n\t\t\n\t\t​               message:(NSString *)message\n\t\t\n\t\t​            controller:(id)controller\n\t\t\n\t\t​          succeedBlock:(void (^) (id response))succeedBlock\n\t\t\n\t\t​             failBlock:(void (^) (void))failBlock\n\t\t\n\t\t{\n\t\t\n\t\t​    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];\n\t\t\n\t\t//设置可以接收的数据类型\n\t\t\n\t\t​    manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@”application/json”, @”text/json”, @”text/javascript”, @”text/html”, nil];\n\t\t\n\t\t//设置是否对发送数据进行Json格式化\n\t\t\n\t\t​      //manager.requestSerializer=[AFJSONRequestSerializer serializer];\n\t\t\n\t\t//报头标记，只是作为双方识别的记号而已\n\t\t\n\t\t​    [manager.requestSerializer setAuthorizationHeaderFieldWithUsername:@”RqPs” password:@“***********”];\n\t\t\n\t\t​    \n\t\t\n\t\t​    if (![message isEqualToString:@””]) {\n\t\t\n\t\t​        [SVProgressHUD showWithStatus:message maskType:SVProgressHUDMaskTypeBlack];\n\t\t\n\t\t​    }\n\t\t\n\t\t​    \n\t\t\n\t\t​    NSString *URL = [NSString stringWithFormat:@”%@%@”,BASEURL,url];\n\t\t\n\t\t​    [manager POST:URL parameters:params constructingBodyWithBlock:^(id<AFMultipartFormData> formData) {\n\t\t\n\t\t​        //[SVProgressHUD dismiss];\n\t\t\n\t\t​        \n\t\t\n\t\t​        NSMutableArray *arr = [[NSMutableArray alloc] init];\n\t\t\n\t\t​        for (int i = 0; i < images.count; i++) {\n\t\t\n\t\t​            NSDictionary *image = images[i];\n\t\t\n\t\t​            NSString *fileName = image.allKeys[0];\n\t\t\n\t\t​            int nameCount = 0;\n\t\t\n\t\t​            for (NSString *str in arr) {\n\t\t\n\t\t​                if ([str containsString:image.allKeys[0]]) {\n\t\t\n\t\t​                    nameCount++;\n\t\t\n\t\t​                    ///图片等比例压缩\n\t\t\n\t\t​                }\n\t\t\n\t\t​            }\n\t\t\n\t\t​            \n\t\t\n\t\t​            ///重名 添加后缀\n\t\t\n\t\t​            if (nameCount != 0) {\n\t\t\n\t\t​                fileName = [NSString stringWithFormat:@”%@%d”, image.allKeys[0], nameCount+1];\n\t\t\n\t\t​            }\n\t\t\n\t\t​            \n\t\t\n\t\t​            NSDateFormatter *formatter = [[NSDateFormatter alloc] init];\n\t\t\n\t\t​            [formatter setDateFormat:@”yyyyMMddHHmmssSSS”];\n\t\t\n\t\t​            NSString *dateTime = [formatter stringFromDate:[NSDate date]];\n\t\t\n\t\t​            [arr addObject:[NSString stringWithFormat:@”%@_%@”, fileName, dateTime]];\n\t\t\n\t\t​        }\n\t\t\n\t\t​        \n\t\t\n\t\t​       for (int i = 0; i < images.count; i++) {\n\t\t\n\t\t​           NSDictionary *image = images[i];\n\t\t\n\t\t​           [formData appendPartWithFileData: UIImageJPEGRepresentation(image.allValues[0], 0.0) name:arr[i] fileName:[arr[i] stringByAppendingFormat:@”.png”] mimeType:@”image/png”];\n\t\t\n\t\t​       }\n\t\t\n\t\t​        \n\t\t\n\t\t​    } success:^(AFHTTPRequestOperation *operation, id responseObject) {\n\t\t\n\t\t​        [SVProgressHUD dismiss];\n\t\t\n\t\t​        NSLog(@”%@”, responseObject);\n\t\t\n\t\t​        \n\t\t\n\t\t​        NSDictionary *result = responseObject;\n\t\t\n\t\t​        if (![[NSString stringWithFormat:@”%@”, result[@”Flag”]] isEqualToString:@”1″]) {\n\t\t\n\t\t​            [ExtensionMethod simpleAlertWithMessage:responseObject[@”Message”] controller:controller handler:^{\n\t\t\n\t\t​                if (failBlock == NULL) {\n\t\t\n\t\t​                    return;\n\t\t\n\t\t​                }\n\t\t\n\t\t​                failBlock();\n\t\t\n\t\t​            }];\n\t\t\n\t\t​            return;\n\t\t\n\t\t​        } else if (result == nil) {\n\t\t\n\t\t​            [ExtensionMethod simpleAlertWithMessage:@”后台服务异常，请稍后再试” controller:controller handler:nil];\n\t\t\n\t\t​            return;\n\t\t\n\t\t​        }\n\t\t\n\t\t​        \n\t\t\n\t\t​        succeedBlock(responseObject);\n\t\t\n\t\t​    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n\t\t\n\t\t​        [SVProgressHUD dismiss];\n\t\t\n\t\t​        if (failBlock) {\n\t\t\n\t\t​            [ExtensionMethod simpleAlertWithMessage:@”网络异常，请稍后再试” controller:controller handler:^{\n\t\t\n\t\t​                if (failBlock == NULL) {\n\t\t\n\t\t​                    return;\n\t\t\n\t\t​                }\n\t\n\t​                failBlock();\n\t\n\t​            }];\n\t\n\t​        }\n\t\n\t​    }];\n\t\n\t}\n\n​\t\n\n另外使用了比较好用的第三方控件：RMPickerViewController第三方选择器，UUID设备唯一标记方法","slug":"haofenqi","published":1,"updated":"2021-05-14T02:01:17.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno5u0048kuo4wtoulylf","content":"<h1 id=\"好分期后台管理iOS端维护要点总结：\"><a href=\"#好分期后台管理iOS端维护要点总结：\" class=\"headerlink\" title=\"好分期后台管理iOS端维护要点总结：\"></a>好分期后台管理iOS端维护要点总结：</h1><img src=\"/2019/03/06/haofenqi/1.png\">\n<p>项目概况：主要为后台审核人员操作手机端操作，已经有人开发得差不多了，所以我的工作主要是维护，在维护中学到了些新东西，总结下</p>\n<p>好分期后台管理iOS端开发总结：<br><strong>标准化开发，明确你每句代码的意图</strong></p>\n<p>在前人做了详细备注的基础下，代码一看就懂，没有丝毫入坑的感觉，数据的收发非常的规范，而且后期的扩展相对轻松，不经感叹做好项目代码记录是规范化备注是多么重要的一件事情，不过也不一定是每句代码都 要说明 点什么，除非你是新手第一次接手项目。另外发现几个稍微有点欠妥的地方，一是把网络请求接口直接写在项目代码里面不分层虽然方便了，但是后台如果要统一改接口名称 要一个个去找，不是很方便 。二是搜索这个控件在取消的时候并没进行重新请求（已经修改）。界面全部采用TableView作为基础在Cell上布局控件，这种做法让我耳目一新，但是模块化的效果好很明显。不过重复控件太多，有些可以通过Cell重用实现的。还有就是在加载的时候如果网络出现问题，用户只能等待，这样的体验不是很好，这点也是我以后写代码要注意的地方。这款App主要的功能作用是显示数据，复杂的计算和操作后台都处理好了，所以项目并不算大。维护起来也很轻松</p>\n<p><strong>键盘弹出界面自动移动防止遮挡</strong></p>\n<pre><code>///IQKeyboardManager:自动处理键盘事件的第三方库\n\n​    IQKeyboardManager *manager = [IQKeyboardManager sharedManager];\n\n​    manager.enable = YES;//控制整个功能是否启用\n\n​    manager.shouldResignOnTouchOutside = YES;//控制点击背景是否收起键盘\n\n​    manager.shouldToolbarUsesTextFieldTintColor = YES;//控制键盘上的工具条文字颜色是否用户自定义\n\n​    manager.enableAutoToolbar = NO;//控制是否显示键盘上的工具条\n\n​    manager.preventShowingBottomBlankSpace = NO;//防止IQKeyboardManager让rootview上滑过度,默认是YES\n</code></pre><p><strong>IPS**</strong>不用第三方可以手动进行采取上传到服务器，用于点对点推送：** </p>\n<p>  //注册UserNotification,以获取推送通知的权限</p>\n<pre><code>​    UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeSound | UIUserNotificationTypeAlert | UIUserNotificationTypeBadge categories:nil];\n\n​    [application registerUserNotificationSettings:settings];\n\n​    //注册远程推送\n\n​    [application registerForRemoteNotifications];\n\n​    \n\n​    // Override point for customization after application launch.\n\n​    return YES;\n\n}\n\n– (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {//处理推送消息\n\n​    NSLog(@”userinfo：%@”, userInfo);\n\n​    NSLog(@”收到推送消息：%@”, [[userInfo objectForKey:@”aps”] objectForKey:@”alert”]);\n\n}\n\n///如果注册失败，比如没有证书等等调用\n\n– (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {\n\n​    NSLog(@”远程通知注册失败：%@”, error);\n\n}\n\n///用户同意后，会调用此程序，获取系统的deviceToken，应把deviceToken传给服务器保存，此函数会在程序每次启动时调用(前提是用户允许通知)\n\n– (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n\n​    //NSLog(@”获取到的Token值为：%@”, deviceToken);\n\n​    [Defaults setObject:deviceToken forKey:@”deviceToken”];//Token值，用于登录的时候向后台发送用户对应的设备，方便针对进行推送\n\n    }    \n</code></pre><p><strong>强制更新模块：本地调用 版本号与服务器返回版本号对比大小进行控制</strong> </p>\n<pre><code>    – (void)versionUpdate:(double)versionInfo {\n\n    ​    ///系统版本更新\n\n    ​    NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];\n\n    ​    NSString *app_Version = [infoDictionary objectForKey:@”CFBundleShortVersionString”];//app版本\n\n    ​    \n\n    ​    if (versionInfo &gt; [app_Version doubleValue]) {\n\n    ​        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@”提示” message:@”有新版本请立即更新” preferredStyle:UIAlertControllerStyleAlert];\n\n    ​        UIAlertAction *firstAction = [UIAlertAction actionWithTitle:@”立即更新” style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {\n\n    ​            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@”https://www.pgyer.com/obUA”]];\n\n    ​        }];\n\n    ​        [alert addAction:firstAction];\n\n    ​        [self presentViewController:alert animated:YES completion:nil];\n\n​    }\n\n}\n</code></pre><p><strong>关于列表的动态添加或删除</strong></p>\n<p>对于TableView或CollectionView 的操作，从网络获取列表数据后，可以直接在本地列表进行操作，后台只需要返回成都或失败即可，没有必要去重新请求，刷新列表</p>\n<p><strong>将上传图片加入主线程队列进行，防止阻断，界面更新放到放线程进行</strong></p>\n<p>​        项目概况：主要为后台审核人员操作手机端操作，已经有人开发得差不多了，所以我的工作主要是维护，在维护中学到了些新东西，总结下</p>\n<p>好分期后台管理iOS端开发总结：<br><strong>标准化开发，明确你每句代码的意图</strong></p>\n<p>在前人做了详细备注的基础下，代码一看就懂，没有丝毫入坑的感觉，数据的收发非常的规范，而且后期的扩展相对轻松，不经感叹做好项目代码记录是规范化备注是多么重要的一件事情，不过也不一定是每句代码都 要说明 点什么，除非你是新手第一次接手项目。另外发现几个稍微有点欠妥的地方，一是把网络请求接口直接写在项目代码里面不分层虽然方便了，但是后台如果要统一改接口名称 要一个个去找，不是很方便 。二是搜索这个控件在取消的时候并没进行重新请求（已经修改）。界面全部采用TableView作为基础在Cell上布局控件，这种做法让我耳目一新，但是模块化的效果好很明显。不过重复控件太多，有些可以通过Cell重用实现的。还有就是在加载的时候如果网络出现问题，用户只能等待，这样的体验不是很好，这点也是我以后写代码要注意的地方。这款App主要的功能作用是显示数据，复杂的计算和操作后台都处理好了，所以项目并不算大。维护起来也很轻松</p>\n<p><strong>键盘弹出界面自动移动防止遮挡</strong></p>\n<pre><code>///IQKeyboardManager:自动处理键盘事件的第三方库\n\n​    IQKeyboardManager *manager = [IQKeyboardManager sharedManager];\n\n​    manager.enable = YES;//控制整个功能是否启用\n\n​    manager.shouldResignOnTouchOutside = YES;//控制点击背景是否收起键盘\n\n​    manager.shouldToolbarUsesTextFieldTintColor = YES;//控制键盘上的工具条文字颜色是否用户自定义\n\n​    manager.enableAutoToolbar = NO;//控制是否显示键盘上的工具条\n\n​    manager.preventShowingBottomBlankSpace = NO;//防止IQKeyboardManager让rootview上滑过度,默认是YES\n</code></pre><p><strong>IPS**</strong>不用第三方可以手动进行采取上传到服务器，用于点对点推送：** </p>\n<pre><code>      //注册UserNotification,以获取推送通知的权限\n\n    ​    UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeSound | UIUserNotificationTypeAlert | UIUserNotificationTypeBadge categories:nil];\n\n    ​    [application registerUserNotificationSettings:settings];\n\n    ​    //注册远程推送\n\n    ​    [application registerForRemoteNotifications];\n\n    ​    \n\n    ​    // Override point for customization after application launch.\n\n    ​    return YES;\n\n    }\n\n    – (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {//处理推送消息\n\n    ​    NSLog(@”userinfo：%@”, userInfo);\n\n    ​    NSLog(@”收到推送消息：%@”, [[userInfo objectForKey:@”aps”] objectForKey:@”alert”]);\n\n    }\n\n    ///如果注册失败，比如没有证书等等调用\n\n    – (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {\n\n    ​    NSLog(@”远程通知注册失败：%@”, error);\n\n    }\n\n    ///用户同意后，会调用此程序，获取系统的deviceToken，应把deviceToken传给服务器保存，此函数会在程序每次启动时调用(前提是用户允许通知)\n\n    – (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n\n    ​    //NSLog(@”获取到的Token值为：%@”, deviceToken);\n\n    ​    [Defaults setObject:deviceToken forKey:@”deviceToken”];//Token值，用于登录的时候向后台发送用户对应的设备，方便针对进行推送\n\n    }\n\n    **强制更新模块：本地调用 版本号与服务器返回版本号对比大小进行控制** \n\n    – (void)versionUpdate:(double)versionInfo {\n\n    ​    ///系统版本更新\n\n    ​    NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];\n\n    ​    NSString *app_Version = [infoDictionary objectForKey:@”CFBundleShortVersionString”];//app版本\n\n    ​    \n\n    ​    if (versionInfo &gt; [app_Version doubleValue]) {\n\n    ​        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@”提示” message:@”有新版本请立即更新” preferredStyle:UIAlertControllerStyleAlert];\n\n    ​        UIAlertAction *firstAction = [UIAlertAction actionWithTitle:@”立即更新” style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {\n\n    ​            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@”https://www.pgyer.com/obUA”]];\n\n    ​        }];\n\n    ​        [alert addAction:firstAction];\n\n    ​        [self presentViewController:alert animated:YES completion:nil];\n\n​    }\n\n}\n</code></pre><p><strong>关于列表的动态添加或删除</strong></p>\n<p>对于TableView或CollectionView 的操作，从网络获取列表数据后，可以直接在本地列表进行操作，后台只需要返回成都或失败即可，没有必要去重新请求，刷新列表</p>\n<p><strong>将上传图片加入主线程队列进行，防止阻断，界面更新放到放线程进行</strong></p>\n<pre><code>      dispatch_async(dispatch_get_global_queue(0, 0), ^{\n\n       队列操作。。。        \n\n    ​        [Service serviceWithJAVAUrl:@”” params:params images:imgArr message:@”” controller:self succeedBlock:^(id response) {\n\n    ​            dispatch_async(dispatch_get_main_queue(), ^{\n\n    ​             \n\n    ​            });\n\n    ​        } failBlock:^{\n\n    ​            dispatch_async(dispatch_get_main_queue(), ^{\n\n    ​            });\n\n    ​        }];\n\n    ​    });\n\n    带图片带参数AFNetworking上传:\n\n    \\+ (void)serviceWithUrl:(NSString *)url\n\n    ​                params:(NSDictionary *)params\n\n    ​                images:(NSArray *)images\n\n    ​               message:(NSString *)message\n\n    ​            controller:(id)controller\n\n    ​          succeedBlock:(void (^) (id response))succeedBlock\n\n    ​             failBlock:(void (^) (void))failBlock\n\n    {\n\n    ​    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];\n\n    //设置可以接收的数据类型\n\n    ​    manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@”application/json”, @”text/json”, @”text/javascript”, @”text/html”, nil];\n\n    //设置是否对发送数据进行Json格式化\n\n    ​      //manager.requestSerializer=[AFJSONRequestSerializer serializer];\n\n    //报头标记，只是作为双方识别的记号而已\n\n    ​    [manager.requestSerializer setAuthorizationHeaderFieldWithUsername:@”RqPs” password:@“***********”];\n\n    ​    \n\n    ​    if (![message isEqualToString:@””]) {\n\n    ​        [SVProgressHUD showWithStatus:message maskType:SVProgressHUDMaskTypeBlack];\n\n    ​    }\n\n    ​    \n\n    ​    NSString *URL = [NSString stringWithFormat:@”%@%@”,BASEURL,url];\n\n    ​    [manager POST:URL parameters:params constructingBodyWithBlock:^(id&lt;AFMultipartFormData&gt; formData) {\n\n    ​        //[SVProgressHUD dismiss];\n\n    ​        \n\n    ​        NSMutableArray *arr = [[NSMutableArray alloc] init];\n\n    ​        for (int i = 0; i &lt; images.count; i++) {\n\n    ​            NSDictionary *image = images[i];\n\n    ​            NSString *fileName = image.allKeys[0];\n\n    ​            int nameCount = 0;\n\n    ​            for (NSString *str in arr) {\n\n    ​                if ([str containsString:image.allKeys[0]]) {\n\n    ​                    nameCount++;\n\n    ​                    ///图片等比例压缩\n\n    ​                }\n\n    ​            }\n\n    ​            \n\n    ​            ///重名 添加后缀\n\n    ​            if (nameCount != 0) {\n\n    ​                fileName = [NSString stringWithFormat:@”%@%d”, image.allKeys[0], nameCount+1];\n\n    ​            }\n\n    ​            \n\n    ​            NSDateFormatter *formatter = [[NSDateFormatter alloc] init];\n\n    ​            [formatter setDateFormat:@”yyyyMMddHHmmssSSS”];\n\n    ​            NSString *dateTime = [formatter stringFromDate:[NSDate date]];\n\n    ​            [arr addObject:[NSString stringWithFormat:@”%@_%@”, fileName, dateTime]];\n\n    ​        }\n\n    ​        \n\n    ​       for (int i = 0; i &lt; images.count; i++) {\n\n    ​           NSDictionary *image = images[i];\n\n    ​           [formData appendPartWithFileData: UIImageJPEGRepresentation(image.allValues[0], 0.0) name:arr[i] fileName:[arr[i] stringByAppendingFormat:@”.png”] mimeType:@”image/png”];\n\n    ​       }\n\n    ​        \n\n    ​    } success:^(AFHTTPRequestOperation *operation, id responseObject) {\n\n    ​        [SVProgressHUD dismiss];\n\n    ​        NSLog(@”%@”, responseObject);\n\n    ​        \n\n    ​        NSDictionary *result = responseObject;\n\n    ​        if (![[NSString stringWithFormat:@”%@”, result[@”Flag”]] isEqualToString:@”1″]) {\n\n    ​            [ExtensionMethod simpleAlertWithMessage:responseObject[@”Message”] controller:controller handler:^{\n\n    ​                if (failBlock == NULL) {\n\n    ​                    return;\n\n    ​                }\n\n    ​                failBlock();\n\n    ​            }];\n\n    ​            return;\n\n    ​        } else if (result == nil) {\n\n    ​            [ExtensionMethod simpleAlertWithMessage:@”后台服务异常，请稍后再试” controller:controller handler:nil];\n\n    ​            return;\n\n    ​        }\n\n    ​        \n\n    ​        succeedBlock(responseObject);\n\n    ​    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n\n    ​        [SVProgressHUD dismiss];\n\n    ​        if (failBlock) {\n\n    ​            [ExtensionMethod simpleAlertWithMessage:@”网络异常，请稍后再试” controller:controller handler:^{\n\n    ​                if (failBlock == NULL) {\n\n    ​                    return;\n\n    ​                }\n\n​                failBlock();\n\n​            }];\n\n​        }\n\n​    }];\n\n}\n</code></pre><p>​    </p>\n<p>另外使用了比较好用的第三方控件：RMPickerViewController第三方选择器，UUID设备唯一标记方法</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"好分期后台管理iOS端维护要点总结：\"><a href=\"#好分期后台管理iOS端维护要点总结：\" class=\"headerlink\" title=\"好分期后台管理iOS端维护要点总结：\"></a>好分期后台管理iOS端维护要点总结：</h1><img src=\"/2019/03/06/haofenqi/1.png\">\n<p>项目概况：主要为后台审核人员操作手机端操作，已经有人开发得差不多了，所以我的工作主要是维护，在维护中学到了些新东西，总结下</p>\n<p>好分期后台管理iOS端开发总结：<br><strong>标准化开发，明确你每句代码的意图</strong></p>\n<p>在前人做了详细备注的基础下，代码一看就懂，没有丝毫入坑的感觉，数据的收发非常的规范，而且后期的扩展相对轻松，不经感叹做好项目代码记录是规范化备注是多么重要的一件事情，不过也不一定是每句代码都 要说明 点什么，除非你是新手第一次接手项目。另外发现几个稍微有点欠妥的地方，一是把网络请求接口直接写在项目代码里面不分层虽然方便了，但是后台如果要统一改接口名称 要一个个去找，不是很方便 。二是搜索这个控件在取消的时候并没进行重新请求（已经修改）。界面全部采用TableView作为基础在Cell上布局控件，这种做法让我耳目一新，但是模块化的效果好很明显。不过重复控件太多，有些可以通过Cell重用实现的。还有就是在加载的时候如果网络出现问题，用户只能等待，这样的体验不是很好，这点也是我以后写代码要注意的地方。这款App主要的功能作用是显示数据，复杂的计算和操作后台都处理好了，所以项目并不算大。维护起来也很轻松</p>\n<p><strong>键盘弹出界面自动移动防止遮挡</strong></p>\n<pre><code>///IQKeyboardManager:自动处理键盘事件的第三方库\n\n​    IQKeyboardManager *manager = [IQKeyboardManager sharedManager];\n\n​    manager.enable = YES;//控制整个功能是否启用\n\n​    manager.shouldResignOnTouchOutside = YES;//控制点击背景是否收起键盘\n\n​    manager.shouldToolbarUsesTextFieldTintColor = YES;//控制键盘上的工具条文字颜色是否用户自定义\n\n​    manager.enableAutoToolbar = NO;//控制是否显示键盘上的工具条\n\n​    manager.preventShowingBottomBlankSpace = NO;//防止IQKeyboardManager让rootview上滑过度,默认是YES\n</code></pre><p><strong>IPS**</strong>不用第三方可以手动进行采取上传到服务器，用于点对点推送：** </p>\n<p>  //注册UserNotification,以获取推送通知的权限</p>\n<pre><code>​    UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeSound | UIUserNotificationTypeAlert | UIUserNotificationTypeBadge categories:nil];\n\n​    [application registerUserNotificationSettings:settings];\n\n​    //注册远程推送\n\n​    [application registerForRemoteNotifications];\n\n​    \n\n​    // Override point for customization after application launch.\n\n​    return YES;\n\n}\n\n– (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {//处理推送消息\n\n​    NSLog(@”userinfo：%@”, userInfo);\n\n​    NSLog(@”收到推送消息：%@”, [[userInfo objectForKey:@”aps”] objectForKey:@”alert”]);\n\n}\n\n///如果注册失败，比如没有证书等等调用\n\n– (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {\n\n​    NSLog(@”远程通知注册失败：%@”, error);\n\n}\n\n///用户同意后，会调用此程序，获取系统的deviceToken，应把deviceToken传给服务器保存，此函数会在程序每次启动时调用(前提是用户允许通知)\n\n– (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n\n​    //NSLog(@”获取到的Token值为：%@”, deviceToken);\n\n​    [Defaults setObject:deviceToken forKey:@”deviceToken”];//Token值，用于登录的时候向后台发送用户对应的设备，方便针对进行推送\n\n    }    \n</code></pre><p><strong>强制更新模块：本地调用 版本号与服务器返回版本号对比大小进行控制</strong> </p>\n<pre><code>    – (void)versionUpdate:(double)versionInfo {\n\n    ​    ///系统版本更新\n\n    ​    NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];\n\n    ​    NSString *app_Version = [infoDictionary objectForKey:@”CFBundleShortVersionString”];//app版本\n\n    ​    \n\n    ​    if (versionInfo &gt; [app_Version doubleValue]) {\n\n    ​        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@”提示” message:@”有新版本请立即更新” preferredStyle:UIAlertControllerStyleAlert];\n\n    ​        UIAlertAction *firstAction = [UIAlertAction actionWithTitle:@”立即更新” style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {\n\n    ​            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@”https://www.pgyer.com/obUA”]];\n\n    ​        }];\n\n    ​        [alert addAction:firstAction];\n\n    ​        [self presentViewController:alert animated:YES completion:nil];\n\n​    }\n\n}\n</code></pre><p><strong>关于列表的动态添加或删除</strong></p>\n<p>对于TableView或CollectionView 的操作，从网络获取列表数据后，可以直接在本地列表进行操作，后台只需要返回成都或失败即可，没有必要去重新请求，刷新列表</p>\n<p><strong>将上传图片加入主线程队列进行，防止阻断，界面更新放到放线程进行</strong></p>\n<p>​        项目概况：主要为后台审核人员操作手机端操作，已经有人开发得差不多了，所以我的工作主要是维护，在维护中学到了些新东西，总结下</p>\n<p>好分期后台管理iOS端开发总结：<br><strong>标准化开发，明确你每句代码的意图</strong></p>\n<p>在前人做了详细备注的基础下，代码一看就懂，没有丝毫入坑的感觉，数据的收发非常的规范，而且后期的扩展相对轻松，不经感叹做好项目代码记录是规范化备注是多么重要的一件事情，不过也不一定是每句代码都 要说明 点什么，除非你是新手第一次接手项目。另外发现几个稍微有点欠妥的地方，一是把网络请求接口直接写在项目代码里面不分层虽然方便了，但是后台如果要统一改接口名称 要一个个去找，不是很方便 。二是搜索这个控件在取消的时候并没进行重新请求（已经修改）。界面全部采用TableView作为基础在Cell上布局控件，这种做法让我耳目一新，但是模块化的效果好很明显。不过重复控件太多，有些可以通过Cell重用实现的。还有就是在加载的时候如果网络出现问题，用户只能等待，这样的体验不是很好，这点也是我以后写代码要注意的地方。这款App主要的功能作用是显示数据，复杂的计算和操作后台都处理好了，所以项目并不算大。维护起来也很轻松</p>\n<p><strong>键盘弹出界面自动移动防止遮挡</strong></p>\n<pre><code>///IQKeyboardManager:自动处理键盘事件的第三方库\n\n​    IQKeyboardManager *manager = [IQKeyboardManager sharedManager];\n\n​    manager.enable = YES;//控制整个功能是否启用\n\n​    manager.shouldResignOnTouchOutside = YES;//控制点击背景是否收起键盘\n\n​    manager.shouldToolbarUsesTextFieldTintColor = YES;//控制键盘上的工具条文字颜色是否用户自定义\n\n​    manager.enableAutoToolbar = NO;//控制是否显示键盘上的工具条\n\n​    manager.preventShowingBottomBlankSpace = NO;//防止IQKeyboardManager让rootview上滑过度,默认是YES\n</code></pre><p><strong>IPS**</strong>不用第三方可以手动进行采取上传到服务器，用于点对点推送：** </p>\n<pre><code>      //注册UserNotification,以获取推送通知的权限\n\n    ​    UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeSound | UIUserNotificationTypeAlert | UIUserNotificationTypeBadge categories:nil];\n\n    ​    [application registerUserNotificationSettings:settings];\n\n    ​    //注册远程推送\n\n    ​    [application registerForRemoteNotifications];\n\n    ​    \n\n    ​    // Override point for customization after application launch.\n\n    ​    return YES;\n\n    }\n\n    – (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {//处理推送消息\n\n    ​    NSLog(@”userinfo：%@”, userInfo);\n\n    ​    NSLog(@”收到推送消息：%@”, [[userInfo objectForKey:@”aps”] objectForKey:@”alert”]);\n\n    }\n\n    ///如果注册失败，比如没有证书等等调用\n\n    – (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {\n\n    ​    NSLog(@”远程通知注册失败：%@”, error);\n\n    }\n\n    ///用户同意后，会调用此程序，获取系统的deviceToken，应把deviceToken传给服务器保存，此函数会在程序每次启动时调用(前提是用户允许通知)\n\n    – (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n\n    ​    //NSLog(@”获取到的Token值为：%@”, deviceToken);\n\n    ​    [Defaults setObject:deviceToken forKey:@”deviceToken”];//Token值，用于登录的时候向后台发送用户对应的设备，方便针对进行推送\n\n    }\n\n    **强制更新模块：本地调用 版本号与服务器返回版本号对比大小进行控制** \n\n    – (void)versionUpdate:(double)versionInfo {\n\n    ​    ///系统版本更新\n\n    ​    NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];\n\n    ​    NSString *app_Version = [infoDictionary objectForKey:@”CFBundleShortVersionString”];//app版本\n\n    ​    \n\n    ​    if (versionInfo &gt; [app_Version doubleValue]) {\n\n    ​        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@”提示” message:@”有新版本请立即更新” preferredStyle:UIAlertControllerStyleAlert];\n\n    ​        UIAlertAction *firstAction = [UIAlertAction actionWithTitle:@”立即更新” style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {\n\n    ​            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@”https://www.pgyer.com/obUA”]];\n\n    ​        }];\n\n    ​        [alert addAction:firstAction];\n\n    ​        [self presentViewController:alert animated:YES completion:nil];\n\n​    }\n\n}\n</code></pre><p><strong>关于列表的动态添加或删除</strong></p>\n<p>对于TableView或CollectionView 的操作，从网络获取列表数据后，可以直接在本地列表进行操作，后台只需要返回成都或失败即可，没有必要去重新请求，刷新列表</p>\n<p><strong>将上传图片加入主线程队列进行，防止阻断，界面更新放到放线程进行</strong></p>\n<pre><code>      dispatch_async(dispatch_get_global_queue(0, 0), ^{\n\n       队列操作。。。        \n\n    ​        [Service serviceWithJAVAUrl:@”” params:params images:imgArr message:@”” controller:self succeedBlock:^(id response) {\n\n    ​            dispatch_async(dispatch_get_main_queue(), ^{\n\n    ​             \n\n    ​            });\n\n    ​        } failBlock:^{\n\n    ​            dispatch_async(dispatch_get_main_queue(), ^{\n\n    ​            });\n\n    ​        }];\n\n    ​    });\n\n    带图片带参数AFNetworking上传:\n\n    \\+ (void)serviceWithUrl:(NSString *)url\n\n    ​                params:(NSDictionary *)params\n\n    ​                images:(NSArray *)images\n\n    ​               message:(NSString *)message\n\n    ​            controller:(id)controller\n\n    ​          succeedBlock:(void (^) (id response))succeedBlock\n\n    ​             failBlock:(void (^) (void))failBlock\n\n    {\n\n    ​    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];\n\n    //设置可以接收的数据类型\n\n    ​    manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@”application/json”, @”text/json”, @”text/javascript”, @”text/html”, nil];\n\n    //设置是否对发送数据进行Json格式化\n\n    ​      //manager.requestSerializer=[AFJSONRequestSerializer serializer];\n\n    //报头标记，只是作为双方识别的记号而已\n\n    ​    [manager.requestSerializer setAuthorizationHeaderFieldWithUsername:@”RqPs” password:@“***********”];\n\n    ​    \n\n    ​    if (![message isEqualToString:@””]) {\n\n    ​        [SVProgressHUD showWithStatus:message maskType:SVProgressHUDMaskTypeBlack];\n\n    ​    }\n\n    ​    \n\n    ​    NSString *URL = [NSString stringWithFormat:@”%@%@”,BASEURL,url];\n\n    ​    [manager POST:URL parameters:params constructingBodyWithBlock:^(id&lt;AFMultipartFormData&gt; formData) {\n\n    ​        //[SVProgressHUD dismiss];\n\n    ​        \n\n    ​        NSMutableArray *arr = [[NSMutableArray alloc] init];\n\n    ​        for (int i = 0; i &lt; images.count; i++) {\n\n    ​            NSDictionary *image = images[i];\n\n    ​            NSString *fileName = image.allKeys[0];\n\n    ​            int nameCount = 0;\n\n    ​            for (NSString *str in arr) {\n\n    ​                if ([str containsString:image.allKeys[0]]) {\n\n    ​                    nameCount++;\n\n    ​                    ///图片等比例压缩\n\n    ​                }\n\n    ​            }\n\n    ​            \n\n    ​            ///重名 添加后缀\n\n    ​            if (nameCount != 0) {\n\n    ​                fileName = [NSString stringWithFormat:@”%@%d”, image.allKeys[0], nameCount+1];\n\n    ​            }\n\n    ​            \n\n    ​            NSDateFormatter *formatter = [[NSDateFormatter alloc] init];\n\n    ​            [formatter setDateFormat:@”yyyyMMddHHmmssSSS”];\n\n    ​            NSString *dateTime = [formatter stringFromDate:[NSDate date]];\n\n    ​            [arr addObject:[NSString stringWithFormat:@”%@_%@”, fileName, dateTime]];\n\n    ​        }\n\n    ​        \n\n    ​       for (int i = 0; i &lt; images.count; i++) {\n\n    ​           NSDictionary *image = images[i];\n\n    ​           [formData appendPartWithFileData: UIImageJPEGRepresentation(image.allValues[0], 0.0) name:arr[i] fileName:[arr[i] stringByAppendingFormat:@”.png”] mimeType:@”image/png”];\n\n    ​       }\n\n    ​        \n\n    ​    } success:^(AFHTTPRequestOperation *operation, id responseObject) {\n\n    ​        [SVProgressHUD dismiss];\n\n    ​        NSLog(@”%@”, responseObject);\n\n    ​        \n\n    ​        NSDictionary *result = responseObject;\n\n    ​        if (![[NSString stringWithFormat:@”%@”, result[@”Flag”]] isEqualToString:@”1″]) {\n\n    ​            [ExtensionMethod simpleAlertWithMessage:responseObject[@”Message”] controller:controller handler:^{\n\n    ​                if (failBlock == NULL) {\n\n    ​                    return;\n\n    ​                }\n\n    ​                failBlock();\n\n    ​            }];\n\n    ​            return;\n\n    ​        } else if (result == nil) {\n\n    ​            [ExtensionMethod simpleAlertWithMessage:@”后台服务异常，请稍后再试” controller:controller handler:nil];\n\n    ​            return;\n\n    ​        }\n\n    ​        \n\n    ​        succeedBlock(responseObject);\n\n    ​    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n\n    ​        [SVProgressHUD dismiss];\n\n    ​        if (failBlock) {\n\n    ​            [ExtensionMethod simpleAlertWithMessage:@”网络异常，请稍后再试” controller:controller handler:^{\n\n    ​                if (failBlock == NULL) {\n\n    ​                    return;\n\n    ​                }\n\n​                failBlock();\n\n​            }];\n\n​        }\n\n​    }];\n\n}\n</code></pre><p>​    </p>\n<p>另外使用了比较好用的第三方控件：RMPickerViewController第三方选择器，UUID设备唯一标记方法</p>\n"},{"title":"iOS面试被问到的问题","date":"2019-03-06T17:39:39.000Z","_content":"\n近期面试问答汇总\n\n###@property(nonatomic,getter=isOn) BOOL on; 中的getter = isOn的含义？\n答：\n如果这个property是 BOOL on， 那么Objc默认创建的 setter 为： - (void)on:(BOOL)setOn { } getter 为： - (BOOL)on { return on; } 但是你可以手动更改 setter 和 getter 方法，就像上面的： getter = xxxOn 的话， getter 就变为： - (BOOL)xxxOn { return on; }\n同样setter也是一样的道理\n\n###什么是内存管理机制\n所谓内存管理就是所有权机制，对象被拥有的计算量不为0，才得以存在，不然被销毁。\nalloc:分配内存，引用计算数为1\nCopy:创造该对象复本，对该副本拥有并计数为1\nRetain:对持有对象计数+1，当进行setter时会先判断该对象是否与原来一致\nRelease:销毁对象\nautoRealease:系统自动在未来某个时段计数器-1\nStrong:ARC引入属性，与retain一样，对对象持有，也就是在自身销毁同时，所持有对象也会销毁，可能会造成死锁。\nWeak:ARC引入属性，只是引用对象并不将计数加1，前该对象被销毁后指针为空。\n\n###比较WebView与UKWebView之间的区别\n1. 在性能、稳定性、功能方面有很大提升（最直观的体现就是加载网页是占用的内存，模拟器加载百度与开源中国网站时，WKWebView占用23M，而UIWebView占用85M）；\n2. 允许JavaScript的Nitro库加载并使用（UIWebView中限制）；\n3. 支持了更多的HTML5特性；\n4. 高达60fps的滚动刷新率以及内置手势；\n5. 将UIWebViewDelegate与UIWebView重构成了14类与3个协议（查看苹果官方文档）\n  window.webkit.messageHandlers.closeMe.postMessage(null);\n  //OC注册供JS调用的方法\n  [[_webView configuration].userContentController addScriptMessageHandler:self name:@\"closeMe\"];\n  //OC在JS调用方法做的处理\n- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message\n  {\n  NSLog(@\"JS 调用了 %@ 方法，传回参数 %@\",message.name,message.body);\n  }\n  //javaScriptString是JS方法名，completionHandler是异步回调block\n  [self.webView evaluateJavaScript:javaScriptString completionHandler:completionHandler];\n\n###数据库操作知道吗，你使用了哪些第三方的，有什么优势\n苹果自带有coreData:CoreData是一个模型层的技术，也是一种持久化技术（数据库），它能将模型对象的状态持久化到磁盘里,其底层也是数据库sqlite的存储。\n一般用第三方FMDB来自己sqlite的操作，为了保证线程安全，FMDB提供方便快捷的FMDatabaseQueue类\nFMDatabaseQueue的创建 FMDatabaseQueue *queue = [FMDatabaseQueue databaseQueueWithPath:path];\n简单使用 [queue inDatabase:^(FMDatabase *db) { [db executeUpdate:@\"INSERT INTO t_student(name) VALUES (?)\", @\"Jack\"]; [db executeUpdate:@\"INSERT INTO t_student(name) VALUES (?)\", @\"Rose\"]; [db executeUpdate:@\"INSERT INTO t_student(name) VALUES (?)\", @\"Jim\"];\n以队列的方法添加操作，保证对数据库的操作不会出错。\n\n###在OC中这些声明的作用，对对应的成员变量进行权限声明\n@protected 该类和所有子类中的方法可以直接访问这样的变量。\n@private 该类中的方法可以访问，子类不可以访问。\n@public   可以被所有的类访问\n@package 对framework而言内部使用，对外private，适合第三方静态库类\n\n###为什么Block 要用Copy属性\nBlock一开始放在栈上的，而代码块内的数据会用到本地变量，只有Copy会才能放到堆上，而且本地变量要使用弱引用，retail不加1 \n\n###为什么Delegate 不能用Strong,可以用weak,assign？\n如果使用Strong,当两个对像互相把对方作为代理时，项目一个释放会引起另一个的释放，造成列循环。ARC引入strong和weak两个内存管理属性（以及__strong, __weak, __unsafe_unretained, __autoreleasing四个变量生命期qualifier）之后，对象的delegate成员变量就面临着对内存管理属性的选择：weak or assign\n众所周知，weak属性的变量是不为其所属对象持有的，并且在该变量被销毁之后，此weak变量的值会自动被赋值为nil。而assign属性一般是对C基本数据类型成员变量的声明，当然也可以用在对象类型成员变量上，只是其代表的意义只是单纯地拷贝所赋值变量的值。即如果对某assign成员变量B赋值某对象A的指针，则此B只是简单地保存此指针的值，且并不持有对象A，也就意味着如果A被销毁，则B就指向了一个已经被销毁的对象，如果再对其发送消息会引发崩溃。\n但在delegate成员变量这个细分领域，我们即可以用weak，又可以用assign。因为在几乎所有场景下，delegate所指向的对象C的生存期都是覆盖了delegate成员变量本身所在的对象D的生存期的，所以，在D的生存期内，C所使用的D的指针都是有效的，所以这个时候使用assign是没有关系的。\n\n###什么是NSLoop?用在哪些地方\n* RunLoop，是多线程的法宝，即一个线程一次只能执行一个任务，执行完任务后就会退出线程。主线程执行完即时任务时会继续等待接收事件而不退出。非主线程通常来说就是为了执行某一任务的，执行完毕就需要归还资源，因此默认是不运行RunLoop的；\n\n* 每一个线程都有其对应的RunLoop，只是默认只有主线程的RunLoop是启动的，其它子线程的RunLoop默认是不启动的，若要启动则需要手动启动；\n\n* 在一个单独的线程中，如果需要在处理完某个任务后不退出，继续等待接收事件，则需要启用RunLoop；\n\n* NSRunLoop提供了一个添加NSTimer的方法，可以指定Mode，如果要让任何情况下都回调，则需要设置Mode为Common模式；\n\n* 实质上，对于子线程的runloop默认是不存在的，因为苹果采用了懒加载的方式。如果我们没有手动调用[NSRunLoop currentRunLoop]的话，就不会去查询是否存在当前线程的RunLoop，也就不会去加载，更不会创建。\n\n###说一说你项目用到的混合加密及信息通信安全机制 \n每次App启动先生成一个随机的DES密钥A，然后加密要传输的字段后保存在字典中，将DES密钥用AES公钥加密B后保存在字典中。后台用私钥解密出DES密钥后再用来解密传输字段，最后得出原始数据并保存该加密B与对应的DES密钥A\n后面使用HTTPS进行通信加密，使用公证的证书最为安全。\n\n###如何保证在数据传输中不被重放攻击\n以时间戳作为传参，后台协商响应时间差范围，参考三次握手协议两边商量序列号，当发过来的序列号为服务器也存在的序列号则丢弃。\n\n###四种设计模式：单例模式，MVC，委托和观察者模式\n单例：UIApplication，UserDefault,UIAccelerometer,NSNotification,NSFileManager,NSBundle\n委托：委托对象主要对控件对象的操作和状态作出响应，数据源委托是必须实现的\n观察者模式四个组成部分：\n抽象主题：观察者容器，添加移除及向观察者发送通知\n抽象观察者：是一个协议，可以更新对象\n具体观察者：具体实现\n具体主题：SubScript协议实现\n具体应用:通知与KVO（对象属性发生变化时通知给观察者对象）\n\n###MVC模式：\nModel:保存应用数据状态，回应视图状态查询，处理应用业务逻辑，完成应用功能，将状态变化通知视图\nView:为用户展示信息提供接口，通过视图向控制器发出请求，向模型发出数据查询\nController:接收用户请求，更新模型数据，更新所对应视图状态响应用户请求，作为视图和模型的媒介，降低耦合度，权责清晰提高开发效率\n\n###Iphone 与iPad区别控件：iPad独有UIPoperViewController UISpiltController\n\n###分层架构设计：\n表示层：界面显示\n业务逻辑层：处理表示层提供数据并返回结果到表示层进行显示\n数据持久层：进行本地或网络访问\n信息系统层，存在本地或网络的信息\n\n###Textkit为程序员提供文字排版和渲染功能，主要实现图文混排的功能\n\n###数据持久化方式\n沙箱目录 \n属性列表\n对象归档(将对象进行序列化成为文件)\nsqlite\nCoreData(对象关系映射技术，也是SQLite)\n\n###\nXML是一种自描述的数据交换格式，两种读取方式：SAX（从上到下，只读，速度快）和DOM （节点方式可更改，要先读完后才能操作）系统自带NSXMLParse,第三方GDataXML\nJson:轻量级数据交换格式，自带NSJsonSerliazation，最快，处理相当麻烦，第三方JsonKit，SBJson\n\n###HTTP与HTTPS的区别\nHTTP:80  \nHTTPS:超文本文件传输安全协议：443   SSL：40位关键字 RC4流加密算法\n\n###Git操作\nGit添加到工作区：git add\nGit提交到master:  git commit -m “”\nGit上传到目标库：git push --set-upstream iOSMVCTemple master\nGit添加远程目标：git remote add name gitAddress\n\n###封装，继承，多态的意义\n封装：对名隐藏细节，保证数据不被破坏，使代码模块化\n继承：代码重用，方便子类扩展\n多态：允许用父类指针指向子类，因为子类实现对父类方法的重写，所以对同一消息有不同响应\n前两者实现对代码的重用，最后个实现对接口的重用。\n\n###浅复制和深复制的区别？\n浅层复制：只复制指向对象的指针，而不复制引用对象本身。对于要进行拷贝的对象，自身要实现NSCoding协议 -initWithZone:(NSZone)Zone\n\n###类别优劣？\ncategory 可以在不获悉，不改变原来代码的情况下往里面添加新的方法，只能添加，不能删除修改。\n并且如果类别和原来类中的方法产生名称冲突，则类别将覆盖原来的方法，因为类别具有更高的优先级。\n\n### KVO与 KVC\nkvc:键 - 值编码是一种间接访问对象的属性使用字符串来标识属性，而不是通过调用存取方法，直接或通过实例变量访问的机制。\n很多情况下可以简化程序代码。apple文档其实给了一个很好的例子。\nkvo:键值观察机制，当被观察的某一属性变化可进行响应\n\n###为什么说oc是动态运行时语言？\n答案：多态。 主要是将数据类型的确定由编译时，推迟到了运行时。\n简单来说，运行时机制使我们直到运行时才去决定一个对象的类别，以及调用该类别对象指定方法。\n\n###说说推送的实现原理\n当我们选择接收远程远程推送的时候，系统将应用BundleId和UUID发送到苹果自己的APNS服务器进行唯一设备和唯一App的注册，服务器进行注册后返回Tocken作为访问令牌，用户服务器通过推送证书和得到的Tocken向APNS请求发送推送消息，APNS服务器收到请求后进行列表查找然后向指定设备发送消息。\n\n###单例的核心是什么 \n保证实例对象只被初始化一次，并在整个程序周期中反复使用\n\n###讲讲网络接口编程是什么 \n好好学习后再写\n\n###什么是多线程\n针对计算机多核设计的一套并发操作，多个任务同时进行，目前iOS上的多线程操作包括:NSThread,NSOperation,GCD,其中苹果推荐使用GCD\n###App的性能优化可以从哪方面入手\n正确重用Cell，图片缓存，避免加载大的Xib文件，不要把主线程放到block里面，用好多线程，选择合理的方式进行数据的持久化，使用ARC,autoPool\nView尽量使用不透明的，使用gzip获取大量数据，解压工作放在后台，尽量避免格式转换一定要用可以使用单例，重用大开销对象，，使用好Cache,重用延时加载Views,处理内存警告，避免反复使用或处理数据，使用wkWeb加载数据\n###SDWebImage的实现原理\n主要运用来加载网络图片，根据网络请求先去内存查找对应的图片，然后去硬盘（如果设置的话），如果都没有去网络下载放到缓存，下次直接本地加载,使用NSCache作为缓存，异步操作，在回调中处理结果，使用NSOperation回调结果。\n\nJsonkit(Json格式转换器)\nMJRefresh:刷新工具\nMJExtention:数模转换\nMasonry：约束布局\nFMDB:sqlite数据器操作封闭\nUShare:友盟第三方分享工具\nShareSDK:Mob第三方分享\nJPush:极光推送\nOpen SSl:加密库\n微信支付SDK\n支付宝SDK\nSVProgressAssistant:加载框\nMBProgressAssistant:加载框\nImageBrowerVC:图片展示器\nIQKeyboardManager:文本输入自己调整屏幕\nDQAlertView:应用Model弹框\nBlocksKit:代码块方式实现控件消息响应\nKYVedioPlayer:第三方播放器\nUIView+RSAdditions：视图定位器\nUITableView+FDTemplateLayoutCell：TableViewCell高度自动计算器\nKAlertView:弹框\nAFNetworking:第三方网络库\nBaiduMap:百度地图库\nSDScrollView：图片轮播\nLBXScanView:二维码扫描\nRongIMKit:融云通信\nAliyunOSSiOS:阿里云数据上传库","source":"_posts/iOS面试被问到的问题.md","raw":"---\ntitle: iOS面试被问到的问题\ndate: 2019-03-06 17:39:39\ntags: iOS\ncategories: 苹果开发\n---\n\n近期面试问答汇总\n\n###@property(nonatomic,getter=isOn) BOOL on; 中的getter = isOn的含义？\n答：\n如果这个property是 BOOL on， 那么Objc默认创建的 setter 为： - (void)on:(BOOL)setOn { } getter 为： - (BOOL)on { return on; } 但是你可以手动更改 setter 和 getter 方法，就像上面的： getter = xxxOn 的话， getter 就变为： - (BOOL)xxxOn { return on; }\n同样setter也是一样的道理\n\n###什么是内存管理机制\n所谓内存管理就是所有权机制，对象被拥有的计算量不为0，才得以存在，不然被销毁。\nalloc:分配内存，引用计算数为1\nCopy:创造该对象复本，对该副本拥有并计数为1\nRetain:对持有对象计数+1，当进行setter时会先判断该对象是否与原来一致\nRelease:销毁对象\nautoRealease:系统自动在未来某个时段计数器-1\nStrong:ARC引入属性，与retain一样，对对象持有，也就是在自身销毁同时，所持有对象也会销毁，可能会造成死锁。\nWeak:ARC引入属性，只是引用对象并不将计数加1，前该对象被销毁后指针为空。\n\n###比较WebView与UKWebView之间的区别\n1. 在性能、稳定性、功能方面有很大提升（最直观的体现就是加载网页是占用的内存，模拟器加载百度与开源中国网站时，WKWebView占用23M，而UIWebView占用85M）；\n2. 允许JavaScript的Nitro库加载并使用（UIWebView中限制）；\n3. 支持了更多的HTML5特性；\n4. 高达60fps的滚动刷新率以及内置手势；\n5. 将UIWebViewDelegate与UIWebView重构成了14类与3个协议（查看苹果官方文档）\n  window.webkit.messageHandlers.closeMe.postMessage(null);\n  //OC注册供JS调用的方法\n  [[_webView configuration].userContentController addScriptMessageHandler:self name:@\"closeMe\"];\n  //OC在JS调用方法做的处理\n- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message\n  {\n  NSLog(@\"JS 调用了 %@ 方法，传回参数 %@\",message.name,message.body);\n  }\n  //javaScriptString是JS方法名，completionHandler是异步回调block\n  [self.webView evaluateJavaScript:javaScriptString completionHandler:completionHandler];\n\n###数据库操作知道吗，你使用了哪些第三方的，有什么优势\n苹果自带有coreData:CoreData是一个模型层的技术，也是一种持久化技术（数据库），它能将模型对象的状态持久化到磁盘里,其底层也是数据库sqlite的存储。\n一般用第三方FMDB来自己sqlite的操作，为了保证线程安全，FMDB提供方便快捷的FMDatabaseQueue类\nFMDatabaseQueue的创建 FMDatabaseQueue *queue = [FMDatabaseQueue databaseQueueWithPath:path];\n简单使用 [queue inDatabase:^(FMDatabase *db) { [db executeUpdate:@\"INSERT INTO t_student(name) VALUES (?)\", @\"Jack\"]; [db executeUpdate:@\"INSERT INTO t_student(name) VALUES (?)\", @\"Rose\"]; [db executeUpdate:@\"INSERT INTO t_student(name) VALUES (?)\", @\"Jim\"];\n以队列的方法添加操作，保证对数据库的操作不会出错。\n\n###在OC中这些声明的作用，对对应的成员变量进行权限声明\n@protected 该类和所有子类中的方法可以直接访问这样的变量。\n@private 该类中的方法可以访问，子类不可以访问。\n@public   可以被所有的类访问\n@package 对framework而言内部使用，对外private，适合第三方静态库类\n\n###为什么Block 要用Copy属性\nBlock一开始放在栈上的，而代码块内的数据会用到本地变量，只有Copy会才能放到堆上，而且本地变量要使用弱引用，retail不加1 \n\n###为什么Delegate 不能用Strong,可以用weak,assign？\n如果使用Strong,当两个对像互相把对方作为代理时，项目一个释放会引起另一个的释放，造成列循环。ARC引入strong和weak两个内存管理属性（以及__strong, __weak, __unsafe_unretained, __autoreleasing四个变量生命期qualifier）之后，对象的delegate成员变量就面临着对内存管理属性的选择：weak or assign\n众所周知，weak属性的变量是不为其所属对象持有的，并且在该变量被销毁之后，此weak变量的值会自动被赋值为nil。而assign属性一般是对C基本数据类型成员变量的声明，当然也可以用在对象类型成员变量上，只是其代表的意义只是单纯地拷贝所赋值变量的值。即如果对某assign成员变量B赋值某对象A的指针，则此B只是简单地保存此指针的值，且并不持有对象A，也就意味着如果A被销毁，则B就指向了一个已经被销毁的对象，如果再对其发送消息会引发崩溃。\n但在delegate成员变量这个细分领域，我们即可以用weak，又可以用assign。因为在几乎所有场景下，delegate所指向的对象C的生存期都是覆盖了delegate成员变量本身所在的对象D的生存期的，所以，在D的生存期内，C所使用的D的指针都是有效的，所以这个时候使用assign是没有关系的。\n\n###什么是NSLoop?用在哪些地方\n* RunLoop，是多线程的法宝，即一个线程一次只能执行一个任务，执行完任务后就会退出线程。主线程执行完即时任务时会继续等待接收事件而不退出。非主线程通常来说就是为了执行某一任务的，执行完毕就需要归还资源，因此默认是不运行RunLoop的；\n\n* 每一个线程都有其对应的RunLoop，只是默认只有主线程的RunLoop是启动的，其它子线程的RunLoop默认是不启动的，若要启动则需要手动启动；\n\n* 在一个单独的线程中，如果需要在处理完某个任务后不退出，继续等待接收事件，则需要启用RunLoop；\n\n* NSRunLoop提供了一个添加NSTimer的方法，可以指定Mode，如果要让任何情况下都回调，则需要设置Mode为Common模式；\n\n* 实质上，对于子线程的runloop默认是不存在的，因为苹果采用了懒加载的方式。如果我们没有手动调用[NSRunLoop currentRunLoop]的话，就不会去查询是否存在当前线程的RunLoop，也就不会去加载，更不会创建。\n\n###说一说你项目用到的混合加密及信息通信安全机制 \n每次App启动先生成一个随机的DES密钥A，然后加密要传输的字段后保存在字典中，将DES密钥用AES公钥加密B后保存在字典中。后台用私钥解密出DES密钥后再用来解密传输字段，最后得出原始数据并保存该加密B与对应的DES密钥A\n后面使用HTTPS进行通信加密，使用公证的证书最为安全。\n\n###如何保证在数据传输中不被重放攻击\n以时间戳作为传参，后台协商响应时间差范围，参考三次握手协议两边商量序列号，当发过来的序列号为服务器也存在的序列号则丢弃。\n\n###四种设计模式：单例模式，MVC，委托和观察者模式\n单例：UIApplication，UserDefault,UIAccelerometer,NSNotification,NSFileManager,NSBundle\n委托：委托对象主要对控件对象的操作和状态作出响应，数据源委托是必须实现的\n观察者模式四个组成部分：\n抽象主题：观察者容器，添加移除及向观察者发送通知\n抽象观察者：是一个协议，可以更新对象\n具体观察者：具体实现\n具体主题：SubScript协议实现\n具体应用:通知与KVO（对象属性发生变化时通知给观察者对象）\n\n###MVC模式：\nModel:保存应用数据状态，回应视图状态查询，处理应用业务逻辑，完成应用功能，将状态变化通知视图\nView:为用户展示信息提供接口，通过视图向控制器发出请求，向模型发出数据查询\nController:接收用户请求，更新模型数据，更新所对应视图状态响应用户请求，作为视图和模型的媒介，降低耦合度，权责清晰提高开发效率\n\n###Iphone 与iPad区别控件：iPad独有UIPoperViewController UISpiltController\n\n###分层架构设计：\n表示层：界面显示\n业务逻辑层：处理表示层提供数据并返回结果到表示层进行显示\n数据持久层：进行本地或网络访问\n信息系统层，存在本地或网络的信息\n\n###Textkit为程序员提供文字排版和渲染功能，主要实现图文混排的功能\n\n###数据持久化方式\n沙箱目录 \n属性列表\n对象归档(将对象进行序列化成为文件)\nsqlite\nCoreData(对象关系映射技术，也是SQLite)\n\n###\nXML是一种自描述的数据交换格式，两种读取方式：SAX（从上到下，只读，速度快）和DOM （节点方式可更改，要先读完后才能操作）系统自带NSXMLParse,第三方GDataXML\nJson:轻量级数据交换格式，自带NSJsonSerliazation，最快，处理相当麻烦，第三方JsonKit，SBJson\n\n###HTTP与HTTPS的区别\nHTTP:80  \nHTTPS:超文本文件传输安全协议：443   SSL：40位关键字 RC4流加密算法\n\n###Git操作\nGit添加到工作区：git add\nGit提交到master:  git commit -m “”\nGit上传到目标库：git push --set-upstream iOSMVCTemple master\nGit添加远程目标：git remote add name gitAddress\n\n###封装，继承，多态的意义\n封装：对名隐藏细节，保证数据不被破坏，使代码模块化\n继承：代码重用，方便子类扩展\n多态：允许用父类指针指向子类，因为子类实现对父类方法的重写，所以对同一消息有不同响应\n前两者实现对代码的重用，最后个实现对接口的重用。\n\n###浅复制和深复制的区别？\n浅层复制：只复制指向对象的指针，而不复制引用对象本身。对于要进行拷贝的对象，自身要实现NSCoding协议 -initWithZone:(NSZone)Zone\n\n###类别优劣？\ncategory 可以在不获悉，不改变原来代码的情况下往里面添加新的方法，只能添加，不能删除修改。\n并且如果类别和原来类中的方法产生名称冲突，则类别将覆盖原来的方法，因为类别具有更高的优先级。\n\n### KVO与 KVC\nkvc:键 - 值编码是一种间接访问对象的属性使用字符串来标识属性，而不是通过调用存取方法，直接或通过实例变量访问的机制。\n很多情况下可以简化程序代码。apple文档其实给了一个很好的例子。\nkvo:键值观察机制，当被观察的某一属性变化可进行响应\n\n###为什么说oc是动态运行时语言？\n答案：多态。 主要是将数据类型的确定由编译时，推迟到了运行时。\n简单来说，运行时机制使我们直到运行时才去决定一个对象的类别，以及调用该类别对象指定方法。\n\n###说说推送的实现原理\n当我们选择接收远程远程推送的时候，系统将应用BundleId和UUID发送到苹果自己的APNS服务器进行唯一设备和唯一App的注册，服务器进行注册后返回Tocken作为访问令牌，用户服务器通过推送证书和得到的Tocken向APNS请求发送推送消息，APNS服务器收到请求后进行列表查找然后向指定设备发送消息。\n\n###单例的核心是什么 \n保证实例对象只被初始化一次，并在整个程序周期中反复使用\n\n###讲讲网络接口编程是什么 \n好好学习后再写\n\n###什么是多线程\n针对计算机多核设计的一套并发操作，多个任务同时进行，目前iOS上的多线程操作包括:NSThread,NSOperation,GCD,其中苹果推荐使用GCD\n###App的性能优化可以从哪方面入手\n正确重用Cell，图片缓存，避免加载大的Xib文件，不要把主线程放到block里面，用好多线程，选择合理的方式进行数据的持久化，使用ARC,autoPool\nView尽量使用不透明的，使用gzip获取大量数据，解压工作放在后台，尽量避免格式转换一定要用可以使用单例，重用大开销对象，，使用好Cache,重用延时加载Views,处理内存警告，避免反复使用或处理数据，使用wkWeb加载数据\n###SDWebImage的实现原理\n主要运用来加载网络图片，根据网络请求先去内存查找对应的图片，然后去硬盘（如果设置的话），如果都没有去网络下载放到缓存，下次直接本地加载,使用NSCache作为缓存，异步操作，在回调中处理结果，使用NSOperation回调结果。\n\nJsonkit(Json格式转换器)\nMJRefresh:刷新工具\nMJExtention:数模转换\nMasonry：约束布局\nFMDB:sqlite数据器操作封闭\nUShare:友盟第三方分享工具\nShareSDK:Mob第三方分享\nJPush:极光推送\nOpen SSl:加密库\n微信支付SDK\n支付宝SDK\nSVProgressAssistant:加载框\nMBProgressAssistant:加载框\nImageBrowerVC:图片展示器\nIQKeyboardManager:文本输入自己调整屏幕\nDQAlertView:应用Model弹框\nBlocksKit:代码块方式实现控件消息响应\nKYVedioPlayer:第三方播放器\nUIView+RSAdditions：视图定位器\nUITableView+FDTemplateLayoutCell：TableViewCell高度自动计算器\nKAlertView:弹框\nAFNetworking:第三方网络库\nBaiduMap:百度地图库\nSDScrollView：图片轮播\nLBXScanView:二维码扫描\nRongIMKit:融云通信\nAliyunOSSiOS:阿里云数据上传库","slug":"iOS面试被问到的问题","published":1,"updated":"2021-05-14T02:01:17.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno5y004akuo4xbl4j0z5","content":"<p>近期面试问答汇总</p>\n<p>###@property(nonatomic,getter=isOn) BOOL on; 中的getter = isOn的含义？<br>答：<br>如果这个property是 BOOL on， 那么Objc默认创建的 setter 为： - (void)on:(BOOL)setOn { } getter 为： - (BOOL)on { return on; } 但是你可以手动更改 setter 和 getter 方法，就像上面的： getter = xxxOn 的话， getter 就变为： - (BOOL)xxxOn { return on; }<br>同样setter也是一样的道理</p>\n<p>###什么是内存管理机制<br>所谓内存管理就是所有权机制，对象被拥有的计算量不为0，才得以存在，不然被销毁。<br>alloc:分配内存，引用计算数为1<br>Copy:创造该对象复本，对该副本拥有并计数为1<br>Retain:对持有对象计数+1，当进行setter时会先判断该对象是否与原来一致<br>Release:销毁对象<br>autoRealease:系统自动在未来某个时段计数器-1<br>Strong:ARC引入属性，与retain一样，对对象持有，也就是在自身销毁同时，所持有对象也会销毁，可能会造成死锁。<br>Weak:ARC引入属性，只是引用对象并不将计数加1，前该对象被销毁后指针为空。</p>\n<p>###比较WebView与UKWebView之间的区别</p>\n<ol>\n<li>在性能、稳定性、功能方面有很大提升（最直观的体现就是加载网页是占用的内存，模拟器加载百度与开源中国网站时，WKWebView占用23M，而UIWebView占用85M）；</li>\n<li>允许JavaScript的Nitro库加载并使用（UIWebView中限制）；</li>\n<li>支持了更多的HTML5特性；</li>\n<li>高达60fps的滚动刷新率以及内置手势；</li>\n<li>将UIWebViewDelegate与UIWebView重构成了14类与3个协议（查看苹果官方文档）<br>window.webkit.messageHandlers.closeMe.postMessage(null);<br>//OC注册供JS调用的方法<br>[[_webView configuration].userContentController addScriptMessageHandler:self name:@”closeMe”];<br>//OC在JS调用方法做的处理</li>\n</ol>\n<ul>\n<li>(void)userContentController:(WKUserContentController <em>)userContentController didReceiveScriptMessage:(WKScriptMessage </em>)message<br>{<br>NSLog(@”JS 调用了 %@ 方法，传回参数 %@”,message.name,message.body);<br>}<br>//javaScriptString是JS方法名，completionHandler是异步回调block<br>[self.webView evaluateJavaScript:javaScriptString completionHandler:completionHandler];</li>\n</ul>\n<p>###数据库操作知道吗，你使用了哪些第三方的，有什么优势<br>苹果自带有coreData:CoreData是一个模型层的技术，也是一种持久化技术（数据库），它能将模型对象的状态持久化到磁盘里,其底层也是数据库sqlite的存储。<br>一般用第三方FMDB来自己sqlite的操作，为了保证线程安全，FMDB提供方便快捷的FMDatabaseQueue类<br>FMDatabaseQueue的创建 FMDatabaseQueue <em>queue = [FMDatabaseQueue databaseQueueWithPath:path];<br>简单使用 [queue inDatabase:^(FMDatabase </em>db) { [db executeUpdate:@”INSERT INTO t_student(name) VALUES (?)”, @”Jack”]; [db executeUpdate:@”INSERT INTO t_student(name) VALUES (?)”, @”Rose”]; [db executeUpdate:@”INSERT INTO t_student(name) VALUES (?)”, @”Jim”];<br>以队列的方法添加操作，保证对数据库的操作不会出错。</p>\n<p>###在OC中这些声明的作用，对对应的成员变量进行权限声明<br>@protected 该类和所有子类中的方法可以直接访问这样的变量。<br>@private 该类中的方法可以访问，子类不可以访问。<br>@public   可以被所有的类访问<br>@package 对framework而言内部使用，对外private，适合第三方静态库类</p>\n<p>###为什么Block 要用Copy属性<br>Block一开始放在栈上的，而代码块内的数据会用到本地变量，只有Copy会才能放到堆上，而且本地变量要使用弱引用，retail不加1 </p>\n<p>###为什么Delegate 不能用Strong,可以用weak,assign？<br>如果使用Strong,当两个对像互相把对方作为代理时，项目一个释放会引起另一个的释放，造成列循环。ARC引入strong和weak两个内存管理属性（以及<strong>strong, </strong>weak, <strong>unsafe_unretained, </strong>autoreleasing四个变量生命期qualifier）之后，对象的delegate成员变量就面临着对内存管理属性的选择：weak or assign<br>众所周知，weak属性的变量是不为其所属对象持有的，并且在该变量被销毁之后，此weak变量的值会自动被赋值为nil。而assign属性一般是对C基本数据类型成员变量的声明，当然也可以用在对象类型成员变量上，只是其代表的意义只是单纯地拷贝所赋值变量的值。即如果对某assign成员变量B赋值某对象A的指针，则此B只是简单地保存此指针的值，且并不持有对象A，也就意味着如果A被销毁，则B就指向了一个已经被销毁的对象，如果再对其发送消息会引发崩溃。<br>但在delegate成员变量这个细分领域，我们即可以用weak，又可以用assign。因为在几乎所有场景下，delegate所指向的对象C的生存期都是覆盖了delegate成员变量本身所在的对象D的生存期的，所以，在D的生存期内，C所使用的D的指针都是有效的，所以这个时候使用assign是没有关系的。</p>\n<p>###什么是NSLoop?用在哪些地方</p>\n<ul>\n<li><p>RunLoop，是多线程的法宝，即一个线程一次只能执行一个任务，执行完任务后就会退出线程。主线程执行完即时任务时会继续等待接收事件而不退出。非主线程通常来说就是为了执行某一任务的，执行完毕就需要归还资源，因此默认是不运行RunLoop的；</p>\n</li>\n<li><p>每一个线程都有其对应的RunLoop，只是默认只有主线程的RunLoop是启动的，其它子线程的RunLoop默认是不启动的，若要启动则需要手动启动；</p>\n</li>\n<li><p>在一个单独的线程中，如果需要在处理完某个任务后不退出，继续等待接收事件，则需要启用RunLoop；</p>\n</li>\n<li><p>NSRunLoop提供了一个添加NSTimer的方法，可以指定Mode，如果要让任何情况下都回调，则需要设置Mode为Common模式；</p>\n</li>\n<li><p>实质上，对于子线程的runloop默认是不存在的，因为苹果采用了懒加载的方式。如果我们没有手动调用[NSRunLoop currentRunLoop]的话，就不会去查询是否存在当前线程的RunLoop，也就不会去加载，更不会创建。</p>\n</li>\n</ul>\n<p>###说一说你项目用到的混合加密及信息通信安全机制<br>每次App启动先生成一个随机的DES密钥A，然后加密要传输的字段后保存在字典中，将DES密钥用AES公钥加密B后保存在字典中。后台用私钥解密出DES密钥后再用来解密传输字段，最后得出原始数据并保存该加密B与对应的DES密钥A<br>后面使用HTTPS进行通信加密，使用公证的证书最为安全。</p>\n<p>###如何保证在数据传输中不被重放攻击<br>以时间戳作为传参，后台协商响应时间差范围，参考三次握手协议两边商量序列号，当发过来的序列号为服务器也存在的序列号则丢弃。</p>\n<p>###四种设计模式：单例模式，MVC，委托和观察者模式<br>单例：UIApplication，UserDefault,UIAccelerometer,NSNotification,NSFileManager,NSBundle<br>委托：委托对象主要对控件对象的操作和状态作出响应，数据源委托是必须实现的<br>观察者模式四个组成部分：<br>抽象主题：观察者容器，添加移除及向观察者发送通知<br>抽象观察者：是一个协议，可以更新对象<br>具体观察者：具体实现<br>具体主题：SubScript协议实现<br>具体应用:通知与KVO（对象属性发生变化时通知给观察者对象）</p>\n<p>###MVC模式：<br>Model:保存应用数据状态，回应视图状态查询，处理应用业务逻辑，完成应用功能，将状态变化通知视图<br>View:为用户展示信息提供接口，通过视图向控制器发出请求，向模型发出数据查询<br>Controller:接收用户请求，更新模型数据，更新所对应视图状态响应用户请求，作为视图和模型的媒介，降低耦合度，权责清晰提高开发效率</p>\n<p>###Iphone 与iPad区别控件：iPad独有UIPoperViewController UISpiltController</p>\n<p>###分层架构设计：<br>表示层：界面显示<br>业务逻辑层：处理表示层提供数据并返回结果到表示层进行显示<br>数据持久层：进行本地或网络访问<br>信息系统层，存在本地或网络的信息</p>\n<p>###Textkit为程序员提供文字排版和渲染功能，主要实现图文混排的功能</p>\n<p>###数据持久化方式<br>沙箱目录<br>属性列表<br>对象归档(将对象进行序列化成为文件)<br>sqlite<br>CoreData(对象关系映射技术，也是SQLite)</p>\n<p>###<br>XML是一种自描述的数据交换格式，两种读取方式：SAX（从上到下，只读，速度快）和DOM （节点方式可更改，要先读完后才能操作）系统自带NSXMLParse,第三方GDataXML<br>Json:轻量级数据交换格式，自带NSJsonSerliazation，最快，处理相当麻烦，第三方JsonKit，SBJson</p>\n<p>###HTTP与HTTPS的区别<br>HTTP:80<br>HTTPS:超文本文件传输安全协议：443   SSL：40位关键字 RC4流加密算法</p>\n<p>###Git操作<br>Git添加到工作区：git add<br>Git提交到master:  git commit -m “”<br>Git上传到目标库：git push –set-upstream iOSMVCTemple master<br>Git添加远程目标：git remote add name gitAddress</p>\n<p>###封装，继承，多态的意义<br>封装：对名隐藏细节，保证数据不被破坏，使代码模块化<br>继承：代码重用，方便子类扩展<br>多态：允许用父类指针指向子类，因为子类实现对父类方法的重写，所以对同一消息有不同响应<br>前两者实现对代码的重用，最后个实现对接口的重用。</p>\n<p>###浅复制和深复制的区别？<br>浅层复制：只复制指向对象的指针，而不复制引用对象本身。对于要进行拷贝的对象，自身要实现NSCoding协议 -initWithZone:(NSZone)Zone</p>\n<p>###类别优劣？<br>category 可以在不获悉，不改变原来代码的情况下往里面添加新的方法，只能添加，不能删除修改。<br>并且如果类别和原来类中的方法产生名称冲突，则类别将覆盖原来的方法，因为类别具有更高的优先级。</p>\n<h3 id=\"KVO与-KVC\"><a href=\"#KVO与-KVC\" class=\"headerlink\" title=\"KVO与 KVC\"></a>KVO与 KVC</h3><p>kvc:键 - 值编码是一种间接访问对象的属性使用字符串来标识属性，而不是通过调用存取方法，直接或通过实例变量访问的机制。<br>很多情况下可以简化程序代码。apple文档其实给了一个很好的例子。<br>kvo:键值观察机制，当被观察的某一属性变化可进行响应</p>\n<p>###为什么说oc是动态运行时语言？<br>答案：多态。 主要是将数据类型的确定由编译时，推迟到了运行时。<br>简单来说，运行时机制使我们直到运行时才去决定一个对象的类别，以及调用该类别对象指定方法。</p>\n<p>###说说推送的实现原理<br>当我们选择接收远程远程推送的时候，系统将应用BundleId和UUID发送到苹果自己的APNS服务器进行唯一设备和唯一App的注册，服务器进行注册后返回Tocken作为访问令牌，用户服务器通过推送证书和得到的Tocken向APNS请求发送推送消息，APNS服务器收到请求后进行列表查找然后向指定设备发送消息。</p>\n<p>###单例的核心是什么<br>保证实例对象只被初始化一次，并在整个程序周期中反复使用</p>\n<p>###讲讲网络接口编程是什么<br>好好学习后再写</p>\n<p>###什么是多线程<br>针对计算机多核设计的一套并发操作，多个任务同时进行，目前iOS上的多线程操作包括:NSThread,NSOperation,GCD,其中苹果推荐使用GCD</p>\n<p>###App的性能优化可以从哪方面入手<br>正确重用Cell，图片缓存，避免加载大的Xib文件，不要把主线程放到block里面，用好多线程，选择合理的方式进行数据的持久化，使用ARC,autoPool<br>View尽量使用不透明的，使用gzip获取大量数据，解压工作放在后台，尽量避免格式转换一定要用可以使用单例，重用大开销对象，，使用好Cache,重用延时加载Views,处理内存警告，避免反复使用或处理数据，使用wkWeb加载数据</p>\n<p>###SDWebImage的实现原理<br>主要运用来加载网络图片，根据网络请求先去内存查找对应的图片，然后去硬盘（如果设置的话），如果都没有去网络下载放到缓存，下次直接本地加载,使用NSCache作为缓存，异步操作，在回调中处理结果，使用NSOperation回调结果。</p>\n<p>Jsonkit(Json格式转换器)<br>MJRefresh:刷新工具<br>MJExtention:数模转换<br>Masonry：约束布局<br>FMDB:sqlite数据器操作封闭<br>UShare:友盟第三方分享工具<br>ShareSDK:Mob第三方分享<br>JPush:极光推送<br>Open SSl:加密库<br>微信支付SDK<br>支付宝SDK<br>SVProgressAssistant:加载框<br>MBProgressAssistant:加载框<br>ImageBrowerVC:图片展示器<br>IQKeyboardManager:文本输入自己调整屏幕<br>DQAlertView:应用Model弹框<br>BlocksKit:代码块方式实现控件消息响应<br>KYVedioPlayer:第三方播放器<br>UIView+RSAdditions：视图定位器<br>UITableView+FDTemplateLayoutCell：TableViewCell高度自动计算器<br>KAlertView:弹框<br>AFNetworking:第三方网络库<br>BaiduMap:百度地图库<br>SDScrollView：图片轮播<br>LBXScanView:二维码扫描<br>RongIMKit:融云通信<br>AliyunOSSiOS:阿里云数据上传库</p>\n","site":{"data":{}},"excerpt":"","more":"<p>近期面试问答汇总</p>\n<p>###@property(nonatomic,getter=isOn) BOOL on; 中的getter = isOn的含义？<br>答：<br>如果这个property是 BOOL on， 那么Objc默认创建的 setter 为： - (void)on:(BOOL)setOn { } getter 为： - (BOOL)on { return on; } 但是你可以手动更改 setter 和 getter 方法，就像上面的： getter = xxxOn 的话， getter 就变为： - (BOOL)xxxOn { return on; }<br>同样setter也是一样的道理</p>\n<p>###什么是内存管理机制<br>所谓内存管理就是所有权机制，对象被拥有的计算量不为0，才得以存在，不然被销毁。<br>alloc:分配内存，引用计算数为1<br>Copy:创造该对象复本，对该副本拥有并计数为1<br>Retain:对持有对象计数+1，当进行setter时会先判断该对象是否与原来一致<br>Release:销毁对象<br>autoRealease:系统自动在未来某个时段计数器-1<br>Strong:ARC引入属性，与retain一样，对对象持有，也就是在自身销毁同时，所持有对象也会销毁，可能会造成死锁。<br>Weak:ARC引入属性，只是引用对象并不将计数加1，前该对象被销毁后指针为空。</p>\n<p>###比较WebView与UKWebView之间的区别</p>\n<ol>\n<li>在性能、稳定性、功能方面有很大提升（最直观的体现就是加载网页是占用的内存，模拟器加载百度与开源中国网站时，WKWebView占用23M，而UIWebView占用85M）；</li>\n<li>允许JavaScript的Nitro库加载并使用（UIWebView中限制）；</li>\n<li>支持了更多的HTML5特性；</li>\n<li>高达60fps的滚动刷新率以及内置手势；</li>\n<li>将UIWebViewDelegate与UIWebView重构成了14类与3个协议（查看苹果官方文档）<br>window.webkit.messageHandlers.closeMe.postMessage(null);<br>//OC注册供JS调用的方法<br>[[_webView configuration].userContentController addScriptMessageHandler:self name:@”closeMe”];<br>//OC在JS调用方法做的处理</li>\n</ol>\n<ul>\n<li>(void)userContentController:(WKUserContentController <em>)userContentController didReceiveScriptMessage:(WKScriptMessage </em>)message<br>{<br>NSLog(@”JS 调用了 %@ 方法，传回参数 %@”,message.name,message.body);<br>}<br>//javaScriptString是JS方法名，completionHandler是异步回调block<br>[self.webView evaluateJavaScript:javaScriptString completionHandler:completionHandler];</li>\n</ul>\n<p>###数据库操作知道吗，你使用了哪些第三方的，有什么优势<br>苹果自带有coreData:CoreData是一个模型层的技术，也是一种持久化技术（数据库），它能将模型对象的状态持久化到磁盘里,其底层也是数据库sqlite的存储。<br>一般用第三方FMDB来自己sqlite的操作，为了保证线程安全，FMDB提供方便快捷的FMDatabaseQueue类<br>FMDatabaseQueue的创建 FMDatabaseQueue <em>queue = [FMDatabaseQueue databaseQueueWithPath:path];<br>简单使用 [queue inDatabase:^(FMDatabase </em>db) { [db executeUpdate:@”INSERT INTO t_student(name) VALUES (?)”, @”Jack”]; [db executeUpdate:@”INSERT INTO t_student(name) VALUES (?)”, @”Rose”]; [db executeUpdate:@”INSERT INTO t_student(name) VALUES (?)”, @”Jim”];<br>以队列的方法添加操作，保证对数据库的操作不会出错。</p>\n<p>###在OC中这些声明的作用，对对应的成员变量进行权限声明<br>@protected 该类和所有子类中的方法可以直接访问这样的变量。<br>@private 该类中的方法可以访问，子类不可以访问。<br>@public   可以被所有的类访问<br>@package 对framework而言内部使用，对外private，适合第三方静态库类</p>\n<p>###为什么Block 要用Copy属性<br>Block一开始放在栈上的，而代码块内的数据会用到本地变量，只有Copy会才能放到堆上，而且本地变量要使用弱引用，retail不加1 </p>\n<p>###为什么Delegate 不能用Strong,可以用weak,assign？<br>如果使用Strong,当两个对像互相把对方作为代理时，项目一个释放会引起另一个的释放，造成列循环。ARC引入strong和weak两个内存管理属性（以及<strong>strong, </strong>weak, <strong>unsafe_unretained, </strong>autoreleasing四个变量生命期qualifier）之后，对象的delegate成员变量就面临着对内存管理属性的选择：weak or assign<br>众所周知，weak属性的变量是不为其所属对象持有的，并且在该变量被销毁之后，此weak变量的值会自动被赋值为nil。而assign属性一般是对C基本数据类型成员变量的声明，当然也可以用在对象类型成员变量上，只是其代表的意义只是单纯地拷贝所赋值变量的值。即如果对某assign成员变量B赋值某对象A的指针，则此B只是简单地保存此指针的值，且并不持有对象A，也就意味着如果A被销毁，则B就指向了一个已经被销毁的对象，如果再对其发送消息会引发崩溃。<br>但在delegate成员变量这个细分领域，我们即可以用weak，又可以用assign。因为在几乎所有场景下，delegate所指向的对象C的生存期都是覆盖了delegate成员变量本身所在的对象D的生存期的，所以，在D的生存期内，C所使用的D的指针都是有效的，所以这个时候使用assign是没有关系的。</p>\n<p>###什么是NSLoop?用在哪些地方</p>\n<ul>\n<li><p>RunLoop，是多线程的法宝，即一个线程一次只能执行一个任务，执行完任务后就会退出线程。主线程执行完即时任务时会继续等待接收事件而不退出。非主线程通常来说就是为了执行某一任务的，执行完毕就需要归还资源，因此默认是不运行RunLoop的；</p>\n</li>\n<li><p>每一个线程都有其对应的RunLoop，只是默认只有主线程的RunLoop是启动的，其它子线程的RunLoop默认是不启动的，若要启动则需要手动启动；</p>\n</li>\n<li><p>在一个单独的线程中，如果需要在处理完某个任务后不退出，继续等待接收事件，则需要启用RunLoop；</p>\n</li>\n<li><p>NSRunLoop提供了一个添加NSTimer的方法，可以指定Mode，如果要让任何情况下都回调，则需要设置Mode为Common模式；</p>\n</li>\n<li><p>实质上，对于子线程的runloop默认是不存在的，因为苹果采用了懒加载的方式。如果我们没有手动调用[NSRunLoop currentRunLoop]的话，就不会去查询是否存在当前线程的RunLoop，也就不会去加载，更不会创建。</p>\n</li>\n</ul>\n<p>###说一说你项目用到的混合加密及信息通信安全机制<br>每次App启动先生成一个随机的DES密钥A，然后加密要传输的字段后保存在字典中，将DES密钥用AES公钥加密B后保存在字典中。后台用私钥解密出DES密钥后再用来解密传输字段，最后得出原始数据并保存该加密B与对应的DES密钥A<br>后面使用HTTPS进行通信加密，使用公证的证书最为安全。</p>\n<p>###如何保证在数据传输中不被重放攻击<br>以时间戳作为传参，后台协商响应时间差范围，参考三次握手协议两边商量序列号，当发过来的序列号为服务器也存在的序列号则丢弃。</p>\n<p>###四种设计模式：单例模式，MVC，委托和观察者模式<br>单例：UIApplication，UserDefault,UIAccelerometer,NSNotification,NSFileManager,NSBundle<br>委托：委托对象主要对控件对象的操作和状态作出响应，数据源委托是必须实现的<br>观察者模式四个组成部分：<br>抽象主题：观察者容器，添加移除及向观察者发送通知<br>抽象观察者：是一个协议，可以更新对象<br>具体观察者：具体实现<br>具体主题：SubScript协议实现<br>具体应用:通知与KVO（对象属性发生变化时通知给观察者对象）</p>\n<p>###MVC模式：<br>Model:保存应用数据状态，回应视图状态查询，处理应用业务逻辑，完成应用功能，将状态变化通知视图<br>View:为用户展示信息提供接口，通过视图向控制器发出请求，向模型发出数据查询<br>Controller:接收用户请求，更新模型数据，更新所对应视图状态响应用户请求，作为视图和模型的媒介，降低耦合度，权责清晰提高开发效率</p>\n<p>###Iphone 与iPad区别控件：iPad独有UIPoperViewController UISpiltController</p>\n<p>###分层架构设计：<br>表示层：界面显示<br>业务逻辑层：处理表示层提供数据并返回结果到表示层进行显示<br>数据持久层：进行本地或网络访问<br>信息系统层，存在本地或网络的信息</p>\n<p>###Textkit为程序员提供文字排版和渲染功能，主要实现图文混排的功能</p>\n<p>###数据持久化方式<br>沙箱目录<br>属性列表<br>对象归档(将对象进行序列化成为文件)<br>sqlite<br>CoreData(对象关系映射技术，也是SQLite)</p>\n<p>###<br>XML是一种自描述的数据交换格式，两种读取方式：SAX（从上到下，只读，速度快）和DOM （节点方式可更改，要先读完后才能操作）系统自带NSXMLParse,第三方GDataXML<br>Json:轻量级数据交换格式，自带NSJsonSerliazation，最快，处理相当麻烦，第三方JsonKit，SBJson</p>\n<p>###HTTP与HTTPS的区别<br>HTTP:80<br>HTTPS:超文本文件传输安全协议：443   SSL：40位关键字 RC4流加密算法</p>\n<p>###Git操作<br>Git添加到工作区：git add<br>Git提交到master:  git commit -m “”<br>Git上传到目标库：git push –set-upstream iOSMVCTemple master<br>Git添加远程目标：git remote add name gitAddress</p>\n<p>###封装，继承，多态的意义<br>封装：对名隐藏细节，保证数据不被破坏，使代码模块化<br>继承：代码重用，方便子类扩展<br>多态：允许用父类指针指向子类，因为子类实现对父类方法的重写，所以对同一消息有不同响应<br>前两者实现对代码的重用，最后个实现对接口的重用。</p>\n<p>###浅复制和深复制的区别？<br>浅层复制：只复制指向对象的指针，而不复制引用对象本身。对于要进行拷贝的对象，自身要实现NSCoding协议 -initWithZone:(NSZone)Zone</p>\n<p>###类别优劣？<br>category 可以在不获悉，不改变原来代码的情况下往里面添加新的方法，只能添加，不能删除修改。<br>并且如果类别和原来类中的方法产生名称冲突，则类别将覆盖原来的方法，因为类别具有更高的优先级。</p>\n<h3 id=\"KVO与-KVC\"><a href=\"#KVO与-KVC\" class=\"headerlink\" title=\"KVO与 KVC\"></a>KVO与 KVC</h3><p>kvc:键 - 值编码是一种间接访问对象的属性使用字符串来标识属性，而不是通过调用存取方法，直接或通过实例变量访问的机制。<br>很多情况下可以简化程序代码。apple文档其实给了一个很好的例子。<br>kvo:键值观察机制，当被观察的某一属性变化可进行响应</p>\n<p>###为什么说oc是动态运行时语言？<br>答案：多态。 主要是将数据类型的确定由编译时，推迟到了运行时。<br>简单来说，运行时机制使我们直到运行时才去决定一个对象的类别，以及调用该类别对象指定方法。</p>\n<p>###说说推送的实现原理<br>当我们选择接收远程远程推送的时候，系统将应用BundleId和UUID发送到苹果自己的APNS服务器进行唯一设备和唯一App的注册，服务器进行注册后返回Tocken作为访问令牌，用户服务器通过推送证书和得到的Tocken向APNS请求发送推送消息，APNS服务器收到请求后进行列表查找然后向指定设备发送消息。</p>\n<p>###单例的核心是什么<br>保证实例对象只被初始化一次，并在整个程序周期中反复使用</p>\n<p>###讲讲网络接口编程是什么<br>好好学习后再写</p>\n<p>###什么是多线程<br>针对计算机多核设计的一套并发操作，多个任务同时进行，目前iOS上的多线程操作包括:NSThread,NSOperation,GCD,其中苹果推荐使用GCD</p>\n<p>###App的性能优化可以从哪方面入手<br>正确重用Cell，图片缓存，避免加载大的Xib文件，不要把主线程放到block里面，用好多线程，选择合理的方式进行数据的持久化，使用ARC,autoPool<br>View尽量使用不透明的，使用gzip获取大量数据，解压工作放在后台，尽量避免格式转换一定要用可以使用单例，重用大开销对象，，使用好Cache,重用延时加载Views,处理内存警告，避免反复使用或处理数据，使用wkWeb加载数据</p>\n<p>###SDWebImage的实现原理<br>主要运用来加载网络图片，根据网络请求先去内存查找对应的图片，然后去硬盘（如果设置的话），如果都没有去网络下载放到缓存，下次直接本地加载,使用NSCache作为缓存，异步操作，在回调中处理结果，使用NSOperation回调结果。</p>\n<p>Jsonkit(Json格式转换器)<br>MJRefresh:刷新工具<br>MJExtention:数模转换<br>Masonry：约束布局<br>FMDB:sqlite数据器操作封闭<br>UShare:友盟第三方分享工具<br>ShareSDK:Mob第三方分享<br>JPush:极光推送<br>Open SSl:加密库<br>微信支付SDK<br>支付宝SDK<br>SVProgressAssistant:加载框<br>MBProgressAssistant:加载框<br>ImageBrowerVC:图片展示器<br>IQKeyboardManager:文本输入自己调整屏幕<br>DQAlertView:应用Model弹框<br>BlocksKit:代码块方式实现控件消息响应<br>KYVedioPlayer:第三方播放器<br>UIView+RSAdditions：视图定位器<br>UITableView+FDTemplateLayoutCell：TableViewCell高度自动计算器<br>KAlertView:弹框<br>AFNetworking:第三方网络库<br>BaiduMap:百度地图库<br>SDScrollView：图片轮播<br>LBXScanView:二维码扫描<br>RongIMKit:融云通信<br>AliyunOSSiOS:阿里云数据上传库</p>\n"},{"title":"OC常用格式检查","date":"2019-03-06T17:40:22.000Z","_content":"\ntags:\n---\n要点：\n\n1. 在textField或者TextView进行输入时一般会进行输入时检查\n2. 点击提交的时候会进行手机号之类的格式验证\n3. 邮箱身份证验证\n4. 数据类型判断\n5. 小数判断\n6. 时间格式转换\n\n```\n//\n//  FormatAssistant.h\n//  HexiShop\n//\n//  Created by Smith Cool on 16/8/18.\n//  Copyright © 2016年 Xiaohr. All rights reserved.\n//\n\n#import <Foundation/Foundation.h>\n\n@interface FormatAssistant : NSObject\n\n//输入检查input开头\n//类型检查is开头\n#pragma mark ---------------------手机号phone--------------------------------\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:42\n *\n *  针对手机号码输入的格式检查\n *\n *  @param BOOL number 逐步输入手机号\n *\n *  @return 正确返回yes，错误返回NO\n */\n+ (BOOL)inputValidatePhoneNumber:(NSString*)number;\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:40\n *\n *  手机号码是否合法格式检查\n *\n *  @param BOOL phoneNumber\n *\n *  @return 不合法返回YES，合法返回NO\n */\n+(BOOL)phoneNumberisWrong:(NSString *)phoneNumber;\n\n/**\n *  @brief 手机空格格式检查并返回值\n *\n *  @param phoneNumber 手机号\n *\n *  @return 是：有错\n */\n+(BOOL)phoneNumberisWrongWithAll:(NSString *)phoneNumber;\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:33\n *\n *  针对座机号码输入的格式检查\n *\n *  @param NSString zjNumber\n *\n *  @return BOOL\n */\n+ (BOOL)inputZuoJiNumberisWrong:(NSString*)zjNumber;\n\n\n#pragma mark -------------------------类型检查----------------------------------------\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:29\n *\n *  是否为浮点型\n *\n *  @param string floatNumber\n *\n *  @return 为浮点型返回YES，否则返回NO\n */\n+ (BOOL)isPureFloat:(NSString*)floatNumber;\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:48\n *\n *  是否为整型\n *\n *  @param string intNumber\n *\n *  @return BOOL 是返回YES，否则返回NO\n */\n+ (BOOL)isPureInt:(NSString*)intNumber;\n\n/**\n *  @author Xiao  Huarong, 16-08-18 17:08:57\n *\n *  两位小数输入限制（必须与UITextFieldDelegate Change代理同用）\n *\n *  @param String xiaoshuStr 输入的数字\n *  @param NSRange  rang    输入的变化\n *  @return BOOL\n */\n+(BOOL)inputXiaoshuValidate:(NSString *)xiaoshuStr stringConfig:(NSString *)string shouldChangeCharactersInRange:(NSRange)range weishuConfig:(NSInteger)weishu;\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:49\n *\n *  针对输入金额的格式检查\n *\n *  @param NSString moneyStr\n *\n *  @return BOOL\n */\n+ (BOOL)inputMoneyFormat:(NSString*)moneyStr;\n\n#pragma mark -------------------------密码检查password----------------------------------------\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:13\n *\n *  常规密码检查（6到20位大小数字）\n *\n *  @param BOOL passWordStr\n *\n *  @return BOOL\n */\n+ (BOOL)passwordNormalisRight:(NSString *)passWordStr;\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:20\n *\n *  密码输入格式检查 ^[a-zA-Z0-9|,|.|_|!|?]\n *\n *  @param String passwordInputStr\n *\n *  @return BOOL\n */\n+ (BOOL)inputPasswordisRight:(NSString*)passwordInputStr;\n\n\n#pragma mark -------------------------自定义格式检查----------------------------------------\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:13\n *\n *  自定义符串类型检查 店铺名称检查（^[_|A-Za-z0-9\\u4E00-\\u9FA5_-]+$\"）\n *\n *  @param String passWordStr\n *  @param String regix 匹配符\n *\n *  @return BOOL\n */\n+ (BOOL)stringFormatisRight:(NSString *)string withRegix:(NSString *)regix;\n\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:21\n *\n *  自定义输入格式检查\n *\n *  @param String inputString\n *  @param String regix 匹配符\n *  @return BOOL\n */\n+ (BOOL) inputStringFormatRight:(NSString *)inputString withRegix:(NSString *)regix;\n\n#pragma mark -------------------------其它格式检查----------------------------------------\n/**\n *  @author Xiao  Huarong, 16-08-18 17:08:41\n *\n *  身份证号码格式检查\n *\n *  @param identityCard 身份证号串\n *\n *  @return BOOL\n */\n+(BOOL)IDcardFormateCheck:(NSString *)identityCard;\n\n/**\n *  @brief 邮箱格式检查\n *  @param String mailStr\n *\n *  @return BOOL\n */\n\n+(BOOL)mailValidateIsRight:(NSString *)mailStr;\n\n+(NSString *)DateWidthFormat:(NSString *)formatStr dateConfig:(NSDate *)date;\n+(NSString *)DateWidthFormat:(NSString *)formatStr timeInterValeConfig:(double)timeTamp;\n-(NSString *)DateStrFromDate:(NSDate *)date;\n\n@end\n\n```\n\n```\n//\n//  FormatAssistant.m\n//  HexiShop\n//\n//  Created by Smith Cool on 16/8/18.\n//  Copyright © 2016年 Xiaohr. All rights reserved.\n//\n\n#import \"FormatAssistant.h\"\n\n@implementation FormatAssistant\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:42\n *\n *  针对手机号码输入的格式检查\n *\n *  @param BOOL number 逐步输入手机号\n *\n *  @return 正确返回yes，错误返回NO\n */\n+ (BOOL)inputValidatePhoneNumber:(NSString*)number{\n    BOOL res = YES;\n    NSCharacterSet* tmpSet = [NSCharacterSet characterSetWithCharactersInString:@\"0123456789\"];\n    int i = 0;\n    while (i < number.length) {\n        NSString * string = [number substringWithRange:NSMakeRange(i, 1)];\n        NSRange range = [string rangeOfCharacterFromSet:tmpSet];\n        if (range.length == 0) {\n            res = NO;\n            break;\n        }\n        i++;\n    }\n    return res;\n}\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:40\n *\n *  手机号码是否合法格式检查\n *\n *  @param BOOL phoneNumber\n *\n *  @return 不合法返回YES，合法返回NO\n */\n+(BOOL)phoneNumberisWrong:(NSString *)phoneNumber{\n    NSString *phoneNo = strTrimming(phoneNumber);\n    NSString *regex = @\"1[3|4|5|7|8|][0-9]{9}\";\n    NSPredicate *predicate = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", regex];\n    if (![predicate evaluateWithObject:phoneNo]) {\n        return YES;\n    }\n    return NO;\n}\n/**\n *  @brief 手机空格格式检查并返回值\n *\n *  @param phoneNumber 手机号\n *\n *  @return 是：有错\n */\n+(BOOL)phoneNumberisWrongWithAll:(NSString *)phoneNumber{\n    if (![phoneNumber hasValue]) {\n        [UserHelp showMessage:@\"手机号不能为空\"];\n        return YES;\n    }else{\n        if([FormatAssistant phoneNumberisWrong:phoneNumber]){\n            [UserHelp showMessage:@\"手机号格式不正确\"];\n            return YES;\n        }else{\n            return NO;\n        }\n    }\n}\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:33\n *\n *  针对座机号码输入的格式检查\n *\n *  @param NSString zjNumber\n *\n *  @return BOOL\n */\n+ (BOOL)inputZuoJiNumberisWrong:(NSString*)zjNumber{\n    BOOL res = YES;\n    NSCharacterSet* tmpSet = [NSCharacterSet characterSetWithCharactersInString:@\"0123456789-\"];\n    int i = 0;\n    while (i < zjNumber.length) {\n        NSString * string = [zjNumber substringWithRange:NSMakeRange(i, 1)];\n        NSRange range = [string rangeOfCharacterFromSet:tmpSet];\n        if (range.length == 0) {\n            res = NO;\n            break;\n        }\n        i++;\n    }\n    return res;\n}\n\n#pragma mark -------------------------类型检查----------------------------------------\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:29\n *\n *  是否为浮点型\n *\n *  @param string floatNumber\n *\n *  @return 为浮点型返回YES，否则返回NO\n */\n+ (BOOL)isPureFloat:(NSString*)floatNumber{\n    NSScanner* scan = [NSScanner scannerWithString:floatNumber];\n    float val;\n    return[scan scanFloat:&val] && [scan isAtEnd];\n}\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:48\n *\n *  是否为整型\n *\n *  @param string intNumber\n *\n *  @return BOOL 是返回YES，否则返回NO\n */\n+ (BOOL)isPureInt:(NSString*)intNumber{\n    NSScanner* scan = [NSScanner scannerWithString:intNumber];\n    int val;\n    return[scan scanInt:&val] && [scan isAtEnd];\n}\n\n/**\n *  @author Xiao  Huarong, 16-08-18 17:08:57\n *\n *  两位小数输入限制（必须与UITextFieldDelegate Change代理同用）\n *\n *  @param String xiaoshuStr 输入的数字\n *  @param String string 变化串\n *  @param NSRange  rang    输入的变化\n *  @param weishu\n *  @return BOOL\n */\n\n+(BOOL)inputXiaoshuValidate:(NSString *)xiaoshuStr stringConfig:(NSString *)string shouldChangeCharactersInRange:(NSRange)range weishuConfig:(NSInteger)weishu{\n    BOOL isHaveDian = YES;\n    if ([xiaoshuStr rangeOfString:@\".\"].location == NSNotFound) {\n        isHaveDian = NO;\n    }\n    \n    if ([string length] > 0) {\n        unichar single = [string characterAtIndex:0];//当前输入的字符\n        if ((single >= '0' && single <= '9') || single == '.') {//数据格式正确\n            \n            //首字母不能为0和小数点\n            if([xiaoshuStr length] == 0){\n                if(single == '.') {\n                    //                        [self showText:@\"亲，第一个数字不能为小数点\"];\n                    [xiaoshuStr stringByReplacingCharactersInRange:range withString:@\"\"];\n                    return NO;\n                }\n                // if (single == '0') {\n                //                        [self showText:@\"亲，第一个数字不能为0\"];\n                //      [xiaoshuStr stringByReplacingCharactersInRange:range withString:@\"\"];\n                //    return NO;\n                //}\n            }\n            \n            //输入的字符是否是小数点\n            if (single == '.') {\n                if(!isHaveDian)//text中还没有小数点\n                {\n                    isHaveDian = YES;\n                    return YES;\n                    \n                }else{\n                    //                        [self showText:@\"亲，您已经输入过小数点了\"];\n                    [xiaoshuStr stringByReplacingCharactersInRange:range withString:@\"\"];\n                    return NO;\n                }\n            }else{\n                if (isHaveDian) {//存在小数点\n                    \n                    //判断小数点的位数\n                    NSRange ran = [xiaoshuStr rangeOfString:@\".\"];\n                    if (range.location - ran.location <= weishu) {\n                        return YES;\n                    }else{\n                        //                            [self showText:@\"亲，您最多输入两位小数\"];\n                        return NO;\n                    }\n                }else{\n                    return YES;\n                }\n            }\n        }else{//输入的数据格式不正确\n            //                [self showText:@\"亲，您输入的格式不正确\"];\n            [xiaoshuStr stringByReplacingCharactersInRange:range withString:@\"\"];\n            return NO;\n        }\n    }\n    else\n    {\n        return YES;\n    }\n}\n\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:49\n *\n *  针对输入金额的格式检查\n *\n *  @param NSString moneyStr\n *\n *  @return BOOL\n */\n+ (BOOL)inputMoneyFormat:(NSString*)moneyStr{\n    BOOL res = YES;\n    NSCharacterSet* tmpSet = [NSCharacterSet characterSetWithCharactersInString:@\"0123456789.\"];\n    int i = 0;\n    while (i < moneyStr.length) {\n        NSString * string = [moneyStr substringWithRange:NSMakeRange(i, 1)];\n        NSRange range = [string rangeOfCharacterFromSet:tmpSet];\n        if (range.length == 0) {\n            res = NO;\n            break;\n        }\n        i++;\n    }\n    return res;\n}\n\n#pragma mark -------------------------密码检查----------------------------------------\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:13\n *\n *  常规密码检查（6到20位大小数字）\n *\n *  @param BOOL passWordStr\n *\n *  @return BOOL\n */\n+ (BOOL)passwordNormalisRight:(NSString *)passWordStr{\n    NSString *passWordRegex = @\"^[a-zA-Z0-9]{6,20}+$\";\n    NSPredicate *passWordPredicate = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\",passWordRegex];\n    return [passWordPredicate evaluateWithObject:passWordStr];\n}\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:20\n *\n *  密码输入格式检查 ^[a-zA-Z0-9|,|.|_|!|?]\"\n *\n *  @param String passwordInputStr\n *\n *  @return BOOL\n */\n+ (BOOL)inputPasswordisRight:(NSString*)passwordInputStr{\n    BOOL res = YES;\n    NSString *passWordRegex = @\"^[a-zA-Z0-9|,|.|_|!|?]\";\n    int i = 0;\n    while (i < passwordInputStr.length) {\n        NSString * stringsub = [passwordInputStr substringWithRange:NSMakeRange(i, 1)];\n        NSPredicate *passWordPredicate = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\",passWordRegex];\n        if (![passWordPredicate evaluateWithObject:stringsub]) {\n            res = NO;\n            break;\n        }\n        i++;\n    }\n    return res;\n}\n\n#pragma mark -------------------------自定义格式检查----------------------------------------\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:13\n *\n *  自定义符串类型检查\n *\n *  @param String passWordStr\n *  @param String regix 匹配符\n *\n *  @return BOOL\n */\n+ (BOOL)stringFormatisRight:(NSString *)string withRegix:(NSString *)regix{\n    NSString *RegixFormat = regix;\n    NSPredicate *passWordPredicate = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\",RegixFormat];\n    return [passWordPredicate evaluateWithObject:string];\n}\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:21\n *\n *  自定义输入格式检查\n *\n *  @param String inputString\n *  @param String regix 匹配符\n *  @return BOOL\n */\n+ (BOOL) inputStringFormatRight:(NSString *)inputString withRegix:(NSString *)regix{\n    BOOL res = YES;\n    int i = 0;\n    while (i < inputString.length) {\n        NSString * stringsub = [inputString substringWithRange:NSMakeRange(i, 1)];\n        NSPredicate *passWordPredicate = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\",regix];\n        if (![passWordPredicate evaluateWithObject:stringsub]) {\n            res = NO;\n            break;\n        }\n        i++;\n    }\n    return res;\n}\n\n#pragma mark -------------------------其它格式检查----------------------------------------\n/**\n *  @author Xiao  Huarong, 16-08-18 17:08:41\n *\n *  身份证号码格式检查\n *\n *  @param identityCard 身份证号串\n *\n *  @return BOOL\n */\n+ (BOOL)checkIDCard:(NSString *)value {\n    value = [value stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];\n    NSInteger length =0;\n    if (!value) {\n        return NO;\n    }else {\n        length = [value length];\n        if (length !=15 && length !=18) {\n            return NO;\n        }\n    }\n    // 省份代码\n    \n    \n    \n    NSArray *areasArray =@[@\"11\",@\"12\", @\"13\",@\"14\", @\"15\",@\"21\", @\"22\",@\"23\", @\"31\",@\"32\", @\"33\",@\"34\", @\"35\",@\"36\", @\"37\",@\"41\",@\"42\",@\"43\", @\"44\",@\"45\", @\"46\",@\"50\", @\"51\",@\"52\", @\"53\",@\"54\", @\"61\",@\"62\", @\"63\",@\"64\", @\"65\",@\"71\", @\"81\",@\"82\", @\"91\"];\n    \n    NSString *valueStart2 = [value substringToIndex:2];\n    BOOL areaFlag =NO;\n    for (NSString *areaCode in areasArray) {\n        \n        if ([areaCode isEqualToString:valueStart2]) {\n            areaFlag =YES;\n            break;\n        }\n    }\n    \n    if (!areaFlag) {\n        return false;\n    }\n    \n    NSRegularExpression *regularExpression;\n    NSUInteger numberofMatch;\n    int year =0;\n    switch (length) {\n        case 15:\n            year = [value substringWithRange:NSMakeRange(6,2)].intValue +1900;\n            if (year %4 ==0 || (year %100 ==0 && year %4 ==0)) {\n                regularExpression = [[NSRegularExpression alloc]initWithPattern:@\"^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}$\"\n                                                                        options:NSRegularExpressionCaseInsensitive\n                                                                          error:nil];//测试出生日期的合法性\n            }else {\n                regularExpression = [[NSRegularExpression alloc]initWithPattern:@\"^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}$\"\n                                                                        options:NSRegularExpressionCaseInsensitive\n                                                                          error:nil];//测试出生日期的合法性\n            }\n            numberofMatch = [regularExpression numberOfMatchesInString:value\n                                                               options:NSMatchingReportProgress\n                                                                 range:NSMakeRange(0, value.length)];\n            if(numberofMatch >0) {\n                return YES;\n            }else {\n                return NO;\n            }\n        case 18:\n            year = [value substringWithRange:NSMakeRange(6,4)].intValue;\n\n            if (year %4 ==0 || (year %100 ==0 && year %4 ==0)) {\n                \n                regularExpression = [[NSRegularExpression alloc]initWithPattern:@\"^[1-9][0-9]{5}19[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}[0-9Xx]$\"\n                                     \n                                                                        options:NSRegularExpressionCaseInsensitive\n                                     \n                                     \n                                     \n                                                                          error:nil];//测试出生日期的合法性\n                \n                \n                \n            }else {\n                \n                \n                \n                regularExpression = [[NSRegularExpression alloc]initWithPattern:@\"^[1-9][0-9]{5}19[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}[0-9Xx]$\"\n                                     \n                                     \n                                     \n                                                                        options:NSRegularExpressionCaseInsensitive\n                                     \n                                     \n                                     \n                                                                          error:nil];//测试出生日期的合法性\n                \n                \n                \n            }\n            \n            \n            \n            numberofMatch = [regularExpression numberOfMatchesInString:value\n                             \n                             \n                             \n                                                               options:NSMatchingReportProgress\n                             \n                             \n                             \n                                                                 range:NSMakeRange(0, value.length)];\n            \n            if(numberofMatch >0) {\n                \n                \n                \n                int S = ([value substringWithRange:NSMakeRange(0,1)].intValue + [value substringWithRange:NSMakeRange(10,1)].intValue) *7 + ([value substringWithRange:NSMakeRange(1,1)].intValue + [value substringWithRange:NSMakeRange(11,1)].intValue) *9 + ([value substringWithRange:NSMakeRange(2,1)].intValue + [value substringWithRange:NSMakeRange(12,1)].intValue) *10 + ([value substringWithRange:NSMakeRange(3,1)].intValue + [value substringWithRange:NSMakeRange(13,1)].intValue) *5 + ([value substringWithRange:NSMakeRange(4,1)].intValue + [value substringWithRange:NSMakeRange(14,1)].intValue) *8 + ([value substringWithRange:NSMakeRange(5,1)].intValue + [value substringWithRange:NSMakeRange(15,1)].intValue) *4 + ([value substringWithRange:NSMakeRange(6,1)].intValue + [value substringWithRange:NSMakeRange(16,1)].intValue) *2 + [value substringWithRange:NSMakeRange(7,1)].intValue *1 + [value substringWithRange:NSMakeRange(8,1)].intValue *6 + [value substringWithRange:NSMakeRange(9,1)].intValue *3;\n\n                int Y = S %11;\n\n                NSString *M =@\"F\";\n\n                NSString *JYM =@\"10X98765432\";\n\n                M = [JYM substringWithRange:NSMakeRange(Y,1)];// 判断校验位\n\n                if ([M isEqualToString:[value substringWithRange:NSMakeRange(17,1)]]) {\n\n                    return YES;// 检测ID的校验位\n \n                }else {\n\n                    return NO;\n \n                }\n            }else {\n\n                return NO;\n            }\n\n        default:\n\n            return false;\n    }\n}\n/**\n *  @brief 邮箱格式检查\n *  @param String mailStr\n *  \n *  return BOOL\n */\n\n+(BOOL)mailValidateIsRight:(NSString *)mailStr{\n    NSString *emailRegex = @\"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}\";\n    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", emailRegex];\n    return [emailTest evaluateWithObject:mailStr];\n}\n\n+(NSString *)DateWidthFormat:(NSString *)formatStr dateConfig:(NSDate *)date{\n    NSDateFormatter *format = [[NSDateFormatter alloc]init];\n    [format setDateFormat:formatStr];\n    return [format stringFromDate:date];\n}\n+(NSString *)DateWidthFormat:(NSString *)formatStr timeInterValeConfig:(double)timeTamp{\n    NSDate *date = [NSDate dateWithTimeIntervalSince1970:timeTamp];\n    \n    NSDateFormatter *format = [[NSDateFormatter alloc]init];\n    [format setDateFormat:formatStr];\n    return [format stringFromDate:date];\n}\n\n-(NSString *)DateStrFromDate:(NSDate *)date{\n    NSTimeInterval interval = [date timeIntervalSince1970] * 1000;\n    NSString *timeTramp = [NSString stringWithFormat:@\"%ld\",(long)interval];\n    return timeTramp;\n}\n\n@end\n```","source":"_posts/OC常用格式检查.md","raw":"---\ntitle: OC常用格式检查\ndate: 2019-03-06 17:40:22\ntags: iOS\ncategories: 苹果开发\n---\n\ntags:\n---\n要点：\n\n1. 在textField或者TextView进行输入时一般会进行输入时检查\n2. 点击提交的时候会进行手机号之类的格式验证\n3. 邮箱身份证验证\n4. 数据类型判断\n5. 小数判断\n6. 时间格式转换\n\n```\n//\n//  FormatAssistant.h\n//  HexiShop\n//\n//  Created by Smith Cool on 16/8/18.\n//  Copyright © 2016年 Xiaohr. All rights reserved.\n//\n\n#import <Foundation/Foundation.h>\n\n@interface FormatAssistant : NSObject\n\n//输入检查input开头\n//类型检查is开头\n#pragma mark ---------------------手机号phone--------------------------------\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:42\n *\n *  针对手机号码输入的格式检查\n *\n *  @param BOOL number 逐步输入手机号\n *\n *  @return 正确返回yes，错误返回NO\n */\n+ (BOOL)inputValidatePhoneNumber:(NSString*)number;\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:40\n *\n *  手机号码是否合法格式检查\n *\n *  @param BOOL phoneNumber\n *\n *  @return 不合法返回YES，合法返回NO\n */\n+(BOOL)phoneNumberisWrong:(NSString *)phoneNumber;\n\n/**\n *  @brief 手机空格格式检查并返回值\n *\n *  @param phoneNumber 手机号\n *\n *  @return 是：有错\n */\n+(BOOL)phoneNumberisWrongWithAll:(NSString *)phoneNumber;\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:33\n *\n *  针对座机号码输入的格式检查\n *\n *  @param NSString zjNumber\n *\n *  @return BOOL\n */\n+ (BOOL)inputZuoJiNumberisWrong:(NSString*)zjNumber;\n\n\n#pragma mark -------------------------类型检查----------------------------------------\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:29\n *\n *  是否为浮点型\n *\n *  @param string floatNumber\n *\n *  @return 为浮点型返回YES，否则返回NO\n */\n+ (BOOL)isPureFloat:(NSString*)floatNumber;\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:48\n *\n *  是否为整型\n *\n *  @param string intNumber\n *\n *  @return BOOL 是返回YES，否则返回NO\n */\n+ (BOOL)isPureInt:(NSString*)intNumber;\n\n/**\n *  @author Xiao  Huarong, 16-08-18 17:08:57\n *\n *  两位小数输入限制（必须与UITextFieldDelegate Change代理同用）\n *\n *  @param String xiaoshuStr 输入的数字\n *  @param NSRange  rang    输入的变化\n *  @return BOOL\n */\n+(BOOL)inputXiaoshuValidate:(NSString *)xiaoshuStr stringConfig:(NSString *)string shouldChangeCharactersInRange:(NSRange)range weishuConfig:(NSInteger)weishu;\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:49\n *\n *  针对输入金额的格式检查\n *\n *  @param NSString moneyStr\n *\n *  @return BOOL\n */\n+ (BOOL)inputMoneyFormat:(NSString*)moneyStr;\n\n#pragma mark -------------------------密码检查password----------------------------------------\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:13\n *\n *  常规密码检查（6到20位大小数字）\n *\n *  @param BOOL passWordStr\n *\n *  @return BOOL\n */\n+ (BOOL)passwordNormalisRight:(NSString *)passWordStr;\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:20\n *\n *  密码输入格式检查 ^[a-zA-Z0-9|,|.|_|!|?]\n *\n *  @param String passwordInputStr\n *\n *  @return BOOL\n */\n+ (BOOL)inputPasswordisRight:(NSString*)passwordInputStr;\n\n\n#pragma mark -------------------------自定义格式检查----------------------------------------\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:13\n *\n *  自定义符串类型检查 店铺名称检查（^[_|A-Za-z0-9\\u4E00-\\u9FA5_-]+$\"）\n *\n *  @param String passWordStr\n *  @param String regix 匹配符\n *\n *  @return BOOL\n */\n+ (BOOL)stringFormatisRight:(NSString *)string withRegix:(NSString *)regix;\n\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:21\n *\n *  自定义输入格式检查\n *\n *  @param String inputString\n *  @param String regix 匹配符\n *  @return BOOL\n */\n+ (BOOL) inputStringFormatRight:(NSString *)inputString withRegix:(NSString *)regix;\n\n#pragma mark -------------------------其它格式检查----------------------------------------\n/**\n *  @author Xiao  Huarong, 16-08-18 17:08:41\n *\n *  身份证号码格式检查\n *\n *  @param identityCard 身份证号串\n *\n *  @return BOOL\n */\n+(BOOL)IDcardFormateCheck:(NSString *)identityCard;\n\n/**\n *  @brief 邮箱格式检查\n *  @param String mailStr\n *\n *  @return BOOL\n */\n\n+(BOOL)mailValidateIsRight:(NSString *)mailStr;\n\n+(NSString *)DateWidthFormat:(NSString *)formatStr dateConfig:(NSDate *)date;\n+(NSString *)DateWidthFormat:(NSString *)formatStr timeInterValeConfig:(double)timeTamp;\n-(NSString *)DateStrFromDate:(NSDate *)date;\n\n@end\n\n```\n\n```\n//\n//  FormatAssistant.m\n//  HexiShop\n//\n//  Created by Smith Cool on 16/8/18.\n//  Copyright © 2016年 Xiaohr. All rights reserved.\n//\n\n#import \"FormatAssistant.h\"\n\n@implementation FormatAssistant\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:42\n *\n *  针对手机号码输入的格式检查\n *\n *  @param BOOL number 逐步输入手机号\n *\n *  @return 正确返回yes，错误返回NO\n */\n+ (BOOL)inputValidatePhoneNumber:(NSString*)number{\n    BOOL res = YES;\n    NSCharacterSet* tmpSet = [NSCharacterSet characterSetWithCharactersInString:@\"0123456789\"];\n    int i = 0;\n    while (i < number.length) {\n        NSString * string = [number substringWithRange:NSMakeRange(i, 1)];\n        NSRange range = [string rangeOfCharacterFromSet:tmpSet];\n        if (range.length == 0) {\n            res = NO;\n            break;\n        }\n        i++;\n    }\n    return res;\n}\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:40\n *\n *  手机号码是否合法格式检查\n *\n *  @param BOOL phoneNumber\n *\n *  @return 不合法返回YES，合法返回NO\n */\n+(BOOL)phoneNumberisWrong:(NSString *)phoneNumber{\n    NSString *phoneNo = strTrimming(phoneNumber);\n    NSString *regex = @\"1[3|4|5|7|8|][0-9]{9}\";\n    NSPredicate *predicate = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", regex];\n    if (![predicate evaluateWithObject:phoneNo]) {\n        return YES;\n    }\n    return NO;\n}\n/**\n *  @brief 手机空格格式检查并返回值\n *\n *  @param phoneNumber 手机号\n *\n *  @return 是：有错\n */\n+(BOOL)phoneNumberisWrongWithAll:(NSString *)phoneNumber{\n    if (![phoneNumber hasValue]) {\n        [UserHelp showMessage:@\"手机号不能为空\"];\n        return YES;\n    }else{\n        if([FormatAssistant phoneNumberisWrong:phoneNumber]){\n            [UserHelp showMessage:@\"手机号格式不正确\"];\n            return YES;\n        }else{\n            return NO;\n        }\n    }\n}\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:33\n *\n *  针对座机号码输入的格式检查\n *\n *  @param NSString zjNumber\n *\n *  @return BOOL\n */\n+ (BOOL)inputZuoJiNumberisWrong:(NSString*)zjNumber{\n    BOOL res = YES;\n    NSCharacterSet* tmpSet = [NSCharacterSet characterSetWithCharactersInString:@\"0123456789-\"];\n    int i = 0;\n    while (i < zjNumber.length) {\n        NSString * string = [zjNumber substringWithRange:NSMakeRange(i, 1)];\n        NSRange range = [string rangeOfCharacterFromSet:tmpSet];\n        if (range.length == 0) {\n            res = NO;\n            break;\n        }\n        i++;\n    }\n    return res;\n}\n\n#pragma mark -------------------------类型检查----------------------------------------\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:29\n *\n *  是否为浮点型\n *\n *  @param string floatNumber\n *\n *  @return 为浮点型返回YES，否则返回NO\n */\n+ (BOOL)isPureFloat:(NSString*)floatNumber{\n    NSScanner* scan = [NSScanner scannerWithString:floatNumber];\n    float val;\n    return[scan scanFloat:&val] && [scan isAtEnd];\n}\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:48\n *\n *  是否为整型\n *\n *  @param string intNumber\n *\n *  @return BOOL 是返回YES，否则返回NO\n */\n+ (BOOL)isPureInt:(NSString*)intNumber{\n    NSScanner* scan = [NSScanner scannerWithString:intNumber];\n    int val;\n    return[scan scanInt:&val] && [scan isAtEnd];\n}\n\n/**\n *  @author Xiao  Huarong, 16-08-18 17:08:57\n *\n *  两位小数输入限制（必须与UITextFieldDelegate Change代理同用）\n *\n *  @param String xiaoshuStr 输入的数字\n *  @param String string 变化串\n *  @param NSRange  rang    输入的变化\n *  @param weishu\n *  @return BOOL\n */\n\n+(BOOL)inputXiaoshuValidate:(NSString *)xiaoshuStr stringConfig:(NSString *)string shouldChangeCharactersInRange:(NSRange)range weishuConfig:(NSInteger)weishu{\n    BOOL isHaveDian = YES;\n    if ([xiaoshuStr rangeOfString:@\".\"].location == NSNotFound) {\n        isHaveDian = NO;\n    }\n    \n    if ([string length] > 0) {\n        unichar single = [string characterAtIndex:0];//当前输入的字符\n        if ((single >= '0' && single <= '9') || single == '.') {//数据格式正确\n            \n            //首字母不能为0和小数点\n            if([xiaoshuStr length] == 0){\n                if(single == '.') {\n                    //                        [self showText:@\"亲，第一个数字不能为小数点\"];\n                    [xiaoshuStr stringByReplacingCharactersInRange:range withString:@\"\"];\n                    return NO;\n                }\n                // if (single == '0') {\n                //                        [self showText:@\"亲，第一个数字不能为0\"];\n                //      [xiaoshuStr stringByReplacingCharactersInRange:range withString:@\"\"];\n                //    return NO;\n                //}\n            }\n            \n            //输入的字符是否是小数点\n            if (single == '.') {\n                if(!isHaveDian)//text中还没有小数点\n                {\n                    isHaveDian = YES;\n                    return YES;\n                    \n                }else{\n                    //                        [self showText:@\"亲，您已经输入过小数点了\"];\n                    [xiaoshuStr stringByReplacingCharactersInRange:range withString:@\"\"];\n                    return NO;\n                }\n            }else{\n                if (isHaveDian) {//存在小数点\n                    \n                    //判断小数点的位数\n                    NSRange ran = [xiaoshuStr rangeOfString:@\".\"];\n                    if (range.location - ran.location <= weishu) {\n                        return YES;\n                    }else{\n                        //                            [self showText:@\"亲，您最多输入两位小数\"];\n                        return NO;\n                    }\n                }else{\n                    return YES;\n                }\n            }\n        }else{//输入的数据格式不正确\n            //                [self showText:@\"亲，您输入的格式不正确\"];\n            [xiaoshuStr stringByReplacingCharactersInRange:range withString:@\"\"];\n            return NO;\n        }\n    }\n    else\n    {\n        return YES;\n    }\n}\n\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:49\n *\n *  针对输入金额的格式检查\n *\n *  @param NSString moneyStr\n *\n *  @return BOOL\n */\n+ (BOOL)inputMoneyFormat:(NSString*)moneyStr{\n    BOOL res = YES;\n    NSCharacterSet* tmpSet = [NSCharacterSet characterSetWithCharactersInString:@\"0123456789.\"];\n    int i = 0;\n    while (i < moneyStr.length) {\n        NSString * string = [moneyStr substringWithRange:NSMakeRange(i, 1)];\n        NSRange range = [string rangeOfCharacterFromSet:tmpSet];\n        if (range.length == 0) {\n            res = NO;\n            break;\n        }\n        i++;\n    }\n    return res;\n}\n\n#pragma mark -------------------------密码检查----------------------------------------\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:13\n *\n *  常规密码检查（6到20位大小数字）\n *\n *  @param BOOL passWordStr\n *\n *  @return BOOL\n */\n+ (BOOL)passwordNormalisRight:(NSString *)passWordStr{\n    NSString *passWordRegex = @\"^[a-zA-Z0-9]{6,20}+$\";\n    NSPredicate *passWordPredicate = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\",passWordRegex];\n    return [passWordPredicate evaluateWithObject:passWordStr];\n}\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:20\n *\n *  密码输入格式检查 ^[a-zA-Z0-9|,|.|_|!|?]\"\n *\n *  @param String passwordInputStr\n *\n *  @return BOOL\n */\n+ (BOOL)inputPasswordisRight:(NSString*)passwordInputStr{\n    BOOL res = YES;\n    NSString *passWordRegex = @\"^[a-zA-Z0-9|,|.|_|!|?]\";\n    int i = 0;\n    while (i < passwordInputStr.length) {\n        NSString * stringsub = [passwordInputStr substringWithRange:NSMakeRange(i, 1)];\n        NSPredicate *passWordPredicate = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\",passWordRegex];\n        if (![passWordPredicate evaluateWithObject:stringsub]) {\n            res = NO;\n            break;\n        }\n        i++;\n    }\n    return res;\n}\n\n#pragma mark -------------------------自定义格式检查----------------------------------------\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:13\n *\n *  自定义符串类型检查\n *\n *  @param String passWordStr\n *  @param String regix 匹配符\n *\n *  @return BOOL\n */\n+ (BOOL)stringFormatisRight:(NSString *)string withRegix:(NSString *)regix{\n    NSString *RegixFormat = regix;\n    NSPredicate *passWordPredicate = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\",RegixFormat];\n    return [passWordPredicate evaluateWithObject:string];\n}\n\n/**\n *  @author Xiao  Huarong, 16-08-18 16:08:21\n *\n *  自定义输入格式检查\n *\n *  @param String inputString\n *  @param String regix 匹配符\n *  @return BOOL\n */\n+ (BOOL) inputStringFormatRight:(NSString *)inputString withRegix:(NSString *)regix{\n    BOOL res = YES;\n    int i = 0;\n    while (i < inputString.length) {\n        NSString * stringsub = [inputString substringWithRange:NSMakeRange(i, 1)];\n        NSPredicate *passWordPredicate = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\",regix];\n        if (![passWordPredicate evaluateWithObject:stringsub]) {\n            res = NO;\n            break;\n        }\n        i++;\n    }\n    return res;\n}\n\n#pragma mark -------------------------其它格式检查----------------------------------------\n/**\n *  @author Xiao  Huarong, 16-08-18 17:08:41\n *\n *  身份证号码格式检查\n *\n *  @param identityCard 身份证号串\n *\n *  @return BOOL\n */\n+ (BOOL)checkIDCard:(NSString *)value {\n    value = [value stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];\n    NSInteger length =0;\n    if (!value) {\n        return NO;\n    }else {\n        length = [value length];\n        if (length !=15 && length !=18) {\n            return NO;\n        }\n    }\n    // 省份代码\n    \n    \n    \n    NSArray *areasArray =@[@\"11\",@\"12\", @\"13\",@\"14\", @\"15\",@\"21\", @\"22\",@\"23\", @\"31\",@\"32\", @\"33\",@\"34\", @\"35\",@\"36\", @\"37\",@\"41\",@\"42\",@\"43\", @\"44\",@\"45\", @\"46\",@\"50\", @\"51\",@\"52\", @\"53\",@\"54\", @\"61\",@\"62\", @\"63\",@\"64\", @\"65\",@\"71\", @\"81\",@\"82\", @\"91\"];\n    \n    NSString *valueStart2 = [value substringToIndex:2];\n    BOOL areaFlag =NO;\n    for (NSString *areaCode in areasArray) {\n        \n        if ([areaCode isEqualToString:valueStart2]) {\n            areaFlag =YES;\n            break;\n        }\n    }\n    \n    if (!areaFlag) {\n        return false;\n    }\n    \n    NSRegularExpression *regularExpression;\n    NSUInteger numberofMatch;\n    int year =0;\n    switch (length) {\n        case 15:\n            year = [value substringWithRange:NSMakeRange(6,2)].intValue +1900;\n            if (year %4 ==0 || (year %100 ==0 && year %4 ==0)) {\n                regularExpression = [[NSRegularExpression alloc]initWithPattern:@\"^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}$\"\n                                                                        options:NSRegularExpressionCaseInsensitive\n                                                                          error:nil];//测试出生日期的合法性\n            }else {\n                regularExpression = [[NSRegularExpression alloc]initWithPattern:@\"^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}$\"\n                                                                        options:NSRegularExpressionCaseInsensitive\n                                                                          error:nil];//测试出生日期的合法性\n            }\n            numberofMatch = [regularExpression numberOfMatchesInString:value\n                                                               options:NSMatchingReportProgress\n                                                                 range:NSMakeRange(0, value.length)];\n            if(numberofMatch >0) {\n                return YES;\n            }else {\n                return NO;\n            }\n        case 18:\n            year = [value substringWithRange:NSMakeRange(6,4)].intValue;\n\n            if (year %4 ==0 || (year %100 ==0 && year %4 ==0)) {\n                \n                regularExpression = [[NSRegularExpression alloc]initWithPattern:@\"^[1-9][0-9]{5}19[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}[0-9Xx]$\"\n                                     \n                                                                        options:NSRegularExpressionCaseInsensitive\n                                     \n                                     \n                                     \n                                                                          error:nil];//测试出生日期的合法性\n                \n                \n                \n            }else {\n                \n                \n                \n                regularExpression = [[NSRegularExpression alloc]initWithPattern:@\"^[1-9][0-9]{5}19[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}[0-9Xx]$\"\n                                     \n                                     \n                                     \n                                                                        options:NSRegularExpressionCaseInsensitive\n                                     \n                                     \n                                     \n                                                                          error:nil];//测试出生日期的合法性\n                \n                \n                \n            }\n            \n            \n            \n            numberofMatch = [regularExpression numberOfMatchesInString:value\n                             \n                             \n                             \n                                                               options:NSMatchingReportProgress\n                             \n                             \n                             \n                                                                 range:NSMakeRange(0, value.length)];\n            \n            if(numberofMatch >0) {\n                \n                \n                \n                int S = ([value substringWithRange:NSMakeRange(0,1)].intValue + [value substringWithRange:NSMakeRange(10,1)].intValue) *7 + ([value substringWithRange:NSMakeRange(1,1)].intValue + [value substringWithRange:NSMakeRange(11,1)].intValue) *9 + ([value substringWithRange:NSMakeRange(2,1)].intValue + [value substringWithRange:NSMakeRange(12,1)].intValue) *10 + ([value substringWithRange:NSMakeRange(3,1)].intValue + [value substringWithRange:NSMakeRange(13,1)].intValue) *5 + ([value substringWithRange:NSMakeRange(4,1)].intValue + [value substringWithRange:NSMakeRange(14,1)].intValue) *8 + ([value substringWithRange:NSMakeRange(5,1)].intValue + [value substringWithRange:NSMakeRange(15,1)].intValue) *4 + ([value substringWithRange:NSMakeRange(6,1)].intValue + [value substringWithRange:NSMakeRange(16,1)].intValue) *2 + [value substringWithRange:NSMakeRange(7,1)].intValue *1 + [value substringWithRange:NSMakeRange(8,1)].intValue *6 + [value substringWithRange:NSMakeRange(9,1)].intValue *3;\n\n                int Y = S %11;\n\n                NSString *M =@\"F\";\n\n                NSString *JYM =@\"10X98765432\";\n\n                M = [JYM substringWithRange:NSMakeRange(Y,1)];// 判断校验位\n\n                if ([M isEqualToString:[value substringWithRange:NSMakeRange(17,1)]]) {\n\n                    return YES;// 检测ID的校验位\n \n                }else {\n\n                    return NO;\n \n                }\n            }else {\n\n                return NO;\n            }\n\n        default:\n\n            return false;\n    }\n}\n/**\n *  @brief 邮箱格式检查\n *  @param String mailStr\n *  \n *  return BOOL\n */\n\n+(BOOL)mailValidateIsRight:(NSString *)mailStr{\n    NSString *emailRegex = @\"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}\";\n    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", emailRegex];\n    return [emailTest evaluateWithObject:mailStr];\n}\n\n+(NSString *)DateWidthFormat:(NSString *)formatStr dateConfig:(NSDate *)date{\n    NSDateFormatter *format = [[NSDateFormatter alloc]init];\n    [format setDateFormat:formatStr];\n    return [format stringFromDate:date];\n}\n+(NSString *)DateWidthFormat:(NSString *)formatStr timeInterValeConfig:(double)timeTamp{\n    NSDate *date = [NSDate dateWithTimeIntervalSince1970:timeTamp];\n    \n    NSDateFormatter *format = [[NSDateFormatter alloc]init];\n    [format setDateFormat:formatStr];\n    return [format stringFromDate:date];\n}\n\n-(NSString *)DateStrFromDate:(NSDate *)date{\n    NSTimeInterval interval = [date timeIntervalSince1970] * 1000;\n    NSString *timeTramp = [NSString stringWithFormat:@\"%ld\",(long)interval];\n    return timeTramp;\n}\n\n@end\n```","slug":"OC常用格式检查","published":1,"updated":"2021-05-14T02:01:17.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckonpno7e004ikuo4pmnjeb2f","content":"<h2 id=\"tags\"><a href=\"#tags\" class=\"headerlink\" title=\"tags:\"></a>tags:</h2><p>要点：</p>\n<ol>\n<li>在textField或者TextView进行输入时一般会进行输入时检查</li>\n<li>点击提交的时候会进行手机号之类的格式验证</li>\n<li>邮箱身份证验证</li>\n<li>数据类型判断</li>\n<li>小数判断</li>\n<li>时间格式转换</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  FormatAssistant.h</span><br><span class=\"line\">//  HexiShop</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by Smith Cool on 16/8/18.</span><br><span class=\"line\">//  Copyright © 2016年 Xiaohr. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface FormatAssistant : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">//输入检查input开头</span><br><span class=\"line\">//类型检查is开头</span><br><span class=\"line\">#pragma mark ---------------------手机号phone--------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:42</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  针对手机号码输入的格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param BOOL number 逐步输入手机号</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 正确返回yes，错误返回NO</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)inputValidatePhoneNumber:(NSString*)number;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:40</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  手机号码是否合法格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param BOOL phoneNumber</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 不合法返回YES，合法返回NO</span><br><span class=\"line\"> */</span><br><span class=\"line\">+(BOOL)phoneNumberisWrong:(NSString *)phoneNumber;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @brief 手机空格格式检查并返回值</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param phoneNumber 手机号</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 是：有错</span><br><span class=\"line\"> */</span><br><span class=\"line\">+(BOOL)phoneNumberisWrongWithAll:(NSString *)phoneNumber;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:33</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  针对座机号码输入的格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param NSString zjNumber</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)inputZuoJiNumberisWrong:(NSString*)zjNumber;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark -------------------------类型检查----------------------------------------</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:29</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  是否为浮点型</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param string floatNumber</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 为浮点型返回YES，否则返回NO</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)isPureFloat:(NSString*)floatNumber;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:48</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  是否为整型</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param string intNumber</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL 是返回YES，否则返回NO</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)isPureInt:(NSString*)intNumber;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 17:08:57</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  两位小数输入限制（必须与UITextFieldDelegate Change代理同用）</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param String xiaoshuStr 输入的数字</span><br><span class=\"line\"> *  @param NSRange  rang    输入的变化</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+(BOOL)inputXiaoshuValidate:(NSString *)xiaoshuStr stringConfig:(NSString *)string shouldChangeCharactersInRange:(NSRange)range weishuConfig:(NSInteger)weishu;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:49</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  针对输入金额的格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param NSString moneyStr</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)inputMoneyFormat:(NSString*)moneyStr;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark -------------------------密码检查password----------------------------------------</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:13</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  常规密码检查（6到20位大小数字）</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param BOOL passWordStr</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)passwordNormalisRight:(NSString *)passWordStr;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:20</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  密码输入格式检查 ^[a-zA-Z0-9|,|.|_|!|?]</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param String passwordInputStr</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)inputPasswordisRight:(NSString*)passwordInputStr;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark -------------------------自定义格式检查----------------------------------------</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:13</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  自定义符串类型检查 店铺名称检查（^[_|A-Za-z0-9\\u4E00-\\u9FA5_-]+$&quot;）</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param String passWordStr</span><br><span class=\"line\"> *  @param String regix 匹配符</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)stringFormatisRight:(NSString *)string withRegix:(NSString *)regix;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:21</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  自定义输入格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param String inputString</span><br><span class=\"line\"> *  @param String regix 匹配符</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL) inputStringFormatRight:(NSString *)inputString withRegix:(NSString *)regix;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark -------------------------其它格式检查----------------------------------------</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 17:08:41</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  身份证号码格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param identityCard 身份证号串</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+(BOOL)IDcardFormateCheck:(NSString *)identityCard;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @brief 邮箱格式检查</span><br><span class=\"line\"> *  @param String mailStr</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">+(BOOL)mailValidateIsRight:(NSString *)mailStr;</span><br><span class=\"line\"></span><br><span class=\"line\">+(NSString *)DateWidthFormat:(NSString *)formatStr dateConfig:(NSDate *)date;</span><br><span class=\"line\">+(NSString *)DateWidthFormat:(NSString *)formatStr timeInterValeConfig:(double)timeTamp;</span><br><span class=\"line\">-(NSString *)DateStrFromDate:(NSDate *)date;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  FormatAssistant.m</span><br><span class=\"line\">//  HexiShop</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by Smith Cool on 16/8/18.</span><br><span class=\"line\">//  Copyright © 2016年 Xiaohr. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;FormatAssistant.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation FormatAssistant</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:42</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  针对手机号码输入的格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param BOOL number 逐步输入手机号</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 正确返回yes，错误返回NO</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)inputValidatePhoneNumber:(NSString*)number&#123;</span><br><span class=\"line\">    BOOL res = YES;</span><br><span class=\"line\">    NSCharacterSet* tmpSet = [NSCharacterSet characterSetWithCharactersInString:@&quot;0123456789&quot;];</span><br><span class=\"line\">    int i = 0;</span><br><span class=\"line\">    while (i &lt; number.length) &#123;</span><br><span class=\"line\">        NSString * string = [number substringWithRange:NSMakeRange(i, 1)];</span><br><span class=\"line\">        NSRange range = [string rangeOfCharacterFromSet:tmpSet];</span><br><span class=\"line\">        if (range.length == 0) &#123;</span><br><span class=\"line\">            res = NO;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:40</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  手机号码是否合法格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param BOOL phoneNumber</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 不合法返回YES，合法返回NO</span><br><span class=\"line\"> */</span><br><span class=\"line\">+(BOOL)phoneNumberisWrong:(NSString *)phoneNumber&#123;</span><br><span class=\"line\">    NSString *phoneNo = strTrimming(phoneNumber);</span><br><span class=\"line\">    NSString *regex = @&quot;1[3|4|5|7|8|][0-9]&#123;9&#125;&quot;;</span><br><span class=\"line\">    NSPredicate *predicate = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, regex];</span><br><span class=\"line\">    if (![predicate evaluateWithObject:phoneNo]) &#123;</span><br><span class=\"line\">        return YES;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return NO;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @brief 手机空格格式检查并返回值</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param phoneNumber 手机号</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 是：有错</span><br><span class=\"line\"> */</span><br><span class=\"line\">+(BOOL)phoneNumberisWrongWithAll:(NSString *)phoneNumber&#123;</span><br><span class=\"line\">    if (![phoneNumber hasValue]) &#123;</span><br><span class=\"line\">        [UserHelp showMessage:@&quot;手机号不能为空&quot;];</span><br><span class=\"line\">        return YES;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        if([FormatAssistant phoneNumberisWrong:phoneNumber])&#123;</span><br><span class=\"line\">            [UserHelp showMessage:@&quot;手机号格式不正确&quot;];</span><br><span class=\"line\">            return YES;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            return NO;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:33</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  针对座机号码输入的格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param NSString zjNumber</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)inputZuoJiNumberisWrong:(NSString*)zjNumber&#123;</span><br><span class=\"line\">    BOOL res = YES;</span><br><span class=\"line\">    NSCharacterSet* tmpSet = [NSCharacterSet characterSetWithCharactersInString:@&quot;0123456789-&quot;];</span><br><span class=\"line\">    int i = 0;</span><br><span class=\"line\">    while (i &lt; zjNumber.length) &#123;</span><br><span class=\"line\">        NSString * string = [zjNumber substringWithRange:NSMakeRange(i, 1)];</span><br><span class=\"line\">        NSRange range = [string rangeOfCharacterFromSet:tmpSet];</span><br><span class=\"line\">        if (range.length == 0) &#123;</span><br><span class=\"line\">            res = NO;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark -------------------------类型检查----------------------------------------</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:29</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  是否为浮点型</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param string floatNumber</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 为浮点型返回YES，否则返回NO</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)isPureFloat:(NSString*)floatNumber&#123;</span><br><span class=\"line\">    NSScanner* scan = [NSScanner scannerWithString:floatNumber];</span><br><span class=\"line\">    float val;</span><br><span class=\"line\">    return[scan scanFloat:&amp;val] &amp;&amp; [scan isAtEnd];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:48</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  是否为整型</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param string intNumber</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL 是返回YES，否则返回NO</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)isPureInt:(NSString*)intNumber&#123;</span><br><span class=\"line\">    NSScanner* scan = [NSScanner scannerWithString:intNumber];</span><br><span class=\"line\">    int val;</span><br><span class=\"line\">    return[scan scanInt:&amp;val] &amp;&amp; [scan isAtEnd];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 17:08:57</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  两位小数输入限制（必须与UITextFieldDelegate Change代理同用）</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param String xiaoshuStr 输入的数字</span><br><span class=\"line\"> *  @param String string 变化串</span><br><span class=\"line\"> *  @param NSRange  rang    输入的变化</span><br><span class=\"line\"> *  @param weishu</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">+(BOOL)inputXiaoshuValidate:(NSString *)xiaoshuStr stringConfig:(NSString *)string shouldChangeCharactersInRange:(NSRange)range weishuConfig:(NSInteger)weishu&#123;</span><br><span class=\"line\">    BOOL isHaveDian = YES;</span><br><span class=\"line\">    if ([xiaoshuStr rangeOfString:@&quot;.&quot;].location == NSNotFound) &#123;</span><br><span class=\"line\">        isHaveDian = NO;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if ([string length] &gt; 0) &#123;</span><br><span class=\"line\">        unichar single = [string characterAtIndex:0];//当前输入的字符</span><br><span class=\"line\">        if ((single &gt;= &apos;0&apos; &amp;&amp; single &lt;= &apos;9&apos;) || single == &apos;.&apos;) &#123;//数据格式正确</span><br><span class=\"line\">            </span><br><span class=\"line\">            //首字母不能为0和小数点</span><br><span class=\"line\">            if([xiaoshuStr length] == 0)&#123;</span><br><span class=\"line\">                if(single == &apos;.&apos;) &#123;</span><br><span class=\"line\">                    //                        [self showText:@&quot;亲，第一个数字不能为小数点&quot;];</span><br><span class=\"line\">                    [xiaoshuStr stringByReplacingCharactersInRange:range withString:@&quot;&quot;];</span><br><span class=\"line\">                    return NO;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                // if (single == &apos;0&apos;) &#123;</span><br><span class=\"line\">                //                        [self showText:@&quot;亲，第一个数字不能为0&quot;];</span><br><span class=\"line\">                //      [xiaoshuStr stringByReplacingCharactersInRange:range withString:@&quot;&quot;];</span><br><span class=\"line\">                //    return NO;</span><br><span class=\"line\">                //&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            //输入的字符是否是小数点</span><br><span class=\"line\">            if (single == &apos;.&apos;) &#123;</span><br><span class=\"line\">                if(!isHaveDian)//text中还没有小数点</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    isHaveDian = YES;</span><br><span class=\"line\">                    return YES;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">                    //                        [self showText:@&quot;亲，您已经输入过小数点了&quot;];</span><br><span class=\"line\">                    [xiaoshuStr stringByReplacingCharactersInRange:range withString:@&quot;&quot;];</span><br><span class=\"line\">                    return NO;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                if (isHaveDian) &#123;//存在小数点</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    //判断小数点的位数</span><br><span class=\"line\">                    NSRange ran = [xiaoshuStr rangeOfString:@&quot;.&quot;];</span><br><span class=\"line\">                    if (range.location - ran.location &lt;= weishu) &#123;</span><br><span class=\"line\">                        return YES;</span><br><span class=\"line\">                    &#125;else&#123;</span><br><span class=\"line\">                        //                            [self showText:@&quot;亲，您最多输入两位小数&quot;];</span><br><span class=\"line\">                        return NO;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">                    return YES;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;else&#123;//输入的数据格式不正确</span><br><span class=\"line\">            //                [self showText:@&quot;亲，您输入的格式不正确&quot;];</span><br><span class=\"line\">            [xiaoshuStr stringByReplacingCharactersInRange:range withString:@&quot;&quot;];</span><br><span class=\"line\">            return NO;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return YES;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:49</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  针对输入金额的格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param NSString moneyStr</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)inputMoneyFormat:(NSString*)moneyStr&#123;</span><br><span class=\"line\">    BOOL res = YES;</span><br><span class=\"line\">    NSCharacterSet* tmpSet = [NSCharacterSet characterSetWithCharactersInString:@&quot;0123456789.&quot;];</span><br><span class=\"line\">    int i = 0;</span><br><span class=\"line\">    while (i &lt; moneyStr.length) &#123;</span><br><span class=\"line\">        NSString * string = [moneyStr substringWithRange:NSMakeRange(i, 1)];</span><br><span class=\"line\">        NSRange range = [string rangeOfCharacterFromSet:tmpSet];</span><br><span class=\"line\">        if (range.length == 0) &#123;</span><br><span class=\"line\">            res = NO;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark -------------------------密码检查----------------------------------------</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:13</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  常规密码检查（6到20位大小数字）</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param BOOL passWordStr</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)passwordNormalisRight:(NSString *)passWordStr&#123;</span><br><span class=\"line\">    NSString *passWordRegex = @&quot;^[a-zA-Z0-9]&#123;6,20&#125;+$&quot;;</span><br><span class=\"line\">    NSPredicate *passWordPredicate = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;,passWordRegex];</span><br><span class=\"line\">    return [passWordPredicate evaluateWithObject:passWordStr];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:20</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  密码输入格式检查 ^[a-zA-Z0-9|,|.|_|!|?]&quot;</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param String passwordInputStr</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)inputPasswordisRight:(NSString*)passwordInputStr&#123;</span><br><span class=\"line\">    BOOL res = YES;</span><br><span class=\"line\">    NSString *passWordRegex = @&quot;^[a-zA-Z0-9|,|.|_|!|?]&quot;;</span><br><span class=\"line\">    int i = 0;</span><br><span class=\"line\">    while (i &lt; passwordInputStr.length) &#123;</span><br><span class=\"line\">        NSString * stringsub = [passwordInputStr substringWithRange:NSMakeRange(i, 1)];</span><br><span class=\"line\">        NSPredicate *passWordPredicate = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;,passWordRegex];</span><br><span class=\"line\">        if (![passWordPredicate evaluateWithObject:stringsub]) &#123;</span><br><span class=\"line\">            res = NO;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark -------------------------自定义格式检查----------------------------------------</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:13</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  自定义符串类型检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param String passWordStr</span><br><span class=\"line\"> *  @param String regix 匹配符</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)stringFormatisRight:(NSString *)string withRegix:(NSString *)regix&#123;</span><br><span class=\"line\">    NSString *RegixFormat = regix;</span><br><span class=\"line\">    NSPredicate *passWordPredicate = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;,RegixFormat];</span><br><span class=\"line\">    return [passWordPredicate evaluateWithObject:string];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:21</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  自定义输入格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param String inputString</span><br><span class=\"line\"> *  @param String regix 匹配符</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL) inputStringFormatRight:(NSString *)inputString withRegix:(NSString *)regix&#123;</span><br><span class=\"line\">    BOOL res = YES;</span><br><span class=\"line\">    int i = 0;</span><br><span class=\"line\">    while (i &lt; inputString.length) &#123;</span><br><span class=\"line\">        NSString * stringsub = [inputString substringWithRange:NSMakeRange(i, 1)];</span><br><span class=\"line\">        NSPredicate *passWordPredicate = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;,regix];</span><br><span class=\"line\">        if (![passWordPredicate evaluateWithObject:stringsub]) &#123;</span><br><span class=\"line\">            res = NO;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark -------------------------其它格式检查----------------------------------------</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 17:08:41</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  身份证号码格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param identityCard 身份证号串</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)checkIDCard:(NSString *)value &#123;</span><br><span class=\"line\">    value = [value stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];</span><br><span class=\"line\">    NSInteger length =0;</span><br><span class=\"line\">    if (!value) &#123;</span><br><span class=\"line\">        return NO;</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        length = [value length];</span><br><span class=\"line\">        if (length !=15 &amp;&amp; length !=18) &#123;</span><br><span class=\"line\">            return NO;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 省份代码</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    NSArray *areasArray =@[@&quot;11&quot;,@&quot;12&quot;, @&quot;13&quot;,@&quot;14&quot;, @&quot;15&quot;,@&quot;21&quot;, @&quot;22&quot;,@&quot;23&quot;, @&quot;31&quot;,@&quot;32&quot;, @&quot;33&quot;,@&quot;34&quot;, @&quot;35&quot;,@&quot;36&quot;, @&quot;37&quot;,@&quot;41&quot;,@&quot;42&quot;,@&quot;43&quot;, @&quot;44&quot;,@&quot;45&quot;, @&quot;46&quot;,@&quot;50&quot;, @&quot;51&quot;,@&quot;52&quot;, @&quot;53&quot;,@&quot;54&quot;, @&quot;61&quot;,@&quot;62&quot;, @&quot;63&quot;,@&quot;64&quot;, @&quot;65&quot;,@&quot;71&quot;, @&quot;81&quot;,@&quot;82&quot;, @&quot;91&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSString *valueStart2 = [value substringToIndex:2];</span><br><span class=\"line\">    BOOL areaFlag =NO;</span><br><span class=\"line\">    for (NSString *areaCode in areasArray) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        if ([areaCode isEqualToString:valueStart2]) &#123;</span><br><span class=\"line\">            areaFlag =YES;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (!areaFlag) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSRegularExpression *regularExpression;</span><br><span class=\"line\">    NSUInteger numberofMatch;</span><br><span class=\"line\">    int year =0;</span><br><span class=\"line\">    switch (length) &#123;</span><br><span class=\"line\">        case 15:</span><br><span class=\"line\">            year = [value substringWithRange:NSMakeRange(6,2)].intValue +1900;</span><br><span class=\"line\">            if (year %4 ==0 || (year %100 ==0 &amp;&amp; year %4 ==0)) &#123;</span><br><span class=\"line\">                regularExpression = [[NSRegularExpression alloc]initWithPattern:@&quot;^[1-9][0-9]&#123;5&#125;[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]&#123;3&#125;$&quot;</span><br><span class=\"line\">                                                                        options:NSRegularExpressionCaseInsensitive</span><br><span class=\"line\">                                                                          error:nil];//测试出生日期的合法性</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">                regularExpression = [[NSRegularExpression alloc]initWithPattern:@&quot;^[1-9][0-9]&#123;5&#125;[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]&#123;3&#125;$&quot;</span><br><span class=\"line\">                                                                        options:NSRegularExpressionCaseInsensitive</span><br><span class=\"line\">                                                                          error:nil];//测试出生日期的合法性</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            numberofMatch = [regularExpression numberOfMatchesInString:value</span><br><span class=\"line\">                                                               options:NSMatchingReportProgress</span><br><span class=\"line\">                                                                 range:NSMakeRange(0, value.length)];</span><br><span class=\"line\">            if(numberofMatch &gt;0) &#123;</span><br><span class=\"line\">                return YES;</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">                return NO;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        case 18:</span><br><span class=\"line\">            year = [value substringWithRange:NSMakeRange(6,4)].intValue;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (year %4 ==0 || (year %100 ==0 &amp;&amp; year %4 ==0)) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                regularExpression = [[NSRegularExpression alloc]initWithPattern:@&quot;^[1-9][0-9]&#123;5&#125;19[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]&#123;3&#125;[0-9Xx]$&quot;</span><br><span class=\"line\">                                     </span><br><span class=\"line\">                                                                        options:NSRegularExpressionCaseInsensitive</span><br><span class=\"line\">                                     </span><br><span class=\"line\">                                     </span><br><span class=\"line\">                                     </span><br><span class=\"line\">                                                                          error:nil];//测试出生日期的合法性</span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                regularExpression = [[NSRegularExpression alloc]initWithPattern:@&quot;^[1-9][0-9]&#123;5&#125;19[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]&#123;3&#125;[0-9Xx]$&quot;</span><br><span class=\"line\">                                     </span><br><span class=\"line\">                                     </span><br><span class=\"line\">                                     </span><br><span class=\"line\">                                                                        options:NSRegularExpressionCaseInsensitive</span><br><span class=\"line\">                                     </span><br><span class=\"line\">                                     </span><br><span class=\"line\">                                     </span><br><span class=\"line\">                                                                          error:nil];//测试出生日期的合法性</span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">            numberofMatch = [regularExpression numberOfMatchesInString:value</span><br><span class=\"line\">                             </span><br><span class=\"line\">                             </span><br><span class=\"line\">                             </span><br><span class=\"line\">                                                               options:NSMatchingReportProgress</span><br><span class=\"line\">                             </span><br><span class=\"line\">                             </span><br><span class=\"line\">                             </span><br><span class=\"line\">                                                                 range:NSMakeRange(0, value.length)];</span><br><span class=\"line\">            </span><br><span class=\"line\">            if(numberofMatch &gt;0) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                int S = ([value substringWithRange:NSMakeRange(0,1)].intValue + [value substringWithRange:NSMakeRange(10,1)].intValue) *7 + ([value substringWithRange:NSMakeRange(1,1)].intValue + [value substringWithRange:NSMakeRange(11,1)].intValue) *9 + ([value substringWithRange:NSMakeRange(2,1)].intValue + [value substringWithRange:NSMakeRange(12,1)].intValue) *10 + ([value substringWithRange:NSMakeRange(3,1)].intValue + [value substringWithRange:NSMakeRange(13,1)].intValue) *5 + ([value substringWithRange:NSMakeRange(4,1)].intValue + [value substringWithRange:NSMakeRange(14,1)].intValue) *8 + ([value substringWithRange:NSMakeRange(5,1)].intValue + [value substringWithRange:NSMakeRange(15,1)].intValue) *4 + ([value substringWithRange:NSMakeRange(6,1)].intValue + [value substringWithRange:NSMakeRange(16,1)].intValue) *2 + [value substringWithRange:NSMakeRange(7,1)].intValue *1 + [value substringWithRange:NSMakeRange(8,1)].intValue *6 + [value substringWithRange:NSMakeRange(9,1)].intValue *3;</span><br><span class=\"line\"></span><br><span class=\"line\">                int Y = S %11;</span><br><span class=\"line\"></span><br><span class=\"line\">                NSString *M =@&quot;F&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">                NSString *JYM =@&quot;10X98765432&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">                M = [JYM substringWithRange:NSMakeRange(Y,1)];// 判断校验位</span><br><span class=\"line\"></span><br><span class=\"line\">                if ([M isEqualToString:[value substringWithRange:NSMakeRange(17,1)]]) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    return YES;// 检测ID的校验位</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#125;else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    return NO;</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                return NO;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        default:</span><br><span class=\"line\"></span><br><span class=\"line\">            return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @brief 邮箱格式检查</span><br><span class=\"line\"> *  @param String mailStr</span><br><span class=\"line\"> *  </span><br><span class=\"line\"> *  return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">+(BOOL)mailValidateIsRight:(NSString *)mailStr&#123;</span><br><span class=\"line\">    NSString *emailRegex = @&quot;[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]&#123;2,4&#125;&quot;;</span><br><span class=\"line\">    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, emailRegex];</span><br><span class=\"line\">    return [emailTest evaluateWithObject:mailStr];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(NSString *)DateWidthFormat:(NSString *)formatStr dateConfig:(NSDate *)date&#123;</span><br><span class=\"line\">    NSDateFormatter *format = [[NSDateFormatter alloc]init];</span><br><span class=\"line\">    [format setDateFormat:formatStr];</span><br><span class=\"line\">    return [format stringFromDate:date];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">+(NSString *)DateWidthFormat:(NSString *)formatStr timeInterValeConfig:(double)timeTamp&#123;</span><br><span class=\"line\">    NSDate *date = [NSDate dateWithTimeIntervalSince1970:timeTamp];</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSDateFormatter *format = [[NSDateFormatter alloc]init];</span><br><span class=\"line\">    [format setDateFormat:formatStr];</span><br><span class=\"line\">    return [format stringFromDate:date];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(NSString *)DateStrFromDate:(NSDate *)date&#123;</span><br><span class=\"line\">    NSTimeInterval interval = [date timeIntervalSince1970] * 1000;</span><br><span class=\"line\">    NSString *timeTramp = [NSString stringWithFormat:@&quot;%ld&quot;,(long)interval];</span><br><span class=\"line\">    return timeTramp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"tags\"><a href=\"#tags\" class=\"headerlink\" title=\"tags:\"></a>tags:</h2><p>要点：</p>\n<ol>\n<li>在textField或者TextView进行输入时一般会进行输入时检查</li>\n<li>点击提交的时候会进行手机号之类的格式验证</li>\n<li>邮箱身份证验证</li>\n<li>数据类型判断</li>\n<li>小数判断</li>\n<li>时间格式转换</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  FormatAssistant.h</span><br><span class=\"line\">//  HexiShop</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by Smith Cool on 16/8/18.</span><br><span class=\"line\">//  Copyright © 2016年 Xiaohr. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface FormatAssistant : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">//输入检查input开头</span><br><span class=\"line\">//类型检查is开头</span><br><span class=\"line\">#pragma mark ---------------------手机号phone--------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:42</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  针对手机号码输入的格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param BOOL number 逐步输入手机号</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 正确返回yes，错误返回NO</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)inputValidatePhoneNumber:(NSString*)number;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:40</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  手机号码是否合法格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param BOOL phoneNumber</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 不合法返回YES，合法返回NO</span><br><span class=\"line\"> */</span><br><span class=\"line\">+(BOOL)phoneNumberisWrong:(NSString *)phoneNumber;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @brief 手机空格格式检查并返回值</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param phoneNumber 手机号</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 是：有错</span><br><span class=\"line\"> */</span><br><span class=\"line\">+(BOOL)phoneNumberisWrongWithAll:(NSString *)phoneNumber;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:33</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  针对座机号码输入的格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param NSString zjNumber</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)inputZuoJiNumberisWrong:(NSString*)zjNumber;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark -------------------------类型检查----------------------------------------</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:29</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  是否为浮点型</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param string floatNumber</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 为浮点型返回YES，否则返回NO</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)isPureFloat:(NSString*)floatNumber;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:48</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  是否为整型</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param string intNumber</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL 是返回YES，否则返回NO</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)isPureInt:(NSString*)intNumber;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 17:08:57</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  两位小数输入限制（必须与UITextFieldDelegate Change代理同用）</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param String xiaoshuStr 输入的数字</span><br><span class=\"line\"> *  @param NSRange  rang    输入的变化</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+(BOOL)inputXiaoshuValidate:(NSString *)xiaoshuStr stringConfig:(NSString *)string shouldChangeCharactersInRange:(NSRange)range weishuConfig:(NSInteger)weishu;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:49</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  针对输入金额的格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param NSString moneyStr</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)inputMoneyFormat:(NSString*)moneyStr;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark -------------------------密码检查password----------------------------------------</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:13</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  常规密码检查（6到20位大小数字）</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param BOOL passWordStr</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)passwordNormalisRight:(NSString *)passWordStr;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:20</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  密码输入格式检查 ^[a-zA-Z0-9|,|.|_|!|?]</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param String passwordInputStr</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)inputPasswordisRight:(NSString*)passwordInputStr;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark -------------------------自定义格式检查----------------------------------------</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:13</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  自定义符串类型检查 店铺名称检查（^[_|A-Za-z0-9\\u4E00-\\u9FA5_-]+$&quot;）</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param String passWordStr</span><br><span class=\"line\"> *  @param String regix 匹配符</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)stringFormatisRight:(NSString *)string withRegix:(NSString *)regix;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:21</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  自定义输入格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param String inputString</span><br><span class=\"line\"> *  @param String regix 匹配符</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL) inputStringFormatRight:(NSString *)inputString withRegix:(NSString *)regix;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark -------------------------其它格式检查----------------------------------------</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 17:08:41</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  身份证号码格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param identityCard 身份证号串</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+(BOOL)IDcardFormateCheck:(NSString *)identityCard;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @brief 邮箱格式检查</span><br><span class=\"line\"> *  @param String mailStr</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">+(BOOL)mailValidateIsRight:(NSString *)mailStr;</span><br><span class=\"line\"></span><br><span class=\"line\">+(NSString *)DateWidthFormat:(NSString *)formatStr dateConfig:(NSDate *)date;</span><br><span class=\"line\">+(NSString *)DateWidthFormat:(NSString *)formatStr timeInterValeConfig:(double)timeTamp;</span><br><span class=\"line\">-(NSString *)DateStrFromDate:(NSDate *)date;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  FormatAssistant.m</span><br><span class=\"line\">//  HexiShop</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by Smith Cool on 16/8/18.</span><br><span class=\"line\">//  Copyright © 2016年 Xiaohr. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;FormatAssistant.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation FormatAssistant</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:42</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  针对手机号码输入的格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param BOOL number 逐步输入手机号</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 正确返回yes，错误返回NO</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)inputValidatePhoneNumber:(NSString*)number&#123;</span><br><span class=\"line\">    BOOL res = YES;</span><br><span class=\"line\">    NSCharacterSet* tmpSet = [NSCharacterSet characterSetWithCharactersInString:@&quot;0123456789&quot;];</span><br><span class=\"line\">    int i = 0;</span><br><span class=\"line\">    while (i &lt; number.length) &#123;</span><br><span class=\"line\">        NSString * string = [number substringWithRange:NSMakeRange(i, 1)];</span><br><span class=\"line\">        NSRange range = [string rangeOfCharacterFromSet:tmpSet];</span><br><span class=\"line\">        if (range.length == 0) &#123;</span><br><span class=\"line\">            res = NO;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:40</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  手机号码是否合法格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param BOOL phoneNumber</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 不合法返回YES，合法返回NO</span><br><span class=\"line\"> */</span><br><span class=\"line\">+(BOOL)phoneNumberisWrong:(NSString *)phoneNumber&#123;</span><br><span class=\"line\">    NSString *phoneNo = strTrimming(phoneNumber);</span><br><span class=\"line\">    NSString *regex = @&quot;1[3|4|5|7|8|][0-9]&#123;9&#125;&quot;;</span><br><span class=\"line\">    NSPredicate *predicate = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, regex];</span><br><span class=\"line\">    if (![predicate evaluateWithObject:phoneNo]) &#123;</span><br><span class=\"line\">        return YES;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return NO;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @brief 手机空格格式检查并返回值</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param phoneNumber 手机号</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 是：有错</span><br><span class=\"line\"> */</span><br><span class=\"line\">+(BOOL)phoneNumberisWrongWithAll:(NSString *)phoneNumber&#123;</span><br><span class=\"line\">    if (![phoneNumber hasValue]) &#123;</span><br><span class=\"line\">        [UserHelp showMessage:@&quot;手机号不能为空&quot;];</span><br><span class=\"line\">        return YES;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        if([FormatAssistant phoneNumberisWrong:phoneNumber])&#123;</span><br><span class=\"line\">            [UserHelp showMessage:@&quot;手机号格式不正确&quot;];</span><br><span class=\"line\">            return YES;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            return NO;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:33</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  针对座机号码输入的格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param NSString zjNumber</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)inputZuoJiNumberisWrong:(NSString*)zjNumber&#123;</span><br><span class=\"line\">    BOOL res = YES;</span><br><span class=\"line\">    NSCharacterSet* tmpSet = [NSCharacterSet characterSetWithCharactersInString:@&quot;0123456789-&quot;];</span><br><span class=\"line\">    int i = 0;</span><br><span class=\"line\">    while (i &lt; zjNumber.length) &#123;</span><br><span class=\"line\">        NSString * string = [zjNumber substringWithRange:NSMakeRange(i, 1)];</span><br><span class=\"line\">        NSRange range = [string rangeOfCharacterFromSet:tmpSet];</span><br><span class=\"line\">        if (range.length == 0) &#123;</span><br><span class=\"line\">            res = NO;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark -------------------------类型检查----------------------------------------</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:29</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  是否为浮点型</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param string floatNumber</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 为浮点型返回YES，否则返回NO</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)isPureFloat:(NSString*)floatNumber&#123;</span><br><span class=\"line\">    NSScanner* scan = [NSScanner scannerWithString:floatNumber];</span><br><span class=\"line\">    float val;</span><br><span class=\"line\">    return[scan scanFloat:&amp;val] &amp;&amp; [scan isAtEnd];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:48</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  是否为整型</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param string intNumber</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL 是返回YES，否则返回NO</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)isPureInt:(NSString*)intNumber&#123;</span><br><span class=\"line\">    NSScanner* scan = [NSScanner scannerWithString:intNumber];</span><br><span class=\"line\">    int val;</span><br><span class=\"line\">    return[scan scanInt:&amp;val] &amp;&amp; [scan isAtEnd];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 17:08:57</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  两位小数输入限制（必须与UITextFieldDelegate Change代理同用）</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param String xiaoshuStr 输入的数字</span><br><span class=\"line\"> *  @param String string 变化串</span><br><span class=\"line\"> *  @param NSRange  rang    输入的变化</span><br><span class=\"line\"> *  @param weishu</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">+(BOOL)inputXiaoshuValidate:(NSString *)xiaoshuStr stringConfig:(NSString *)string shouldChangeCharactersInRange:(NSRange)range weishuConfig:(NSInteger)weishu&#123;</span><br><span class=\"line\">    BOOL isHaveDian = YES;</span><br><span class=\"line\">    if ([xiaoshuStr rangeOfString:@&quot;.&quot;].location == NSNotFound) &#123;</span><br><span class=\"line\">        isHaveDian = NO;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if ([string length] &gt; 0) &#123;</span><br><span class=\"line\">        unichar single = [string characterAtIndex:0];//当前输入的字符</span><br><span class=\"line\">        if ((single &gt;= &apos;0&apos; &amp;&amp; single &lt;= &apos;9&apos;) || single == &apos;.&apos;) &#123;//数据格式正确</span><br><span class=\"line\">            </span><br><span class=\"line\">            //首字母不能为0和小数点</span><br><span class=\"line\">            if([xiaoshuStr length] == 0)&#123;</span><br><span class=\"line\">                if(single == &apos;.&apos;) &#123;</span><br><span class=\"line\">                    //                        [self showText:@&quot;亲，第一个数字不能为小数点&quot;];</span><br><span class=\"line\">                    [xiaoshuStr stringByReplacingCharactersInRange:range withString:@&quot;&quot;];</span><br><span class=\"line\">                    return NO;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                // if (single == &apos;0&apos;) &#123;</span><br><span class=\"line\">                //                        [self showText:@&quot;亲，第一个数字不能为0&quot;];</span><br><span class=\"line\">                //      [xiaoshuStr stringByReplacingCharactersInRange:range withString:@&quot;&quot;];</span><br><span class=\"line\">                //    return NO;</span><br><span class=\"line\">                //&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            //输入的字符是否是小数点</span><br><span class=\"line\">            if (single == &apos;.&apos;) &#123;</span><br><span class=\"line\">                if(!isHaveDian)//text中还没有小数点</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    isHaveDian = YES;</span><br><span class=\"line\">                    return YES;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">                    //                        [self showText:@&quot;亲，您已经输入过小数点了&quot;];</span><br><span class=\"line\">                    [xiaoshuStr stringByReplacingCharactersInRange:range withString:@&quot;&quot;];</span><br><span class=\"line\">                    return NO;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                if (isHaveDian) &#123;//存在小数点</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    //判断小数点的位数</span><br><span class=\"line\">                    NSRange ran = [xiaoshuStr rangeOfString:@&quot;.&quot;];</span><br><span class=\"line\">                    if (range.location - ran.location &lt;= weishu) &#123;</span><br><span class=\"line\">                        return YES;</span><br><span class=\"line\">                    &#125;else&#123;</span><br><span class=\"line\">                        //                            [self showText:@&quot;亲，您最多输入两位小数&quot;];</span><br><span class=\"line\">                        return NO;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">                    return YES;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;else&#123;//输入的数据格式不正确</span><br><span class=\"line\">            //                [self showText:@&quot;亲，您输入的格式不正确&quot;];</span><br><span class=\"line\">            [xiaoshuStr stringByReplacingCharactersInRange:range withString:@&quot;&quot;];</span><br><span class=\"line\">            return NO;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return YES;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:49</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  针对输入金额的格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param NSString moneyStr</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)inputMoneyFormat:(NSString*)moneyStr&#123;</span><br><span class=\"line\">    BOOL res = YES;</span><br><span class=\"line\">    NSCharacterSet* tmpSet = [NSCharacterSet characterSetWithCharactersInString:@&quot;0123456789.&quot;];</span><br><span class=\"line\">    int i = 0;</span><br><span class=\"line\">    while (i &lt; moneyStr.length) &#123;</span><br><span class=\"line\">        NSString * string = [moneyStr substringWithRange:NSMakeRange(i, 1)];</span><br><span class=\"line\">        NSRange range = [string rangeOfCharacterFromSet:tmpSet];</span><br><span class=\"line\">        if (range.length == 0) &#123;</span><br><span class=\"line\">            res = NO;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark -------------------------密码检查----------------------------------------</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:13</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  常规密码检查（6到20位大小数字）</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param BOOL passWordStr</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)passwordNormalisRight:(NSString *)passWordStr&#123;</span><br><span class=\"line\">    NSString *passWordRegex = @&quot;^[a-zA-Z0-9]&#123;6,20&#125;+$&quot;;</span><br><span class=\"line\">    NSPredicate *passWordPredicate = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;,passWordRegex];</span><br><span class=\"line\">    return [passWordPredicate evaluateWithObject:passWordStr];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:20</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  密码输入格式检查 ^[a-zA-Z0-9|,|.|_|!|?]&quot;</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param String passwordInputStr</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)inputPasswordisRight:(NSString*)passwordInputStr&#123;</span><br><span class=\"line\">    BOOL res = YES;</span><br><span class=\"line\">    NSString *passWordRegex = @&quot;^[a-zA-Z0-9|,|.|_|!|?]&quot;;</span><br><span class=\"line\">    int i = 0;</span><br><span class=\"line\">    while (i &lt; passwordInputStr.length) &#123;</span><br><span class=\"line\">        NSString * stringsub = [passwordInputStr substringWithRange:NSMakeRange(i, 1)];</span><br><span class=\"line\">        NSPredicate *passWordPredicate = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;,passWordRegex];</span><br><span class=\"line\">        if (![passWordPredicate evaluateWithObject:stringsub]) &#123;</span><br><span class=\"line\">            res = NO;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark -------------------------自定义格式检查----------------------------------------</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:13</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  自定义符串类型检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param String passWordStr</span><br><span class=\"line\"> *  @param String regix 匹配符</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)stringFormatisRight:(NSString *)string withRegix:(NSString *)regix&#123;</span><br><span class=\"line\">    NSString *RegixFormat = regix;</span><br><span class=\"line\">    NSPredicate *passWordPredicate = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;,RegixFormat];</span><br><span class=\"line\">    return [passWordPredicate evaluateWithObject:string];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 16:08:21</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  自定义输入格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param String inputString</span><br><span class=\"line\"> *  @param String regix 匹配符</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL) inputStringFormatRight:(NSString *)inputString withRegix:(NSString *)regix&#123;</span><br><span class=\"line\">    BOOL res = YES;</span><br><span class=\"line\">    int i = 0;</span><br><span class=\"line\">    while (i &lt; inputString.length) &#123;</span><br><span class=\"line\">        NSString * stringsub = [inputString substringWithRange:NSMakeRange(i, 1)];</span><br><span class=\"line\">        NSPredicate *passWordPredicate = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;,regix];</span><br><span class=\"line\">        if (![passWordPredicate evaluateWithObject:stringsub]) &#123;</span><br><span class=\"line\">            res = NO;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark -------------------------其它格式检查----------------------------------------</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @author Xiao  Huarong, 16-08-18 17:08:41</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  身份证号码格式检查</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param identityCard 身份证号串</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)checkIDCard:(NSString *)value &#123;</span><br><span class=\"line\">    value = [value stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];</span><br><span class=\"line\">    NSInteger length =0;</span><br><span class=\"line\">    if (!value) &#123;</span><br><span class=\"line\">        return NO;</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        length = [value length];</span><br><span class=\"line\">        if (length !=15 &amp;&amp; length !=18) &#123;</span><br><span class=\"line\">            return NO;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 省份代码</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    NSArray *areasArray =@[@&quot;11&quot;,@&quot;12&quot;, @&quot;13&quot;,@&quot;14&quot;, @&quot;15&quot;,@&quot;21&quot;, @&quot;22&quot;,@&quot;23&quot;, @&quot;31&quot;,@&quot;32&quot;, @&quot;33&quot;,@&quot;34&quot;, @&quot;35&quot;,@&quot;36&quot;, @&quot;37&quot;,@&quot;41&quot;,@&quot;42&quot;,@&quot;43&quot;, @&quot;44&quot;,@&quot;45&quot;, @&quot;46&quot;,@&quot;50&quot;, @&quot;51&quot;,@&quot;52&quot;, @&quot;53&quot;,@&quot;54&quot;, @&quot;61&quot;,@&quot;62&quot;, @&quot;63&quot;,@&quot;64&quot;, @&quot;65&quot;,@&quot;71&quot;, @&quot;81&quot;,@&quot;82&quot;, @&quot;91&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSString *valueStart2 = [value substringToIndex:2];</span><br><span class=\"line\">    BOOL areaFlag =NO;</span><br><span class=\"line\">    for (NSString *areaCode in areasArray) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        if ([areaCode isEqualToString:valueStart2]) &#123;</span><br><span class=\"line\">            areaFlag =YES;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (!areaFlag) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSRegularExpression *regularExpression;</span><br><span class=\"line\">    NSUInteger numberofMatch;</span><br><span class=\"line\">    int year =0;</span><br><span class=\"line\">    switch (length) &#123;</span><br><span class=\"line\">        case 15:</span><br><span class=\"line\">            year = [value substringWithRange:NSMakeRange(6,2)].intValue +1900;</span><br><span class=\"line\">            if (year %4 ==0 || (year %100 ==0 &amp;&amp; year %4 ==0)) &#123;</span><br><span class=\"line\">                regularExpression = [[NSRegularExpression alloc]initWithPattern:@&quot;^[1-9][0-9]&#123;5&#125;[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]&#123;3&#125;$&quot;</span><br><span class=\"line\">                                                                        options:NSRegularExpressionCaseInsensitive</span><br><span class=\"line\">                                                                          error:nil];//测试出生日期的合法性</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">                regularExpression = [[NSRegularExpression alloc]initWithPattern:@&quot;^[1-9][0-9]&#123;5&#125;[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]&#123;3&#125;$&quot;</span><br><span class=\"line\">                                                                        options:NSRegularExpressionCaseInsensitive</span><br><span class=\"line\">                                                                          error:nil];//测试出生日期的合法性</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            numberofMatch = [regularExpression numberOfMatchesInString:value</span><br><span class=\"line\">                                                               options:NSMatchingReportProgress</span><br><span class=\"line\">                                                                 range:NSMakeRange(0, value.length)];</span><br><span class=\"line\">            if(numberofMatch &gt;0) &#123;</span><br><span class=\"line\">                return YES;</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">                return NO;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        case 18:</span><br><span class=\"line\">            year = [value substringWithRange:NSMakeRange(6,4)].intValue;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (year %4 ==0 || (year %100 ==0 &amp;&amp; year %4 ==0)) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                regularExpression = [[NSRegularExpression alloc]initWithPattern:@&quot;^[1-9][0-9]&#123;5&#125;19[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]&#123;3&#125;[0-9Xx]$&quot;</span><br><span class=\"line\">                                     </span><br><span class=\"line\">                                                                        options:NSRegularExpressionCaseInsensitive</span><br><span class=\"line\">                                     </span><br><span class=\"line\">                                     </span><br><span class=\"line\">                                     </span><br><span class=\"line\">                                                                          error:nil];//测试出生日期的合法性</span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                regularExpression = [[NSRegularExpression alloc]initWithPattern:@&quot;^[1-9][0-9]&#123;5&#125;19[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]&#123;3&#125;[0-9Xx]$&quot;</span><br><span class=\"line\">                                     </span><br><span class=\"line\">                                     </span><br><span class=\"line\">                                     </span><br><span class=\"line\">                                                                        options:NSRegularExpressionCaseInsensitive</span><br><span class=\"line\">                                     </span><br><span class=\"line\">                                     </span><br><span class=\"line\">                                     </span><br><span class=\"line\">                                                                          error:nil];//测试出生日期的合法性</span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">            numberofMatch = [regularExpression numberOfMatchesInString:value</span><br><span class=\"line\">                             </span><br><span class=\"line\">                             </span><br><span class=\"line\">                             </span><br><span class=\"line\">                                                               options:NSMatchingReportProgress</span><br><span class=\"line\">                             </span><br><span class=\"line\">                             </span><br><span class=\"line\">                             </span><br><span class=\"line\">                                                                 range:NSMakeRange(0, value.length)];</span><br><span class=\"line\">            </span><br><span class=\"line\">            if(numberofMatch &gt;0) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                int S = ([value substringWithRange:NSMakeRange(0,1)].intValue + [value substringWithRange:NSMakeRange(10,1)].intValue) *7 + ([value substringWithRange:NSMakeRange(1,1)].intValue + [value substringWithRange:NSMakeRange(11,1)].intValue) *9 + ([value substringWithRange:NSMakeRange(2,1)].intValue + [value substringWithRange:NSMakeRange(12,1)].intValue) *10 + ([value substringWithRange:NSMakeRange(3,1)].intValue + [value substringWithRange:NSMakeRange(13,1)].intValue) *5 + ([value substringWithRange:NSMakeRange(4,1)].intValue + [value substringWithRange:NSMakeRange(14,1)].intValue) *8 + ([value substringWithRange:NSMakeRange(5,1)].intValue + [value substringWithRange:NSMakeRange(15,1)].intValue) *4 + ([value substringWithRange:NSMakeRange(6,1)].intValue + [value substringWithRange:NSMakeRange(16,1)].intValue) *2 + [value substringWithRange:NSMakeRange(7,1)].intValue *1 + [value substringWithRange:NSMakeRange(8,1)].intValue *6 + [value substringWithRange:NSMakeRange(9,1)].intValue *3;</span><br><span class=\"line\"></span><br><span class=\"line\">                int Y = S %11;</span><br><span class=\"line\"></span><br><span class=\"line\">                NSString *M =@&quot;F&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">                NSString *JYM =@&quot;10X98765432&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">                M = [JYM substringWithRange:NSMakeRange(Y,1)];// 判断校验位</span><br><span class=\"line\"></span><br><span class=\"line\">                if ([M isEqualToString:[value substringWithRange:NSMakeRange(17,1)]]) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    return YES;// 检测ID的校验位</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#125;else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    return NO;</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                return NO;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        default:</span><br><span class=\"line\"></span><br><span class=\"line\">            return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  @brief 邮箱格式检查</span><br><span class=\"line\"> *  @param String mailStr</span><br><span class=\"line\"> *  </span><br><span class=\"line\"> *  return BOOL</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">+(BOOL)mailValidateIsRight:(NSString *)mailStr&#123;</span><br><span class=\"line\">    NSString *emailRegex = @&quot;[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]&#123;2,4&#125;&quot;;</span><br><span class=\"line\">    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, emailRegex];</span><br><span class=\"line\">    return [emailTest evaluateWithObject:mailStr];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(NSString *)DateWidthFormat:(NSString *)formatStr dateConfig:(NSDate *)date&#123;</span><br><span class=\"line\">    NSDateFormatter *format = [[NSDateFormatter alloc]init];</span><br><span class=\"line\">    [format setDateFormat:formatStr];</span><br><span class=\"line\">    return [format stringFromDate:date];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">+(NSString *)DateWidthFormat:(NSString *)formatStr timeInterValeConfig:(double)timeTamp&#123;</span><br><span class=\"line\">    NSDate *date = [NSDate dateWithTimeIntervalSince1970:timeTamp];</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSDateFormatter *format = [[NSDateFormatter alloc]init];</span><br><span class=\"line\">    [format setDateFormat:formatStr];</span><br><span class=\"line\">    return [format stringFromDate:date];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(NSString *)DateStrFromDate:(NSDate *)date&#123;</span><br><span class=\"line\">    NSTimeInterval interval = [date timeIntervalSince1970] * 1000;</span><br><span class=\"line\">    NSString *timeTramp = [NSString stringWithFormat:@&quot;%ld&quot;,(long)interval];</span><br><span class=\"line\">    return timeTramp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/heidakeng/2.png","slug":"2.png","post":"ckonpno3r001lkuo4qaytlrxk","modified":1,"renderable":0},{"_id":"source/_posts/heidakeng/8.png","slug":"8.png","post":"ckonpno3r001lkuo4qaytlrxk","modified":1,"renderable":0},{"_id":"source/_posts/wordpress安装步骤/1240.png","slug":"1240.png","post":"ckonpno4q002xkuo4uys9bk43","modified":1,"renderable":0},{"_id":"source/_posts/Mac环境下安装NVM/image-20210110194349971.png","post":"ckonpno39000ukuo4n1j3673z","slug":"image-20210110194349971.png","modified":1,"renderable":1},{"_id":"source/_posts/git操作/Git操作使用.png","slug":"Git操作使用.png","post":"ckonpno3h0018kuo4f9g1xgcx","modified":1,"renderable":0},{"_id":"source/_posts/hexo博客配置/image-20210109161634042.png","post":"ckonpno3t001qkuo4nted3v1r","slug":"image-20210109161634042.png","modified":1,"renderable":1},{"_id":"source/_posts/关于技术实验室网站的创建设想/1.jpg","slug":"1.jpg","post":"ckonpno4n002ukuo4cd1kd05f","modified":1,"renderable":0},{"_id":"source/_posts/程序员修炼之道-从小工到专家读书感悟/1.jpg","post":"ckonpno4u0033kuo4s2bb6pr1","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/成为更好的程序员要做到的10个方法/1.png","slug":"1.png","post":"ckonpno4y0039kuo4udtx43qv","modified":1,"renderable":0},{"_id":"source/_posts/hexi-travel/1.png","slug":"1.png","post":"ckonpno3q001jkuo4jxsgl9r8","modified":1,"renderable":0},{"_id":"source/_posts/hexi-travel/2.png","slug":"2.png","post":"ckonpno3q001jkuo4jxsgl9r8","modified":1,"renderable":0},{"_id":"source/_posts/hexi-travel/3.png","slug":"3.png","post":"ckonpno3q001jkuo4jxsgl9r8","modified":1,"renderable":0},{"_id":"source/_posts/wordpress安装步骤/1240-20210110191959901.png","post":"ckonpno4q002xkuo4uys9bk43","slug":"1240-20210110191959901.png","modified":1,"renderable":1},{"_id":"source/_posts/wordpress安装步骤/1240-20210110192000056.png","post":"ckonpno4q002xkuo4uys9bk43","slug":"1240-20210110192000056.png","modified":1,"renderable":1},{"_id":"source/_posts/hexi-assist/1.jpg","post":"ckonpno3m001fkuo41bp5wrg6","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexi-assist/2.jpg","post":"ckonpno3m001fkuo41bp5wrg6","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexi-assist/3.jpg","post":"ckonpno3m001fkuo41bp5wrg6","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexi-assist/4.jpg","post":"ckonpno3m001fkuo41bp5wrg6","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Hexi/1.jpg","slug":"1.jpg","post":"ckonpno2x000ckuo43wjb5j0p","modified":1,"renderable":0},{"_id":"source/_posts/Hexi/2.jpg","post":"ckonpno2x000ckuo43wjb5j0p","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Hexi/3.jpg","post":"ckonpno2x000ckuo43wjb5j0p","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Hexi/4.jpg","post":"ckonpno2x000ckuo43wjb5j0p","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Hexi/5.jpg","post":"ckonpno2x000ckuo43wjb5j0p","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/heidakeng/1.png","post":"ckonpno3r001lkuo4qaytlrxk","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/heidakeng/10.png","post":"ckonpno3r001lkuo4qaytlrxk","slug":"10.png","modified":1,"renderable":1},{"_id":"source/_posts/heidakeng/3.png","post":"ckonpno3r001lkuo4qaytlrxk","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/heidakeng/4.png","post":"ckonpno3r001lkuo4qaytlrxk","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/heidakeng/5.png","post":"ckonpno3r001lkuo4qaytlrxk","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/heidakeng/6.png","post":"ckonpno3r001lkuo4qaytlrxk","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/heidakeng/7.png","post":"ckonpno3r001lkuo4qaytlrxk","slug":"7.png","modified":1,"renderable":1},{"_id":"source/_posts/heidakeng/9.png","post":"ckonpno3r001lkuo4qaytlrxk","slug":"9.png","modified":1,"renderable":1},{"_id":"source/_posts/haofenqi/1.png","post":"ckonpno5u0048kuo4wtoulylf","slug":"1.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckonpno2v000bkuo4unx6cijr","category_id":"ckonpno2i0008kuo4290z4scz","_id":"ckonpno33000ikuo42855eiw7"},{"post_id":"ckonpno2a0006kuo4ulrmuug9","category_id":"ckonpno2i0008kuo4290z4scz","_id":"ckonpno35000mkuo4m18wq0ib"},{"post_id":"ckonpno31000gkuo4l86u86pl","category_id":"ckonpno2i0008kuo4290z4scz","_id":"ckonpno37000pkuo471ck99ze"},{"post_id":"ckonpno2d0007kuo4i6c0rzkf","category_id":"ckonpno2y000dkuo4zew9vdy3","_id":"ckonpno38000skuo4417s3v94"},{"post_id":"ckonpno34000lkuo45d71qeog","category_id":"ckonpno2i0008kuo4290z4scz","_id":"ckonpno39000vkuo48g36htki"},{"post_id":"ckonpno2r000akuo4n4u4mkjh","category_id":"ckonpno34000jkuo4rs2gubfp","_id":"ckonpno3d000zkuo4azxwleyl"},{"post_id":"ckonpno36000okuo4g3j709zk","category_id":"ckonpno2i0008kuo4290z4scz","_id":"ckonpno3e0012kuo4cfo9ekft"},{"post_id":"ckonpno37000rkuo49gb50uhr","category_id":"ckonpno3a000wkuo4bd9dqs9c","_id":"ckonpno3j001akuo4zuexjfg2"},{"post_id":"ckonpno39000ukuo4n1j3673z","category_id":"ckonpno3g0015kuo4p23b3mq4","_id":"ckonpno3p001gkuo46slbww0b"},{"post_id":"ckonpno3b000ykuo4srnszrzs","category_id":"ckonpno3j001bkuo4ukxo7iku","_id":"ckonpno3t001okuo4kp6nwxkc"},{"post_id":"ckonpno3e0011kuo4b3k8iiqo","category_id":"ckonpno3p001ikuo483cb6t4l","_id":"ckonpno3w001vkuo4bkymr7j5"},{"post_id":"ckonpno3t001qkuo4nted3v1r","category_id":"ckonpno34000jkuo4rs2gubfp","_id":"ckonpno3z0020kuo43ryc1udk"},{"post_id":"ckonpno3u001skuo4koi1w6i6","category_id":"ckonpno3t001pkuo4qcc19fgr","_id":"ckonpno420024kuo4wfsed4e4"},{"post_id":"ckonpno3f0014kuo4z3n85c92","category_id":"ckonpno3t001pkuo4qcc19fgr","_id":"ckonpno470028kuo41cp5k94d"},{"post_id":"ckonpno3y001zkuo4svsajg5s","category_id":"ckonpno3t001pkuo4qcc19fgr","_id":"ckonpno49002akuo4li50cxd6"},{"post_id":"ckonpno3h0018kuo4f9g1xgcx","category_id":"ckonpno3p001ikuo483cb6t4l","_id":"ckonpno4d002fkuo4a2z5hfgq"},{"post_id":"ckonpno410023kuo49lrtbwdu","category_id":"ckonpno3p001ikuo483cb6t4l","_id":"ckonpno4f002hkuo4he2xz1jb"},{"post_id":"ckonpno450027kuo4dk8z0l7p","category_id":"ckonpno3t001pkuo4qcc19fgr","_id":"ckonpno4i002lkuo4q38jh9it"},{"post_id":"ckonpno3i0019kuo4qkmd2q68","category_id":"ckonpno3t001pkuo4qcc19fgr","_id":"ckonpno4k002okuo470z1z19w"},{"post_id":"ckonpno4b002ekuo4gfn234ub","category_id":"ckonpno3p001ikuo483cb6t4l","_id":"ckonpno4m002skuo46ksrgxfg"},{"post_id":"ckonpno3l001dkuo44uvc1t38","category_id":"ckonpno3p001ikuo483cb6t4l","_id":"ckonpno4o002vkuo4mdldi08d"},{"post_id":"ckonpno4e002gkuo4az48id9y","category_id":"ckonpno2i0008kuo4290z4scz","_id":"ckonpno4r002ykuo4gda1mf06"},{"post_id":"ckonpno4g002kkuo4zpg6s4gk","category_id":"ckonpno3p001ikuo483cb6t4l","_id":"ckonpno4u0031kuo4d6792uvu"},{"post_id":"ckonpno3r001lkuo4qaytlrxk","category_id":"ckonpno4f002ikuo4b2tc1f8s","_id":"ckonpno4v0034kuo46xbu9l85"},{"post_id":"ckonpno4i002nkuo4xk1as0v3","category_id":"ckonpno2i0008kuo4290z4scz","_id":"ckonpno4y0038kuo4rdkccbry"},{"post_id":"ckonpno4l002rkuo40zqvvpz8","category_id":"ckonpno3p001ikuo483cb6t4l","_id":"ckonpno4z003akuo4pr7xrytr"},{"post_id":"ckonpno4n002ukuo4cd1kd05f","category_id":"ckonpno4f002ikuo4b2tc1f8s","_id":"ckonpno51003ckuo4zk5fqyzp"},{"post_id":"ckonpno4q002xkuo4uys9bk43","category_id":"ckonpno34000jkuo4rs2gubfp","_id":"ckonpno51003ekuo4p31g37bg"},{"post_id":"ckonpno4s0030kuo4les8hyjs","category_id":"ckonpno3p001ikuo483cb6t4l","_id":"ckonpno52003gkuo4jcdiuuvt"},{"post_id":"ckonpno4u0033kuo4s2bb6pr1","category_id":"ckonpno4f002ikuo4b2tc1f8s","_id":"ckonpno52003ikuo4ulr4mjkb"},{"post_id":"ckonpno4w0037kuo4xb32o8r8","category_id":"ckonpno2i0008kuo4290z4scz","_id":"ckonpno53003kkuo40sgck6zu"},{"post_id":"ckonpno4y0039kuo4udtx43qv","category_id":"ckonpno4f002ikuo4b2tc1f8s","_id":"ckonpno54003mkuo4awz2w7wz"},{"post_id":"ckonpno5u0048kuo4wtoulylf","category_id":"ckonpno4f002ikuo4b2tc1f8s","_id":"ckonpno6s004fkuo4d71pan8b"},{"post_id":"ckonpno5y004akuo4xbl4j0z5","category_id":"ckonpno3t001pkuo4qcc19fgr","_id":"ckonpno71004hkuo4v7u2l50m"},{"post_id":"ckonpno7e004ikuo4pmnjeb2f","category_id":"ckonpno3t001pkuo4qcc19fgr","_id":"ckonpno7f004kkuo43gqv8owe"}],"PostTag":[{"post_id":"ckonpno2a0006kuo4ulrmuug9","tag_id":"ckonpno2p0009kuo4jyrktc7k","_id":"ckonpno31000fkuo4afq11nlj"},{"post_id":"ckonpno2d0007kuo4i6c0rzkf","tag_id":"ckonpno2y000ekuo4k9yjouwn","_id":"ckonpno35000nkuo43vspvxfr"},{"post_id":"ckonpno2r000akuo4n4u4mkjh","tag_id":"ckonpno34000kkuo4tx1zttxg","_id":"ckonpno38000tkuo4kjwxeyjj"},{"post_id":"ckonpno2v000bkuo4unx6cijr","tag_id":"ckonpno37000qkuo4z8fixytu","_id":"ckonpno3d0010kuo4djpz5k33"},{"post_id":"ckonpno3b000ykuo4srnszrzs","tag_id":"ckonpno2y000ekuo4k9yjouwn","_id":"ckonpno3f0013kuo4ixshgvai"},{"post_id":"ckonpno2x000ckuo43wjb5j0p","tag_id":"ckonpno3a000xkuo4vmywsbk0","_id":"ckonpno3h0017kuo4nnl23l57"},{"post_id":"ckonpno31000gkuo4l86u86pl","tag_id":"ckonpno3g0016kuo4t67o7vtj","_id":"ckonpno3m001ekuo4hincrzhw"},{"post_id":"ckonpno34000lkuo45d71qeog","tag_id":"ckonpno3g0016kuo4t67o7vtj","_id":"ckonpno3r001kkuo453hzz8hi"},{"post_id":"ckonpno3m001fkuo41bp5wrg6","tag_id":"ckonpno3a000xkuo4vmywsbk0","_id":"ckonpno3s001mkuo4yjcxr1l8"},{"post_id":"ckonpno3q001jkuo4jxsgl9r8","tag_id":"ckonpno3a000xkuo4vmywsbk0","_id":"ckonpno3u001rkuo4sc7ei1ir"},{"post_id":"ckonpno36000okuo4g3j709zk","tag_id":"ckonpno37000qkuo4z8fixytu","_id":"ckonpno3v001tkuo4xryamb6a"},{"post_id":"ckonpno3r001lkuo4qaytlrxk","tag_id":"ckonpno34000kkuo4tx1zttxg","_id":"ckonpno3x001ykuo4uw68d3zw"},{"post_id":"ckonpno37000rkuo49gb50uhr","tag_id":"ckonpno3s001nkuo43s0jnab1","_id":"ckonpno3z0021kuo4fm4nwyva"},{"post_id":"ckonpno39000ukuo4n1j3673z","tag_id":"ckonpno3w001ukuo4cv2tto8d","_id":"ckonpno440026kuo4aaly5frz"},{"post_id":"ckonpno3e0011kuo4b3k8iiqo","tag_id":"ckonpno400022kuo4yqgxwtsn","_id":"ckonpno4b002dkuo4qx09r37r"},{"post_id":"ckonpno3f0014kuo4z3n85c92","tag_id":"ckonpno4a002ckuo4ic0jykoq","_id":"ckonpno4i002mkuo466sliqg8"},{"post_id":"ckonpno4g002kkuo4zpg6s4gk","tag_id":"ckonpno2y000ekuo4k9yjouwn","_id":"ckonpno4l002qkuo4xh4qv95i"},{"post_id":"ckonpno3h0018kuo4f9g1xgcx","tag_id":"ckonpno4g002jkuo42jwmz0qh","_id":"ckonpno4m002tkuo41m8ahh8l"},{"post_id":"ckonpno3i0019kuo4qkmd2q68","tag_id":"ckonpno4k002pkuo43sup853c","_id":"ckonpno4s002zkuo43d4ukdtn"},{"post_id":"ckonpno4n002ukuo4cd1kd05f","tag_id":"ckonpno34000kkuo4tx1zttxg","_id":"ckonpno4u0032kuo4nmrmog8l"},{"post_id":"ckonpno3l001dkuo44uvc1t38","tag_id":"ckonpno4p002wkuo4ho6qw2s0","_id":"ckonpno4w0036kuo4ui4zvtpd"},{"post_id":"ckonpno3t001qkuo4nted3v1r","tag_id":"ckonpno4w0035kuo4vyxopam3","_id":"ckonpno51003dkuo4yr9o2c16"},{"post_id":"ckonpno3u001skuo4koi1w6i6","tag_id":"ckonpno50003bkuo43pz6svmt","_id":"ckonpno52003hkuo4fm4o45bl"},{"post_id":"ckonpno3y001zkuo4svsajg5s","tag_id":"ckonpno50003bkuo43pz6svmt","_id":"ckonpno53003lkuo4l1k81opc"},{"post_id":"ckonpno410023kuo49lrtbwdu","tag_id":"ckonpno53003jkuo408fevwf9","_id":"ckonpno54003okuo49d0jawpi"},{"post_id":"ckonpno450027kuo4dk8z0l7p","tag_id":"ckonpno50003bkuo43pz6svmt","_id":"ckonpno55003qkuo4t38867nx"},{"post_id":"ckonpno4b002ekuo4gfn234ub","tag_id":"ckonpno55003pkuo4qzdxixyd","_id":"ckonpno56003skuo45f1su2xh"},{"post_id":"ckonpno4e002gkuo4az48id9y","tag_id":"ckonpno55003rkuo4pjlz7cr6","_id":"ckonpno56003ukuo4fbcd14qr"},{"post_id":"ckonpno4i002nkuo4xk1as0v3","tag_id":"ckonpno56003tkuo4k2t0921w","_id":"ckonpno58003wkuo4kn2dc7vk"},{"post_id":"ckonpno4l002rkuo40zqvvpz8","tag_id":"ckonpno57003vkuo4utd6ttzn","_id":"ckonpno59003ykuo4ii7peurv"},{"post_id":"ckonpno4q002xkuo4uys9bk43","tag_id":"ckonpno58003xkuo4ld0v3tvd","_id":"ckonpno5b0040kuo4k03i9qvt"},{"post_id":"ckonpno4s0030kuo4les8hyjs","tag_id":"ckonpno5a003zkuo47yv20dv9","_id":"ckonpno5c0042kuo4lh0j2e96"},{"post_id":"ckonpno4u0033kuo4s2bb6pr1","tag_id":"ckonpno5b0041kuo4up79seov","_id":"ckonpno5d0044kuo4qu5x2xh4"},{"post_id":"ckonpno4w0037kuo4xb32o8r8","tag_id":"ckonpno5c0043kuo4eo4vza3n","_id":"ckonpno5e0046kuo4izgoidte"},{"post_id":"ckonpno4y0039kuo4udtx43qv","tag_id":"ckonpno5b0041kuo4up79seov","_id":"ckonpno5h0047kuo424fq0gqk"},{"post_id":"ckonpno5u0048kuo4wtoulylf","tag_id":"ckonpno34000kkuo4tx1zttxg","_id":"ckonpno61004ckuo425qigjal"},{"post_id":"ckonpno5y004akuo4xbl4j0z5","tag_id":"ckonpno50003bkuo43pz6svmt","_id":"ckonpno6q004ekuo4n8d8ez53"},{"post_id":"ckonpno7e004ikuo4pmnjeb2f","tag_id":"ckonpno50003bkuo43pz6svmt","_id":"ckonpno7f004jkuo4igivbs3o"}],"Tag":[{"name":"CSS","_id":"ckonpno2p0009kuo4jyrktc7k"},{"name":"快捷键","_id":"ckonpno2y000ekuo4k9yjouwn"},{"name":"项目","_id":"ckonpno34000kkuo4tx1zttxg"},{"name":"js","_id":"ckonpno37000qkuo4z8fixytu"},{"name":"项目经历","_id":"ckonpno3a000xkuo4vmywsbk0"},{"name":"JS","_id":"ckonpno3g0016kuo4t67o7vtj"},{"name":"mvc","_id":"ckonpno3s001nkuo43s0jnab1"},{"name":"nvm","_id":"ckonpno3w001ukuo4cv2tto8d"},{"name":"编程工具","_id":"ckonpno400022kuo4yqgxwtsn"},{"name":"OC","_id":"ckonpno4a002ckuo4ic0jykoq"},{"name":"git","_id":"ckonpno4g002jkuo42jwmz0qh"},{"name":"swift","_id":"ckonpno4k002pkuo43sup853c"},{"name":"rvm","_id":"ckonpno4p002wkuo4ho6qw2s0"},{"name":"rss","_id":"ckonpno4w0035kuo4vyxopam3"},{"name":"iOS","_id":"ckonpno50003bkuo43pz6svmt"},{"name":"item","_id":"ckonpno53003jkuo408fevwf9"},{"name":"pm2","_id":"ckonpno55003pkuo4qzdxixyd"},{"name":"vue","_id":"ckonpno55003rkuo4pjlz7cr6"},{"name":"npm","_id":"ckonpno56003tkuo4k2t0921w"},{"name":"vim","_id":"ckonpno57003vkuo4utd6ttzn"},{"name":"wordpress","_id":"ckonpno58003xkuo4ld0v3tvd"},{"name":"protobuf","_id":"ckonpno5a003zkuo47yv20dv9"},{"name":"修炼","_id":"ckonpno5b0041kuo4up79seov"},{"name":"调试","_id":"ckonpno5c0043kuo4eo4vza3n"}]}}