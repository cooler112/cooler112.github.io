<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Swift起步</title>
      <link href="/2019/03/06/Swift%E8%B5%B7%E6%AD%A5/"/>
      <url>/2019/03/06/Swift%E8%B5%B7%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<p>由于公司需要，所以拖得不得再拖的Swift学习终于提上日程，教就是最好的学，先摘要，后总结完善，在实战过程中学习进步。</p><p>Swift，苹果于2014年<a href="https://baike.baidu.com/item/WWDC" target="_blank" rel="noopener">WWDC</a>（苹果开发者大会）发布的新开发语言，可与<a href="https://baike.baidu.com/item/Objective-C" target="_blank" rel="noopener">Objective-C</a>*共同运行于<a href="https://baike.baidu.com/item/Mac%20OS" target="_blank" rel="noopener">Mac OS</a>和<a href="https://baike.baidu.com/item/iOS/45705" target="_blank" rel="noopener">iOS</a>平台，用于搭建基于苹果平台的应用程序。</p><p>###Swift核心：<br>安全：明确的类型定义和语法规范有效避免出现未知错误，空指针引用<br>高效：是替代C、C++、OC的理想化工具，良好一致的性能优异表现<br>良好阅读性：基于数十年的科学语法研究，持续优化语法提供更好的可读可写生</p><p>###Swift特点<br>Closures unified with function pointers<br>Tuples and multiple return values<br>Generics<br>Fast and concise iteration over a range or collection<br>Structs that support methods, extensions, and protocols<br>Functional programming patterns, e.g., map and filter<br>Powerful error handling built-in<br>Advanced control flow with do, guard, defer, and repeat keywords<br>闭包的统一与函数指针<br>元组和多个返回值<br>泛型<br>快速而简洁的迭代范围或集合<br>支持的方法，扩展的协议结构。<br>函数式编程模式，例如：映射（map）和过滤器（filter）<br>强大的异常处理<br>先进的控制流关键字</p><p>###与之前语法的区别<br>不同于OC，Swift支持多元返回值<br>类型安全<br>类型安全语言有严格的语法要求</p><p></p>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS端本地sqlite批量插入对比</title>
      <link href="/2019/03/06/iOS%E7%AB%AF%E6%9C%AC%E5%9C%B0sqlite%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E5%AF%B9%E6%AF%94/"/>
      <url>/2019/03/06/iOS%E7%AB%AF%E6%9C%AC%E5%9C%B0sqlite%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<p>###1、Sqlite优势明显<br>iOS端本地数据库一般用sqlite,而且相对于plist、userdefault、文本存储等，使用数据库方便大量数据的操作，而且与后台数据库具有一致性，减少中间不必要的转换，适应能力强。配合FMDB来使用，非常的方便，有一点需要在App内部空间创建.sqlite文件，如果去包含资源文件是可读不可写的。</p><p>###2、什么文件适合数据库<br>对于常见的行政区域，由于可能会出现数据相应的调整，虽然不是很频繁，但是如果保存在本地会影响相关的业务。比如成都这几年分出了天府新区，郫县改为了区，谁能保证以后会不会还有大动作，所以从后台获取较妥，为了避免不必要的数据请求，App启动前可以进行版本检查，判断是否对某些文件进行更新。</p><p>###3、放在数据库要注意的事情<br>  . 数据库句柄的引用和关闭，每次打开是要判断是否数据库可用，用完后即时关闭，避免资源占用<br>  . 可以独立出来统一管理，比如通知消息一般会存数据库，那么通知的增删查改可以放数据库，地址查对应省市区也可以，可以采用一个单例来统一管理.<br>  . 性能和效率</p><pre><code>dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);      dispatch_sync(queue, ^{          [dataBase open];          for (NSInteger index = 0; index &lt; contentArr.count; index++) {              NSDictionary *dic = [contentArr objectAtIndex:index];              BOOL resulat = [dataBase executeUpdate:@&quot;INSERT INTO address(L0_CMT,L0_ID,L1_CMT,L1_ID,L2_CMT,L2_ID,L3_CMT,L3_ID,P_ID) VALUES(?,?,?,?,?,?,?,?,?);&quot;,[dic objectForKey:@&quot;L0_CMT&quot;]                              ,[dic objectForKey:@&quot;L0_ID&quot;]                              ,[dic objectForKey:@&quot;L1_CMT&quot;]                              ,[dic objectForKey:@&quot;L1_ID&quot;]                              ,[dic objectForKey:@&quot;L2_CMT&quot;]                              ,[dic objectForKey:@&quot;L2_ID&quot;]                              ,[dic objectForKey:@&quot;L3_CMT&quot;]                              ,[dic objectForKey:@&quot;L3_ID&quot;]                              ,[dic objectForKey:@&quot;P_ID&quot;]];              if (resulat) {              }          }          [dataBase close];);</code></pre><p>如上图所示看似没有问题，实际上暗茂杀机。之前使用dispatch_async来进行异步数据操作完成批量数据写入，但是运行时报错无法打开数据库句柄，推断数据库是线程安全，不允许多个线程同时对其进行操作，所以对数据库的操作应该放在主线程中。</p><p>问题又来了，放在主线程通过全局串行队列进行的时候，可能会导致操作卡顿，因为省市区几千条数据，我是循环插入的，那该怎么办，于是有了后面的批量插入，效率快多了</p><pre><code>[dataBase setShouldCacheStatements:YES];//是否应该缓存插入描述   static NSString *insertSQLStatment = @&quot;INSERT INTO address(L0_CMT,L0_ID,L1_CMT,L1_ID,L2_CMT,L2_ID,L3_CMT,L3_ID,P_ID) VALUES(?,?,?,?,?,?,?,?,?);&quot;;   [dataBase beginTransaction]; //启动事务   for (NSDictionary *dic in contentArr)   {       [dataBase executeUpdate:insertSQLStatment withArgumentsInArray:@[                                                                        [dic objectForKey:@&quot;L0_CMT&quot;]                                                                        ,[dic objectForKey:@&quot;L0_ID&quot;]                                                                         ,[dic objectForKey:@&quot;L1_CMT&quot;]                                                                        ,[dic objectForKey:@&quot;L1_ID&quot;]                                                                        ,[dic objectForKey:@&quot;L2_CMT&quot;]                                                                        ,[dic objectForKey:@&quot;L2_ID&quot;]                                                                        ,[dic objectForKey:@&quot;L3_CMT&quot;]                                                                        ,[dic objectForKey:@&quot;L3_ID&quot;]                                                                       ,[dic objectForKey:@&quot;P_ID&quot;]]                                                                        ];   }   [dataBase commit]; //开始执行   [dataBase close];</code></pre><p>事务对于大批量操作太管用了，主要是快，这样就算有阻塞，时间短得可怜，用户无法察觉。</p><p>欢迎讨论交流</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS再次打开推送总结</title>
      <link href="/2019/03/06/iOS%E5%86%8D%E6%AC%A1%E6%89%93%E5%BC%80%E6%8E%A8%E9%80%81%E6%80%BB%E7%BB%93/"/>
      <url>/2019/03/06/iOS%E5%86%8D%E6%AC%A1%E6%89%93%E5%BC%80%E6%8E%A8%E9%80%81%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>APP中常用的混合加密</title>
      <link href="/2019/03/06/APP%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E6%B7%B7%E5%90%88%E5%8A%A0%E5%AF%86/"/>
      <url>/2019/03/06/APP%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E6%B7%B7%E5%90%88%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>OC常用格式检查</title>
      <link href="/2019/03/06/OC%E5%B8%B8%E7%94%A8%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%9F%A5/"/>
      <url>/2019/03/06/OC%E5%B8%B8%E7%94%A8%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<hr><p>title: OC常用格式检查<br>date: 2017-03-01 16:16:14</p><h2 id="tags"><a href="#tags" class="headerlink" title="tags:"></a>tags:</h2><p>要点：</p><ol><li>在textField或者TextView进行输入时一般会进行输入时检查</li><li>点击提交的时候会进行手机号之类的格式验证</li><li>邮箱身份证验证</li><li>数据类型判断</li><li>小数判断</li><li>时间格式转换</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">//  FormatAssistant.h</span><br><span class="line">//  HexiShop</span><br><span class="line">//</span><br><span class="line">//  Created by Smith Cool on 16/8/18.</span><br><span class="line">//  Copyright © 2016年 Xiaohr. All rights reserved.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface FormatAssistant : NSObject</span><br><span class="line"></span><br><span class="line">//输入检查input开头</span><br><span class="line">//类型检查is开头</span><br><span class="line">#pragma mark ---------------------手机号phone--------------------------------</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 16:08:42</span><br><span class="line"> *</span><br><span class="line"> *  针对手机号码输入的格式检查</span><br><span class="line"> *</span><br><span class="line"> *  @param BOOL number 逐步输入手机号</span><br><span class="line"> *</span><br><span class="line"> *  @return 正确返回yes，错误返回NO</span><br><span class="line"> */</span><br><span class="line">+ (BOOL)inputValidatePhoneNumber:(NSString*)number;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 16:08:40</span><br><span class="line"> *</span><br><span class="line"> *  手机号码是否合法格式检查</span><br><span class="line"> *</span><br><span class="line"> *  @param BOOL phoneNumber</span><br><span class="line"> *</span><br><span class="line"> *  @return 不合法返回YES，合法返回NO</span><br><span class="line"> */</span><br><span class="line">+(BOOL)phoneNumberisWrong:(NSString *)phoneNumber;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  @brief 手机空格格式检查并返回值</span><br><span class="line"> *</span><br><span class="line"> *  @param phoneNumber 手机号</span><br><span class="line"> *</span><br><span class="line"> *  @return 是：有错</span><br><span class="line"> */</span><br><span class="line">+(BOOL)phoneNumberisWrongWithAll:(NSString *)phoneNumber;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 16:08:33</span><br><span class="line"> *</span><br><span class="line"> *  针对座机号码输入的格式检查</span><br><span class="line"> *</span><br><span class="line"> *  @param NSString zjNumber</span><br><span class="line"> *</span><br><span class="line"> *  @return BOOL</span><br><span class="line"> */</span><br><span class="line">+ (BOOL)inputZuoJiNumberisWrong:(NSString*)zjNumber;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#pragma mark -------------------------类型检查----------------------------------------</span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 16:08:29</span><br><span class="line"> *</span><br><span class="line"> *  是否为浮点型</span><br><span class="line"> *</span><br><span class="line"> *  @param string floatNumber</span><br><span class="line"> *</span><br><span class="line"> *  @return 为浮点型返回YES，否则返回NO</span><br><span class="line"> */</span><br><span class="line">+ (BOOL)isPureFloat:(NSString*)floatNumber;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 16:08:48</span><br><span class="line"> *</span><br><span class="line"> *  是否为整型</span><br><span class="line"> *</span><br><span class="line"> *  @param string intNumber</span><br><span class="line"> *</span><br><span class="line"> *  @return BOOL 是返回YES，否则返回NO</span><br><span class="line"> */</span><br><span class="line">+ (BOOL)isPureInt:(NSString*)intNumber;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 17:08:57</span><br><span class="line"> *</span><br><span class="line"> *  两位小数输入限制（必须与UITextFieldDelegate Change代理同用）</span><br><span class="line"> *</span><br><span class="line"> *  @param String xiaoshuStr 输入的数字</span><br><span class="line"> *  @param NSRange  rang    输入的变化</span><br><span class="line"> *  @return BOOL</span><br><span class="line"> */</span><br><span class="line">+(BOOL)inputXiaoshuValidate:(NSString *)xiaoshuStr stringConfig:(NSString *)string shouldChangeCharactersInRange:(NSRange)range weishuConfig:(NSInteger)weishu;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 16:08:49</span><br><span class="line"> *</span><br><span class="line"> *  针对输入金额的格式检查</span><br><span class="line"> *</span><br><span class="line"> *  @param NSString moneyStr</span><br><span class="line"> *</span><br><span class="line"> *  @return BOOL</span><br><span class="line"> */</span><br><span class="line">+ (BOOL)inputMoneyFormat:(NSString*)moneyStr;</span><br><span class="line"></span><br><span class="line">#pragma mark -------------------------密码检查password----------------------------------------</span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 16:08:13</span><br><span class="line"> *</span><br><span class="line"> *  常规密码检查（6到20位大小数字）</span><br><span class="line"> *</span><br><span class="line"> *  @param BOOL passWordStr</span><br><span class="line"> *</span><br><span class="line"> *  @return BOOL</span><br><span class="line"> */</span><br><span class="line">+ (BOOL)passwordNormalisRight:(NSString *)passWordStr;</span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 16:08:20</span><br><span class="line"> *</span><br><span class="line"> *  密码输入格式检查 ^[a-zA-Z0-9|,|.|_|!|?]</span><br><span class="line"> *</span><br><span class="line"> *  @param String passwordInputStr</span><br><span class="line"> *</span><br><span class="line"> *  @return BOOL</span><br><span class="line"> */</span><br><span class="line">+ (BOOL)inputPasswordisRight:(NSString*)passwordInputStr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#pragma mark -------------------------自定义格式检查----------------------------------------</span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 16:08:13</span><br><span class="line"> *</span><br><span class="line"> *  自定义符串类型检查 店铺名称检查（^[_|A-Za-z0-9\u4E00-\u9FA5_-]+$&quot;）</span><br><span class="line"> *</span><br><span class="line"> *  @param String passWordStr</span><br><span class="line"> *  @param String regix 匹配符</span><br><span class="line"> *</span><br><span class="line"> *  @return BOOL</span><br><span class="line"> */</span><br><span class="line">+ (BOOL)stringFormatisRight:(NSString *)string withRegix:(NSString *)regix;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 16:08:21</span><br><span class="line"> *</span><br><span class="line"> *  自定义输入格式检查</span><br><span class="line"> *</span><br><span class="line"> *  @param String inputString</span><br><span class="line"> *  @param String regix 匹配符</span><br><span class="line"> *  @return BOOL</span><br><span class="line"> */</span><br><span class="line">+ (BOOL) inputStringFormatRight:(NSString *)inputString withRegix:(NSString *)regix;</span><br><span class="line"></span><br><span class="line">#pragma mark -------------------------其它格式检查----------------------------------------</span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 17:08:41</span><br><span class="line"> *</span><br><span class="line"> *  身份证号码格式检查</span><br><span class="line"> *</span><br><span class="line"> *  @param identityCard 身份证号串</span><br><span class="line"> *</span><br><span class="line"> *  @return BOOL</span><br><span class="line"> */</span><br><span class="line">+(BOOL)IDcardFormateCheck:(NSString *)identityCard;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  @brief 邮箱格式检查</span><br><span class="line"> *  @param String mailStr</span><br><span class="line"> *</span><br><span class="line"> *  @return BOOL</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">+(BOOL)mailValidateIsRight:(NSString *)mailStr;</span><br><span class="line"></span><br><span class="line">+(NSString *)DateWidthFormat:(NSString *)formatStr dateConfig:(NSDate *)date;</span><br><span class="line">+(NSString *)DateWidthFormat:(NSString *)formatStr timeInterValeConfig:(double)timeTamp;</span><br><span class="line">-(NSString *)DateStrFromDate:(NSDate *)date;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">//  FormatAssistant.m</span><br><span class="line">//  HexiShop</span><br><span class="line">//</span><br><span class="line">//  Created by Smith Cool on 16/8/18.</span><br><span class="line">//  Copyright © 2016年 Xiaohr. All rights reserved.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#import &quot;FormatAssistant.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation FormatAssistant</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 16:08:42</span><br><span class="line"> *</span><br><span class="line"> *  针对手机号码输入的格式检查</span><br><span class="line"> *</span><br><span class="line"> *  @param BOOL number 逐步输入手机号</span><br><span class="line"> *</span><br><span class="line"> *  @return 正确返回yes，错误返回NO</span><br><span class="line"> */</span><br><span class="line">+ (BOOL)inputValidatePhoneNumber:(NSString*)number&#123;</span><br><span class="line">    BOOL res = YES;</span><br><span class="line">    NSCharacterSet* tmpSet = [NSCharacterSet characterSetWithCharactersInString:@&quot;0123456789&quot;];</span><br><span class="line">    int i = 0;</span><br><span class="line">    while (i &lt; number.length) &#123;</span><br><span class="line">        NSString * string = [number substringWithRange:NSMakeRange(i, 1)];</span><br><span class="line">        NSRange range = [string rangeOfCharacterFromSet:tmpSet];</span><br><span class="line">        if (range.length == 0) &#123;</span><br><span class="line">            res = NO;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 16:08:40</span><br><span class="line"> *</span><br><span class="line"> *  手机号码是否合法格式检查</span><br><span class="line"> *</span><br><span class="line"> *  @param BOOL phoneNumber</span><br><span class="line"> *</span><br><span class="line"> *  @return 不合法返回YES，合法返回NO</span><br><span class="line"> */</span><br><span class="line">+(BOOL)phoneNumberisWrong:(NSString *)phoneNumber&#123;</span><br><span class="line">    NSString *phoneNo = strTrimming(phoneNumber);</span><br><span class="line">    NSString *regex = @&quot;1[3|4|5|7|8|][0-9]&#123;9&#125;&quot;;</span><br><span class="line">    NSPredicate *predicate = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, regex];</span><br><span class="line">    if (![predicate evaluateWithObject:phoneNo]) &#123;</span><br><span class="line">        return YES;</span><br><span class="line">    &#125;</span><br><span class="line">    return NO;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> *  @brief 手机空格格式检查并返回值</span><br><span class="line"> *</span><br><span class="line"> *  @param phoneNumber 手机号</span><br><span class="line"> *</span><br><span class="line"> *  @return 是：有错</span><br><span class="line"> */</span><br><span class="line">+(BOOL)phoneNumberisWrongWithAll:(NSString *)phoneNumber&#123;</span><br><span class="line">    if (![phoneNumber hasValue]) &#123;</span><br><span class="line">        [UserHelp showMessage:@&quot;手机号不能为空&quot;];</span><br><span class="line">        return YES;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        if([FormatAssistant phoneNumberisWrong:phoneNumber])&#123;</span><br><span class="line">            [UserHelp showMessage:@&quot;手机号格式不正确&quot;];</span><br><span class="line">            return YES;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return NO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 16:08:33</span><br><span class="line"> *</span><br><span class="line"> *  针对座机号码输入的格式检查</span><br><span class="line"> *</span><br><span class="line"> *  @param NSString zjNumber</span><br><span class="line"> *</span><br><span class="line"> *  @return BOOL</span><br><span class="line"> */</span><br><span class="line">+ (BOOL)inputZuoJiNumberisWrong:(NSString*)zjNumber&#123;</span><br><span class="line">    BOOL res = YES;</span><br><span class="line">    NSCharacterSet* tmpSet = [NSCharacterSet characterSetWithCharactersInString:@&quot;0123456789-&quot;];</span><br><span class="line">    int i = 0;</span><br><span class="line">    while (i &lt; zjNumber.length) &#123;</span><br><span class="line">        NSString * string = [zjNumber substringWithRange:NSMakeRange(i, 1)];</span><br><span class="line">        NSRange range = [string rangeOfCharacterFromSet:tmpSet];</span><br><span class="line">        if (range.length == 0) &#123;</span><br><span class="line">            res = NO;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark -------------------------类型检查----------------------------------------</span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 16:08:29</span><br><span class="line"> *</span><br><span class="line"> *  是否为浮点型</span><br><span class="line"> *</span><br><span class="line"> *  @param string floatNumber</span><br><span class="line"> *</span><br><span class="line"> *  @return 为浮点型返回YES，否则返回NO</span><br><span class="line"> */</span><br><span class="line">+ (BOOL)isPureFloat:(NSString*)floatNumber&#123;</span><br><span class="line">    NSScanner* scan = [NSScanner scannerWithString:floatNumber];</span><br><span class="line">    float val;</span><br><span class="line">    return[scan scanFloat:&amp;val] &amp;&amp; [scan isAtEnd];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 16:08:48</span><br><span class="line"> *</span><br><span class="line"> *  是否为整型</span><br><span class="line"> *</span><br><span class="line"> *  @param string intNumber</span><br><span class="line"> *</span><br><span class="line"> *  @return BOOL 是返回YES，否则返回NO</span><br><span class="line"> */</span><br><span class="line">+ (BOOL)isPureInt:(NSString*)intNumber&#123;</span><br><span class="line">    NSScanner* scan = [NSScanner scannerWithString:intNumber];</span><br><span class="line">    int val;</span><br><span class="line">    return[scan scanInt:&amp;val] &amp;&amp; [scan isAtEnd];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 17:08:57</span><br><span class="line"> *</span><br><span class="line"> *  两位小数输入限制（必须与UITextFieldDelegate Change代理同用）</span><br><span class="line"> *</span><br><span class="line"> *  @param String xiaoshuStr 输入的数字</span><br><span class="line"> *  @param String string 变化串</span><br><span class="line"> *  @param NSRange  rang    输入的变化</span><br><span class="line"> *  @param weishu</span><br><span class="line"> *  @return BOOL</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">+(BOOL)inputXiaoshuValidate:(NSString *)xiaoshuStr stringConfig:(NSString *)string shouldChangeCharactersInRange:(NSRange)range weishuConfig:(NSInteger)weishu&#123;</span><br><span class="line">    BOOL isHaveDian = YES;</span><br><span class="line">    if ([xiaoshuStr rangeOfString:@&quot;.&quot;].location == NSNotFound) &#123;</span><br><span class="line">        isHaveDian = NO;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if ([string length] &gt; 0) &#123;</span><br><span class="line">        unichar single = [string characterAtIndex:0];//当前输入的字符</span><br><span class="line">        if ((single &gt;= &apos;0&apos; &amp;&amp; single &lt;= &apos;9&apos;) || single == &apos;.&apos;) &#123;//数据格式正确</span><br><span class="line">            </span><br><span class="line">            //首字母不能为0和小数点</span><br><span class="line">            if([xiaoshuStr length] == 0)&#123;</span><br><span class="line">                if(single == &apos;.&apos;) &#123;</span><br><span class="line">                    //                        [self showText:@&quot;亲，第一个数字不能为小数点&quot;];</span><br><span class="line">                    [xiaoshuStr stringByReplacingCharactersInRange:range withString:@&quot;&quot;];</span><br><span class="line">                    return NO;</span><br><span class="line">                &#125;</span><br><span class="line">                // if (single == &apos;0&apos;) &#123;</span><br><span class="line">                //                        [self showText:@&quot;亲，第一个数字不能为0&quot;];</span><br><span class="line">                //      [xiaoshuStr stringByReplacingCharactersInRange:range withString:@&quot;&quot;];</span><br><span class="line">                //    return NO;</span><br><span class="line">                //&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            //输入的字符是否是小数点</span><br><span class="line">            if (single == &apos;.&apos;) &#123;</span><br><span class="line">                if(!isHaveDian)//text中还没有小数点</span><br><span class="line">                &#123;</span><br><span class="line">                    isHaveDian = YES;</span><br><span class="line">                    return YES;</span><br><span class="line">                    </span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    //                        [self showText:@&quot;亲，您已经输入过小数点了&quot;];</span><br><span class="line">                    [xiaoshuStr stringByReplacingCharactersInRange:range withString:@&quot;&quot;];</span><br><span class="line">                    return NO;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                if (isHaveDian) &#123;//存在小数点</span><br><span class="line">                    </span><br><span class="line">                    //判断小数点的位数</span><br><span class="line">                    NSRange ran = [xiaoshuStr rangeOfString:@&quot;.&quot;];</span><br><span class="line">                    if (range.location - ran.location &lt;= weishu) &#123;</span><br><span class="line">                        return YES;</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        //                            [self showText:@&quot;亲，您最多输入两位小数&quot;];</span><br><span class="line">                        return NO;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    return YES;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;//输入的数据格式不正确</span><br><span class="line">            //                [self showText:@&quot;亲，您输入的格式不正确&quot;];</span><br><span class="line">            [xiaoshuStr stringByReplacingCharactersInRange:range withString:@&quot;&quot;];</span><br><span class="line">            return NO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        return YES;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 16:08:49</span><br><span class="line"> *</span><br><span class="line"> *  针对输入金额的格式检查</span><br><span class="line"> *</span><br><span class="line"> *  @param NSString moneyStr</span><br><span class="line"> *</span><br><span class="line"> *  @return BOOL</span><br><span class="line"> */</span><br><span class="line">+ (BOOL)inputMoneyFormat:(NSString*)moneyStr&#123;</span><br><span class="line">    BOOL res = YES;</span><br><span class="line">    NSCharacterSet* tmpSet = [NSCharacterSet characterSetWithCharactersInString:@&quot;0123456789.&quot;];</span><br><span class="line">    int i = 0;</span><br><span class="line">    while (i &lt; moneyStr.length) &#123;</span><br><span class="line">        NSString * string = [moneyStr substringWithRange:NSMakeRange(i, 1)];</span><br><span class="line">        NSRange range = [string rangeOfCharacterFromSet:tmpSet];</span><br><span class="line">        if (range.length == 0) &#123;</span><br><span class="line">            res = NO;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark -------------------------密码检查----------------------------------------</span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 16:08:13</span><br><span class="line"> *</span><br><span class="line"> *  常规密码检查（6到20位大小数字）</span><br><span class="line"> *</span><br><span class="line"> *  @param BOOL passWordStr</span><br><span class="line"> *</span><br><span class="line"> *  @return BOOL</span><br><span class="line"> */</span><br><span class="line">+ (BOOL)passwordNormalisRight:(NSString *)passWordStr&#123;</span><br><span class="line">    NSString *passWordRegex = @&quot;^[a-zA-Z0-9]&#123;6,20&#125;+$&quot;;</span><br><span class="line">    NSPredicate *passWordPredicate = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;,passWordRegex];</span><br><span class="line">    return [passWordPredicate evaluateWithObject:passWordStr];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 16:08:20</span><br><span class="line"> *</span><br><span class="line"> *  密码输入格式检查 ^[a-zA-Z0-9|,|.|_|!|?]&quot;</span><br><span class="line"> *</span><br><span class="line"> *  @param String passwordInputStr</span><br><span class="line"> *</span><br><span class="line"> *  @return BOOL</span><br><span class="line"> */</span><br><span class="line">+ (BOOL)inputPasswordisRight:(NSString*)passwordInputStr&#123;</span><br><span class="line">    BOOL res = YES;</span><br><span class="line">    NSString *passWordRegex = @&quot;^[a-zA-Z0-9|,|.|_|!|?]&quot;;</span><br><span class="line">    int i = 0;</span><br><span class="line">    while (i &lt; passwordInputStr.length) &#123;</span><br><span class="line">        NSString * stringsub = [passwordInputStr substringWithRange:NSMakeRange(i, 1)];</span><br><span class="line">        NSPredicate *passWordPredicate = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;,passWordRegex];</span><br><span class="line">        if (![passWordPredicate evaluateWithObject:stringsub]) &#123;</span><br><span class="line">            res = NO;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark -------------------------自定义格式检查----------------------------------------</span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 16:08:13</span><br><span class="line"> *</span><br><span class="line"> *  自定义符串类型检查</span><br><span class="line"> *</span><br><span class="line"> *  @param String passWordStr</span><br><span class="line"> *  @param String regix 匹配符</span><br><span class="line"> *</span><br><span class="line"> *  @return BOOL</span><br><span class="line"> */</span><br><span class="line">+ (BOOL)stringFormatisRight:(NSString *)string withRegix:(NSString *)regix&#123;</span><br><span class="line">    NSString *RegixFormat = regix;</span><br><span class="line">    NSPredicate *passWordPredicate = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;,RegixFormat];</span><br><span class="line">    return [passWordPredicate evaluateWithObject:string];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 16:08:21</span><br><span class="line"> *</span><br><span class="line"> *  自定义输入格式检查</span><br><span class="line"> *</span><br><span class="line"> *  @param String inputString</span><br><span class="line"> *  @param String regix 匹配符</span><br><span class="line"> *  @return BOOL</span><br><span class="line"> */</span><br><span class="line">+ (BOOL) inputStringFormatRight:(NSString *)inputString withRegix:(NSString *)regix&#123;</span><br><span class="line">    BOOL res = YES;</span><br><span class="line">    int i = 0;</span><br><span class="line">    while (i &lt; inputString.length) &#123;</span><br><span class="line">        NSString * stringsub = [inputString substringWithRange:NSMakeRange(i, 1)];</span><br><span class="line">        NSPredicate *passWordPredicate = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;,regix];</span><br><span class="line">        if (![passWordPredicate evaluateWithObject:stringsub]) &#123;</span><br><span class="line">            res = NO;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark -------------------------其它格式检查----------------------------------------</span><br><span class="line">/**</span><br><span class="line"> *  @author Xiao  Huarong, 16-08-18 17:08:41</span><br><span class="line"> *</span><br><span class="line"> *  身份证号码格式检查</span><br><span class="line"> *</span><br><span class="line"> *  @param identityCard 身份证号串</span><br><span class="line"> *</span><br><span class="line"> *  @return BOOL</span><br><span class="line"> */</span><br><span class="line">+ (BOOL)checkIDCard:(NSString *)value &#123;</span><br><span class="line">    value = [value stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];</span><br><span class="line">    NSInteger length =0;</span><br><span class="line">    if (!value) &#123;</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        length = [value length];</span><br><span class="line">        if (length !=15 &amp;&amp; length !=18) &#123;</span><br><span class="line">            return NO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 省份代码</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    NSArray *areasArray =@[@&quot;11&quot;,@&quot;12&quot;, @&quot;13&quot;,@&quot;14&quot;, @&quot;15&quot;,@&quot;21&quot;, @&quot;22&quot;,@&quot;23&quot;, @&quot;31&quot;,@&quot;32&quot;, @&quot;33&quot;,@&quot;34&quot;, @&quot;35&quot;,@&quot;36&quot;, @&quot;37&quot;,@&quot;41&quot;,@&quot;42&quot;,@&quot;43&quot;, @&quot;44&quot;,@&quot;45&quot;, @&quot;46&quot;,@&quot;50&quot;, @&quot;51&quot;,@&quot;52&quot;, @&quot;53&quot;,@&quot;54&quot;, @&quot;61&quot;,@&quot;62&quot;, @&quot;63&quot;,@&quot;64&quot;, @&quot;65&quot;,@&quot;71&quot;, @&quot;81&quot;,@&quot;82&quot;, @&quot;91&quot;];</span><br><span class="line">    </span><br><span class="line">    NSString *valueStart2 = [value substringToIndex:2];</span><br><span class="line">    BOOL areaFlag =NO;</span><br><span class="line">    for (NSString *areaCode in areasArray) &#123;</span><br><span class="line">        </span><br><span class="line">        if ([areaCode isEqualToString:valueStart2]) &#123;</span><br><span class="line">            areaFlag =YES;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (!areaFlag) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSRegularExpression *regularExpression;</span><br><span class="line">    NSUInteger numberofMatch;</span><br><span class="line">    int year =0;</span><br><span class="line">    switch (length) &#123;</span><br><span class="line">        case 15:</span><br><span class="line">            year = [value substringWithRange:NSMakeRange(6,2)].intValue +1900;</span><br><span class="line">            if (year %4 ==0 || (year %100 ==0 &amp;&amp; year %4 ==0)) &#123;</span><br><span class="line">                regularExpression = [[NSRegularExpression alloc]initWithPattern:@&quot;^[1-9][0-9]&#123;5&#125;[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]&#123;3&#125;$&quot;</span><br><span class="line">                                                                        options:NSRegularExpressionCaseInsensitive</span><br><span class="line">                                                                          error:nil];//测试出生日期的合法性</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                regularExpression = [[NSRegularExpression alloc]initWithPattern:@&quot;^[1-9][0-9]&#123;5&#125;[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]&#123;3&#125;$&quot;</span><br><span class="line">                                                                        options:NSRegularExpressionCaseInsensitive</span><br><span class="line">                                                                          error:nil];//测试出生日期的合法性</span><br><span class="line">            &#125;</span><br><span class="line">            numberofMatch = [regularExpression numberOfMatchesInString:value</span><br><span class="line">                                                               options:NSMatchingReportProgress</span><br><span class="line">                                                                 range:NSMakeRange(0, value.length)];</span><br><span class="line">            if(numberofMatch &gt;0) &#123;</span><br><span class="line">                return YES;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                return NO;</span><br><span class="line">            &#125;</span><br><span class="line">        case 18:</span><br><span class="line">            year = [value substringWithRange:NSMakeRange(6,4)].intValue;</span><br><span class="line"></span><br><span class="line">            if (year %4 ==0 || (year %100 ==0 &amp;&amp; year %4 ==0)) &#123;</span><br><span class="line">                </span><br><span class="line">                regularExpression = [[NSRegularExpression alloc]initWithPattern:@&quot;^[1-9][0-9]&#123;5&#125;19[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]&#123;3&#125;[0-9Xx]$&quot;</span><br><span class="line">                                     </span><br><span class="line">                                                                        options:NSRegularExpressionCaseInsensitive</span><br><span class="line">                                     </span><br><span class="line">                                     </span><br><span class="line">                                     </span><br><span class="line">                                                                          error:nil];//测试出生日期的合法性</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                regularExpression = [[NSRegularExpression alloc]initWithPattern:@&quot;^[1-9][0-9]&#123;5&#125;19[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]&#123;3&#125;[0-9Xx]$&quot;</span><br><span class="line">                                     </span><br><span class="line">                                     </span><br><span class="line">                                     </span><br><span class="line">                                                                        options:NSRegularExpressionCaseInsensitive</span><br><span class="line">                                     </span><br><span class="line">                                     </span><br><span class="line">                                     </span><br><span class="line">                                                                          error:nil];//测试出生日期的合法性</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            numberofMatch = [regularExpression numberOfMatchesInString:value</span><br><span class="line">                             </span><br><span class="line">                             </span><br><span class="line">                             </span><br><span class="line">                                                               options:NSMatchingReportProgress</span><br><span class="line">                             </span><br><span class="line">                             </span><br><span class="line">                             </span><br><span class="line">                                                                 range:NSMakeRange(0, value.length)];</span><br><span class="line">            </span><br><span class="line">            if(numberofMatch &gt;0) &#123;</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                int S = ([value substringWithRange:NSMakeRange(0,1)].intValue + [value substringWithRange:NSMakeRange(10,1)].intValue) *7 + ([value substringWithRange:NSMakeRange(1,1)].intValue + [value substringWithRange:NSMakeRange(11,1)].intValue) *9 + ([value substringWithRange:NSMakeRange(2,1)].intValue + [value substringWithRange:NSMakeRange(12,1)].intValue) *10 + ([value substringWithRange:NSMakeRange(3,1)].intValue + [value substringWithRange:NSMakeRange(13,1)].intValue) *5 + ([value substringWithRange:NSMakeRange(4,1)].intValue + [value substringWithRange:NSMakeRange(14,1)].intValue) *8 + ([value substringWithRange:NSMakeRange(5,1)].intValue + [value substringWithRange:NSMakeRange(15,1)].intValue) *4 + ([value substringWithRange:NSMakeRange(6,1)].intValue + [value substringWithRange:NSMakeRange(16,1)].intValue) *2 + [value substringWithRange:NSMakeRange(7,1)].intValue *1 + [value substringWithRange:NSMakeRange(8,1)].intValue *6 + [value substringWithRange:NSMakeRange(9,1)].intValue *3;</span><br><span class="line"></span><br><span class="line">                int Y = S %11;</span><br><span class="line"></span><br><span class="line">                NSString *M =@&quot;F&quot;;</span><br><span class="line"></span><br><span class="line">                NSString *JYM =@&quot;10X98765432&quot;;</span><br><span class="line"></span><br><span class="line">                M = [JYM substringWithRange:NSMakeRange(Y,1)];// 判断校验位</span><br><span class="line"></span><br><span class="line">                if ([M isEqualToString:[value substringWithRange:NSMakeRange(17,1)]]) &#123;</span><br><span class="line"></span><br><span class="line">                    return YES;// 检测ID的校验位</span><br><span class="line"> </span><br><span class="line">                &#125;else &#123;</span><br><span class="line"></span><br><span class="line">                    return NO;</span><br><span class="line"> </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line"></span><br><span class="line">                return NO;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        default:</span><br><span class="line"></span><br><span class="line">            return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> *  @brief 邮箱格式检查</span><br><span class="line"> *  @param String mailStr</span><br><span class="line"> *  </span><br><span class="line"> *  return BOOL</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">+(BOOL)mailValidateIsRight:(NSString *)mailStr&#123;</span><br><span class="line">    NSString *emailRegex = @&quot;[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]&#123;2,4&#125;&quot;;</span><br><span class="line">    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, emailRegex];</span><br><span class="line">    return [emailTest evaluateWithObject:mailStr];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+(NSString *)DateWidthFormat:(NSString *)formatStr dateConfig:(NSDate *)date&#123;</span><br><span class="line">    NSDateFormatter *format = [[NSDateFormatter alloc]init];</span><br><span class="line">    [format setDateFormat:formatStr];</span><br><span class="line">    return [format stringFromDate:date];</span><br><span class="line">&#125;</span><br><span class="line">+(NSString *)DateWidthFormat:(NSString *)formatStr timeInterValeConfig:(double)timeTamp&#123;</span><br><span class="line">    NSDate *date = [NSDate dateWithTimeIntervalSince1970:timeTamp];</span><br><span class="line">    </span><br><span class="line">    NSDateFormatter *format = [[NSDateFormatter alloc]init];</span><br><span class="line">    [format setDateFormat:formatStr];</span><br><span class="line">    return [format stringFromDate:date];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(NSString *)DateStrFromDate:(NSDate *)date&#123;</span><br><span class="line">    NSTimeInterval interval = [date timeIntervalSince1970] * 1000;</span><br><span class="line">    NSString *timeTramp = [NSString stringWithFormat:@&quot;%ld&quot;,(long)interval];</span><br><span class="line">    return timeTramp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OC项目开发常用宏定义</title>
      <link href="/2019/03/06/OC%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%AE%8F%E5%AE%9A%E4%B9%89/"/>
      <url>/2019/03/06/OC%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%AE%8F%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<hr><p>title: OC项目开发常用宏定义<br>date: 2017-02-25 15:40:37</p><h2 id="tags"><a href="#tags" class="headerlink" title="tags:"></a>tags:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#define WS(weakSelf)  __weak __typeof(self)weakSelf = self; //__typeof() 声明数据类型</span><br><span class="line">#define DEF [NSUserDefaults standardUserDefaults]</span><br><span class="line"></span><br><span class="line">//屏幕适配 间距设置</span><br><span class="line">#define HORIZ_5 AUTO_WIDTH(5)</span><br><span class="line">#define HORIZ_10 AUTO_WIDTH(10)</span><br><span class="line">#define VERTICAL_5  AUTO_HIGHT(5)</span><br><span class="line">#define VERTICAL_10  AUTO_HIGHT(10)</span><br><span class="line"></span><br><span class="line">//指定某设计图尺寸确定高度或指按屏幕比例放缩</span><br><span class="line">#define IMGHEIGHT_720(x) (x/720.0f*Main_Screen_Width)</span><br><span class="line">//#deine IMGHEIGHT(x)(y) (y/x*AUTO_WIDTH(x))</span><br><span class="line"></span><br><span class="line">//设备尺寸</span><br><span class="line">#define iphone4x_3_5 ([UIScreen mainScreen].bounds.size.height==480.0f)</span><br><span class="line">#define iphone5x_4_0 ([UIScreen mainScreen].bounds.size.height==568.0f)</span><br><span class="line">#define iphone6_4_7 ([UIScreen mainScreen].bounds.size.height==667.0f)</span><br><span class="line">#define iphone6Plus_5_5 ([UIScreen mainScreen].bounds.size.height==736.0f || [UIScreen mainScreen].bounds.size.height==414.0f)</span><br><span class="line">#define IMAGEINDEX Main_Screen_Width / 720.0f</span><br><span class="line"></span><br><span class="line">//应用框架尺寸</span><br><span class="line">#define  NAVHEIGHT 64</span><br><span class="line">#define TABBARHEIGHT 40</span><br><span class="line"></span><br><span class="line">//app 尺寸宏定义</span><br><span class="line">#define Main_Screen_Height [[UIScreen mainScreen] bounds].size.height //主屏幕的高度</span><br><span class="line">#define Main_Screen_Width  [[UIScreen mainScreen] bounds].size.width  //主屏幕的宽度</span><br><span class="line">/*** KeyWindow Height Width */</span><br><span class="line">#define KeyWindow_Height [[[UIApplication sharedApplication] keyWindow] frame].size.height //KeyWindow的高度</span><br><span class="line">#define KeyWindow_Width  [[[[UIApplication sharedApplication] keyWindow] frame].size..width  //KeyWindow的宽度</span><br><span class="line">#define AUTO_WIDTH(number)   (number) / 375.0 *  CGRectGetWidth([UIScreen mainScreen].bounds)</span><br><span class="line">#define AUTO_HIGHT(number)   (number) / 667.0 *  CGRectGetHeight([UIScreen mainScreen].bounds)</span><br><span class="line"></span><br><span class="line">#define AUTO_WIDTH1080(number)   (number) / 540.0 *  CGRectGetWidth([UIScreen mainScreen].bounds)</span><br><span class="line">#define AUTO_HIGHT1920(number)   (number) / 960.0 *  CGRectGetHeight([UIScreen mainScreen].bounds)</span><br><span class="line">//当前版本</span><br><span class="line">#define FSystenVersion            ([[[UIDevice currentDevice] systemVersion] floatValue])</span><br><span class="line">#define AppVersion              ([[[NSBundle mainBundle] objectForInfoDictionaryKey:@&quot;CFBundleShortVersionString&quot;] floatValue])</span><br><span class="line"></span><br><span class="line">// 字符串去空格</span><br><span class="line">#define strTrimming(x) [x stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]]</span><br></pre></td></tr></table></figure><p>#颜色字号定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">#define COLORWITHRGB(r,g,b,a) [UIColor colorWithRed:r/255.0 green:g/255.0 blue:b/255.0 alpha:a]</span><br><span class="line">//主题色</span><br><span class="line">#define STATUS_BAR_COLOR [UIColor colorWithRed:255/255.0 green:56/255.0 blue:61/255.0 alpha:1]</span><br><span class="line">//#define TINY_COCLOR [UIColor colorWithRed:244/255.0 green:120/255.0 blue:0/255.0 alpha:1]</span><br><span class="line">#define TINY_COCLOR [UIColor colorWithRed:255/255.0 green:56/255.0 blue:61/255.0 alpha:1]</span><br><span class="line">#define TINY_LIGHT_COLOR UIColorFromRGB(0xff9b9e)</span><br><span class="line"></span><br><span class="line">#define BACKGROUNDCOLOR [UIColor colorWithRed:243/255.0 green:243/255.0 blue:243/255.0 alpha:1]</span><br><span class="line"></span><br><span class="line">#define RGBCOLOR(r,g,b) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:1]</span><br><span class="line">#define RGBACOLOR(r,g,b,a) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:(a)]</span><br><span class="line">#define ARC_COLOR RGBCOLOR(arc4random()%255, arc4random()%255, arc4random()%255)</span><br><span class="line">#define KdarkGayColor RGBCOLOR(50, 50, 50)//深灰</span><br><span class="line">#define KlightGayColor  RGBCOLOR(220, 220,220)//浅灰</span><br><span class="line">#define KtextGayColor UIColorFromRGB(0x616161)</span><br><span class="line">#define darkf4 UIColorFromRGB(0xf4f4f4)</span><br><span class="line">#define dark444 UIColorFromRGB(0x444444)</span><br><span class="line">#define dark999 UIColorFromRGB(0x999999)</span><br><span class="line">#define dark666 UIColorFromRGB(0x666666)</span><br><span class="line">#define darkf3f UIColorFromRGB(0xf3f3f3)</span><br><span class="line"></span><br><span class="line">#define FONT(x) [UIFont systemFontOfSize:x]</span><br><span class="line">#define FONT_B(x) [UIFont boldSystemFontOfSize:x]</span><br><span class="line"></span><br><span class="line">#define FONT_10   [UIFont systemFontOfSize:10]</span><br><span class="line">#define FONT_10_B [UIFont boldSystemFontOfSize:10]</span><br><span class="line"></span><br><span class="line">#define FONT_12   [UIFont systemFontOfSize:12]</span><br><span class="line">#define FONT_12_B [UIFont boldSystemFontOfSize:12]</span><br><span class="line"></span><br><span class="line">#define FONT_14   [UIFont systemFontOfSize:14]</span><br><span class="line">#define FONT_14_B [UIFont boldSystemFontOfSize:14]</span><br><span class="line"></span><br><span class="line">#define FONT_16   [UIFont systemFontOfSize:16]</span><br><span class="line">#define FONT_16_B [UIFont boldSystemFontOfSize:16]</span><br><span class="line"></span><br><span class="line">#define FONT_18   [UIFont systemFontOfSize:18]</span><br><span class="line">#define FONT_18_B [UIFont boldSystemFontOfSize:18]</span><br><span class="line">//适配字体</span><br><span class="line">#define SizeScale ((KeyWindow_Height &gt; 568) ? KeyWindow_Height/568 : 1)</span><br><span class="line">#define FONTNEW(x) [UIFont systemFontOfSize:x * SizeScale]</span><br><span class="line">#define FONTNEW_B(x) [UIFont boldSystemFontOfSize:x *SizeScale]</span><br><span class="line"></span><br><span class="line">#define FONTNEW_10   FONTNEW(10)</span><br><span class="line">#define FONTNEW_10_B FONTNEW_B(10)</span><br><span class="line"></span><br><span class="line">#define FONTNEW_12   FONTNEW(12)</span><br><span class="line">#define FONTNEW_12_B FONTNEW_B(12)</span><br><span class="line"></span><br><span class="line">#define FONTNEW_14   FONTNEW(14)</span><br><span class="line">#define FONTNEW_14_B FONTNEW_B(14)</span><br><span class="line"></span><br><span class="line">#define FONTNEW_16   FONTNEW(16)</span><br><span class="line">#define FONTNEW_16_B FONTNEW_B(16)</span><br><span class="line"></span><br><span class="line">#define FONTNEW_18   FONTNEW(18)</span><br><span class="line">#define FONTNEW_18_B FONTNEW_B(18)</span><br><span class="line"></span><br><span class="line">#define SizeScale1920 ((KeyWindow_Height &gt; 960) ? KeyWindow_Height/960 : 1)</span><br><span class="line">#define FONTNEW1080(x) if(iphone6Plus_5_5)&#123;return [UIFont systemFontOfSize:x * 1.15 / 3];&#125;</span><br><span class="line">#define FONTNEW_B1920(x) [UIFont boldSystemFontOfSize:x *SizeScale]</span><br><span class="line"></span><br><span class="line">//RGB颜色转换（16进制-&gt;10进制）</span><br><span class="line">#define UIColorFromRGB(rgbValue)    [UIColor colorWithRed:((float)((rgbValue &amp; 0xFF0000) &gt;&gt; 16))/255.0 green:((float)((rgbValue &amp; 0xFF00) &gt;&gt; 8))/255.0 blue:((float)(rgbValue &amp; 0xFF))/255.0 alpha:1.0]</span><br><span class="line"></span><br><span class="line">#define lightgrayColor  UIColorFromRGB(0xe8e8e8)</span><br><span class="line">#define mostlightgrayColor  UIColorFromRGB(0xf3f3f3)</span><br><span class="line">#define slivergrayColor  UIColorFromRGB(0xc0c0c0)</span><br><span class="line">#define darkgrayColor  UIColorFromRGB(0x444444)</span><br><span class="line">#define mostdarkgrayColor  UIColorFromRGB(0x999999)</span><br><span class="line">#define darkmiddleColor UIColorFromRGB(0x666666)</span><br><span class="line">#define bluemiddleColor UIColorFromRGB(0x00a0ec)</span><br><span class="line">#define grayCCCCC UIColorFromRGB(0xcccccc)</span><br><span class="line"></span><br><span class="line">#define LOADIMAGE(file) [[UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:file ofType:@&quot;png&quot;]] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]</span><br><span class="line">#define LOADIMAGECACHES(file) [UIImage imageNamed:file]</span><br><span class="line">#define PLACEHOLDER_IMAGE    LOADIMAGECACHES(@&quot;duoduo_gray&quot;)</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MVC的理解与运用总结</title>
      <link href="/2019/03/06/MVC%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E8%BF%90%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2019/03/06/MVC%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E8%BF%90%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>关于MVC是目前行业常用的设计模式，起源于SmallTalk,是许多计算机语言和架构都采用的设计模式，虽然有MVVC,MVP等其它优秀的设计模式，但是MVC依然是经典的模式，很多人可能会说MVC不够灵活，MVC会使项目臃肿，但那只是没有处理好而已。在我看来，没有绝对好的设计模式，而是在整个系统项目中怎么和系统的四层架构（即：表示层，业务逻辑层，数据持久层，信息系统层）一一对应起来。最经典的就像在不同型号的同一个App，只有表示层发生变化，而其它层不用发生改变，也就是只有View发生变化，Model层不发生改变。View里面不能包含业务逻辑的代码。</p><p>一个好的层次设计能够带来优化和开发的巨大便利，而所有代码只写在一个若几个文件不进行权责的区分必然会为后期的开发带来巨大的麻烦，读代码都要花费大半天的时间。因此设计模式显得如此重要。</p><p>MVC模式：<br>Model:保存应用数据状态，回应视图状态查询，处理应用业务逻辑，完成应用功能，将状态变化通知视图<br>View:为用户展示信息提供接口，通过视图向控制器发出请求，向模型发出数据查询<br>Controller:接收用户请求，更新模型数据，更新所对应视图状态响应用户请求，作为视图和模型的媒介，降低耦合度，权责清晰提高开发效率<br>其中Model和Controller之间的交互主要通过KVO来实现，也就是发布定阅模式，对应属性值是变化可以让Controller收到消息<br>View和Controller之间的交互主要通过代理委托，通知及代码块进行实现</p><p>##因此对于一个项目有几点要足够重视：  </p><ol><li>按照模块进行细分  </li><li>尽量不要把所有模块都要用的视图或弹框放在一个CommenView里面，这样可能的结果是这个公共类越来越臃肿。写成一个单独的模块，或者说单例去实现的方法做到专用要好得多。</li><li>所有的视图要继承基视图，导航栏要继承基导航栏，网络请求底层统一调用一个封装好的类。这样最大的好处在于当需求发生改变(导航条上加按钮)或者要统一进行设置时（Http改https）可以很方便的进行设置</li><li>使用Cocoapods去管理所有第三方要用过自己去添加，方便集成，更新和管理</li><li>重视对代码的重用编写公共类进行操作。</li></ol><p><a href="https://github.com/cooler112/iOSMVCTemple" target="_blank" rel="noopener">iOSMVCTemple是自己从项目中提取的框架</a>，集成了很多第三方库和类别，我自己也做了很多自定义，比如用户信息放到单例，封装好的BaseView,BaseNavigationController.主要目的是写成个好的框架不断完善。方便后期快速布置开发环境。<br><img src="/2019/03/06/MVC的理解与运用总结/1.png" alt=""></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>iOS_AlertController使用方法</title>
      <link href="/2019/03/06/iOS-AlertController%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2019/03/06/iOS-AlertController%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>###UIAlertController是iOS8引入的新特性，可以使用它代替AlertView或ActionSheet，主要方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;UIKit/UIViewController.h&gt;</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line">//定义每个选项的特性（默认、取消、红色标记按钮）</span><br><span class="line">typedef NS_ENUM(NSInteger, UIAlertActionStyle) &#123;</span><br><span class="line">    UIAlertActionStyleDefault = 0,</span><br><span class="line">    UIAlertActionStyleCancel,</span><br><span class="line">    UIAlertActionStyleDestructive</span><br><span class="line">&#125; NS_ENUM_AVAILABLE_IOS(8_0);</span><br><span class="line">//定义弹出框样式</span><br><span class="line">typedef NS_ENUM(NSInteger, UIAlertControllerStyle) &#123;</span><br><span class="line">    UIAlertControllerStyleActionSheet = 0,</span><br><span class="line">    UIAlertControllerStyleAlert</span><br><span class="line">&#125; NS_ENUM_AVAILABLE_IOS(8_0);</span><br><span class="line"></span><br><span class="line">NS_CLASS_AVAILABLE_IOS(8_0) @interface UIAlertAction : NSObject &lt;NSCopying&gt;</span><br><span class="line">//初始化每个按钮选项</span><br><span class="line">+ (instancetype)actionWithTitle:(nullable NSString *)title style:(UIAlertActionStyle)style handler:(void (^ __nullable)(UIAlertAction *action))handler;</span><br><span class="line"></span><br><span class="line">@property (nullable, nonatomic, readonly) NSString *title;</span><br><span class="line">@property (nonatomic, readonly) UIAlertActionStyle style;</span><br><span class="line">@property (nonatomic, getter=isEnabled) BOOL enabled;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NS_CLASS_AVAILABLE_IOS(8_0) @interface UIAlertController : UIViewController</span><br><span class="line">//初始化弹出框</span><br><span class="line">+ (instancetype)alertControllerWithTitle:(nullable NSString *)title message:(nullable NSString *)message preferredStyle:(UIAlertControllerStyle)preferredStyle;</span><br><span class="line"></span><br><span class="line">- (void)addAction:(UIAlertAction *)action;</span><br><span class="line">@property (nonatomic, readonly) NSArray&lt;UIAlertAction *&gt; *actions;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong, nullable) UIAlertAction *preferredAction NS_AVAILABLE_IOS(9_0);</span><br><span class="line">- (void)addTextFieldWithConfigurationHandler:(void (^ __nullable)(UITextField *textField))configurationHandler;</span><br><span class="line">@property (nullable, nonatomic, readonly) NSArray&lt;UITextField *&gt; *textFields;</span><br><span class="line"></span><br><span class="line">@property (nullable, nonatomic, copy) NSString *title;</span><br><span class="line">@property (nullable, nonatomic, copy) NSString *message;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, readonly) UIAlertControllerStyle preferredStyle;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure></p><p>添加方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">-(void)alertControllerShow&#123;</span><br><span class="line">    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@&quot;好分期&quot; message:@&quot;非常好的投资平台&quot; preferredStyle:UIAlertControllerStyleAlert];</span><br><span class="line">    [alertController addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) &#123;</span><br><span class="line">        NSLog(@&quot;%@&quot;,textField.text);</span><br><span class="line">        textField.placeholder = @&quot;addSomeText&quot;;</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@&quot;取消&quot; style:UIAlertActionStyleCancel handler:nil];</span><br><span class="line">    [alertController addAction:cancelAction];</span><br><span class="line">    </span><br><span class="line">    UIAlertAction *signAction = [UIAlertAction actionWithTitle:@&quot;签到&quot; style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;];</span><br><span class="line">    [alertController addAction:signAction];</span><br><span class="line">    </span><br><span class="line">    UIAlertAction *changePasswordAction = [UIAlertAction actionWithTitle:@&quot;修改密码&quot; style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) &#123;</span><br><span class="line">    &#125;];</span><br><span class="line">    [alertController addAction:changePasswordAction];</span><br><span class="line">    </span><br><span class="line">    NSString *cachesPath = [CacheOperation getCachesPath];///获得缓存路径</span><br><span class="line">    float cacheSize = [CacheOperation getCacheSizeAtPath:cachesPath];///获得缓存大小</span><br><span class="line">    if (cacheSize &gt; 10.0) &#123;///如果缓存大于10M则显示清除缓存按钮</span><br><span class="line">        UIAlertAction *clearCacheAction = [UIAlertAction actionWithTitle:[NSString stringWithFormat:@&quot;清除缓存 - %.2fM&quot;, cacheSize] style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) &#123;</span><br><span class="line">            [CacheOperation clearCacheAtPath:cachesPath];///清除缓存</span><br><span class="line">        &#125;];</span><br><span class="line">        [alertController addAction:clearCacheAction];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    UIAlertAction *exitLoginAction = [UIAlertAction actionWithTitle:@&quot;退出登录&quot; style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) &#123;</span><br><span class="line">        //UIAlertActionStyleDestructive：毁灭性按钮，红色标注</span><br><span class="line"></span><br><span class="line">    &#125;];</span><br><span class="line">    [alertController addAction:exitLoginAction];</span><br><span class="line">    </span><br><span class="line">    [self presentViewController:alertController animated:YES completion:nil];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###不同于UIAlertView,ActionSheet要去设置委托，代码块方式直接使用，非常方便</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试被问到的问题</title>
      <link href="/2019/03/06/iOS%E9%9D%A2%E8%AF%95%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2019/03/06/iOS%E9%9D%A2%E8%AF%95%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>近期面试问答汇总</p><p>###@property(nonatomic,getter=isOn) BOOL on; 中的getter = isOn的含义？<br>答：<br>如果这个property是 BOOL on， 那么Objc默认创建的 setter 为： - (void)on:(BOOL)setOn { } getter 为： - (BOOL)on { return on; } 但是你可以手动更改 setter 和 getter 方法，就像上面的： getter = xxxOn 的话， getter 就变为： - (BOOL)xxxOn { return on; }<br>同样setter也是一样的道理</p><p>###什么是内存管理机制<br>所谓内存管理就是所有权机制，对象被拥有的计算量不为0，才得以存在，不然被销毁。<br>alloc:分配内存，引用计算数为1<br>Copy:创造该对象复本，对该副本拥有并计数为1<br>Retain:对持有对象计数+1，当进行setter时会先判断该对象是否与原来一致<br>Release:销毁对象<br>autoRealease:系统自动在未来某个时段计数器-1<br>Strong:ARC引入属性，与retain一样，对对象持有，也就是在自身销毁同时，所持有对象也会销毁，可能会造成死锁。<br>Weak:ARC引入属性，只是引用对象并不将计数加1，前该对象被销毁后指针为空。</p><p>###比较WebView与UKWebView之间的区别</p><ol><li>在性能、稳定性、功能方面有很大提升（最直观的体现就是加载网页是占用的内存，模拟器加载百度与开源中国网站时，WKWebView占用23M，而UIWebView占用85M）；</li><li>允许JavaScript的Nitro库加载并使用（UIWebView中限制）；</li><li>支持了更多的HTML5特性；</li><li>高达60fps的滚动刷新率以及内置手势；</li><li>将UIWebViewDelegate与UIWebView重构成了14类与3个协议（查看苹果官方文档）<br>window.webkit.messageHandlers.closeMe.postMessage(null);<br>//OC注册供JS调用的方法<br>[[_webView configuration].userContentController addScriptMessageHandler:self name:@”closeMe”];<br>//OC在JS调用方法做的处理</li></ol><ul><li>(void)userContentController:(WKUserContentController <em>)userContentController didReceiveScriptMessage:(WKScriptMessage </em>)message<br>{<br>NSLog(@”JS 调用了 %@ 方法，传回参数 %@”,message.name,message.body);<br>}<br>//javaScriptString是JS方法名，completionHandler是异步回调block<br>[self.webView evaluateJavaScript:javaScriptString completionHandler:completionHandler];</li></ul><p>###数据库操作知道吗，你使用了哪些第三方的，有什么优势<br>苹果自带有coreData:CoreData是一个模型层的技术，也是一种持久化技术（数据库），它能将模型对象的状态持久化到磁盘里,其底层也是数据库sqlite的存储。<br>一般用第三方FMDB来自己sqlite的操作，为了保证线程安全，FMDB提供方便快捷的FMDatabaseQueue类<br>FMDatabaseQueue的创建 FMDatabaseQueue <em>queue = [FMDatabaseQueue databaseQueueWithPath:path];<br>简单使用 [queue inDatabase:^(FMDatabase </em>db) { [db executeUpdate:@”INSERT INTO t_student(name) VALUES (?)”, @”Jack”]; [db executeUpdate:@”INSERT INTO t_student(name) VALUES (?)”, @”Rose”]; [db executeUpdate:@”INSERT INTO t_student(name) VALUES (?)”, @”Jim”];<br>以队列的方法添加操作，保证对数据库的操作不会出错。</p><p>###在OC中这些声明的作用，对对应的成员变量进行权限声明<br>@protected 该类和所有子类中的方法可以直接访问这样的变量。<br>@private 该类中的方法可以访问，子类不可以访问。<br>@public   可以被所有的类访问<br>@package 对framework而言内部使用，对外private，适合第三方静态库类</p><p>###为什么Block 要用Copy属性<br>Block一开始放在栈上的，而代码块内的数据会用到本地变量，只有Copy会才能放到堆上，而且本地变量要使用弱引用，retail不加1 </p><p>###为什么Delegate 不能用Strong,可以用weak,assign？<br>如果使用Strong,当两个对像互相把对方作为代理时，项目一个释放会引起另一个的释放，造成列循环。ARC引入strong和weak两个内存管理属性（以及<strong>strong, </strong>weak, <strong>unsafe_unretained, </strong>autoreleasing四个变量生命期qualifier）之后，对象的delegate成员变量就面临着对内存管理属性的选择：weak or assign<br>众所周知，weak属性的变量是不为其所属对象持有的，并且在该变量被销毁之后，此weak变量的值会自动被赋值为nil。而assign属性一般是对C基本数据类型成员变量的声明，当然也可以用在对象类型成员变量上，只是其代表的意义只是单纯地拷贝所赋值变量的值。即如果对某assign成员变量B赋值某对象A的指针，则此B只是简单地保存此指针的值，且并不持有对象A，也就意味着如果A被销毁，则B就指向了一个已经被销毁的对象，如果再对其发送消息会引发崩溃。<br>但在delegate成员变量这个细分领域，我们即可以用weak，又可以用assign。因为在几乎所有场景下，delegate所指向的对象C的生存期都是覆盖了delegate成员变量本身所在的对象D的生存期的，所以，在D的生存期内，C所使用的D的指针都是有效的，所以这个时候使用assign是没有关系的。</p><p>###什么是NSLoop?用在哪些地方</p><ul><li><p>RunLoop，是多线程的法宝，即一个线程一次只能执行一个任务，执行完任务后就会退出线程。主线程执行完即时任务时会继续等待接收事件而不退出。非主线程通常来说就是为了执行某一任务的，执行完毕就需要归还资源，因此默认是不运行RunLoop的；</p></li><li><p>每一个线程都有其对应的RunLoop，只是默认只有主线程的RunLoop是启动的，其它子线程的RunLoop默认是不启动的，若要启动则需要手动启动；</p></li><li><p>在一个单独的线程中，如果需要在处理完某个任务后不退出，继续等待接收事件，则需要启用RunLoop；</p></li><li><p>NSRunLoop提供了一个添加NSTimer的方法，可以指定Mode，如果要让任何情况下都回调，则需要设置Mode为Common模式；</p></li><li><p>实质上，对于子线程的runloop默认是不存在的，因为苹果采用了懒加载的方式。如果我们没有手动调用[NSRunLoop currentRunLoop]的话，就不会去查询是否存在当前线程的RunLoop，也就不会去加载，更不会创建。</p></li></ul><p>###说一说你项目用到的混合加密及信息通信安全机制<br>每次App启动先生成一个随机的DES密钥A，然后加密要传输的字段后保存在字典中，将DES密钥用AES公钥加密B后保存在字典中。后台用私钥解密出DES密钥后再用来解密传输字段，最后得出原始数据并保存该加密B与对应的DES密钥A<br>后面使用HTTPS进行通信加密，使用公证的证书最为安全。</p><p>###如何保证在数据传输中不被重放攻击<br>以时间戳作为传参，后台协商响应时间差范围，参考三次握手协议两边商量序列号，当发过来的序列号为服务器也存在的序列号则丢弃。</p><p>###四种设计模式：单例模式，MVC，委托和观察者模式<br>单例：UIApplication，UserDefault,UIAccelerometer,NSNotification,NSFileManager,NSBundle<br>委托：委托对象主要对控件对象的操作和状态作出响应，数据源委托是必须实现的<br>观察者模式四个组成部分：<br>抽象主题：观察者容器，添加移除及向观察者发送通知<br>抽象观察者：是一个协议，可以更新对象<br>具体观察者：具体实现<br>具体主题：SubScript协议实现<br>具体应用:通知与KVO（对象属性发生变化时通知给观察者对象）</p><p>###MVC模式：<br>Model:保存应用数据状态，回应视图状态查询，处理应用业务逻辑，完成应用功能，将状态变化通知视图<br>View:为用户展示信息提供接口，通过视图向控制器发出请求，向模型发出数据查询<br>Controller:接收用户请求，更新模型数据，更新所对应视图状态响应用户请求，作为视图和模型的媒介，降低耦合度，权责清晰提高开发效率</p><p>###Iphone 与iPad区别控件：iPad独有UIPoperViewController UISpiltController</p><p>###分层架构设计：<br>表示层：界面显示<br>业务逻辑层：处理表示层提供数据并返回结果到表示层进行显示<br>数据持久层：进行本地或网络访问<br>信息系统层，存在本地或网络的信息</p><p>###Textkit为程序员提供文字排版和渲染功能，主要实现图文混排的功能</p><p>###数据持久化方式<br>沙箱目录<br>属性列表<br>对象归档(将对象进行序列化成为文件)<br>sqlite<br>CoreData(对象关系映射技术，也是SQLite)</p><p>###<br>XML是一种自描述的数据交换格式，两种读取方式：SAX（从上到下，只读，速度快）和DOM （节点方式可更改，要先读完后才能操作）系统自带NSXMLParse,第三方GDataXML<br>Json:轻量级数据交换格式，自带NSJsonSerliazation，最快，处理相当麻烦，第三方JsonKit，SBJson</p><p>###HTTP与HTTPS的区别<br>HTTP:80<br>HTTPS:超文本文件传输安全协议：443   SSL：40位关键字 RC4流加密算法</p><p>###Git操作<br>Git添加到工作区：git add<br>Git提交到master:  git commit -m “”<br>Git上传到目标库：git push –set-upstream iOSMVCTemple master<br>Git添加远程目标：git remote add name gitAddress</p><p>###封装，继承，多态的意义<br>封装：对名隐藏细节，保证数据不被破坏，使代码模块化<br>继承：代码重用，方便子类扩展<br>多态：允许用父类指针指向子类，因为子类实现对父类方法的重写，所以对同一消息有不同响应<br>前两者实现对代码的重用，最后个实现对接口的重用。</p><p>###浅复制和深复制的区别？<br>浅层复制：只复制指向对象的指针，而不复制引用对象本身。对于要进行拷贝的对象，自身要实现NSCoding协议 -initWithZone:(NSZone)Zone</p><p>###类别优劣？<br>category 可以在不获悉，不改变原来代码的情况下往里面添加新的方法，只能添加，不能删除修改。<br>并且如果类别和原来类中的方法产生名称冲突，则类别将覆盖原来的方法，因为类别具有更高的优先级。</p><h3 id="KVO与-KVC"><a href="#KVO与-KVC" class="headerlink" title="KVO与 KVC"></a>KVO与 KVC</h3><p>kvc:键 - 值编码是一种间接访问对象的属性使用字符串来标识属性，而不是通过调用存取方法，直接或通过实例变量访问的机制。<br>很多情况下可以简化程序代码。apple文档其实给了一个很好的例子。<br>kvo:键值观察机制，当被观察的某一属性变化可进行响应</p><p>###为什么说oc是动态运行时语言？<br>答案：多态。 主要是将数据类型的确定由编译时，推迟到了运行时。<br>简单来说，运行时机制使我们直到运行时才去决定一个对象的类别，以及调用该类别对象指定方法。</p><p>###说说推送的实现原理<br>当我们选择接收远程远程推送的时候，系统将应用BundleId和UUID发送到苹果自己的APNS服务器进行唯一设备和唯一App的注册，服务器进行注册后返回Tocken作为访问令牌，用户服务器通过推送证书和得到的Tocken向APNS请求发送推送消息，APNS服务器收到请求后进行列表查找然后向指定设备发送消息。</p><p>###单例的核心是什么<br>保证实例对象只被初始化一次，并在整个程序周期中反复使用</p><p>###讲讲网络接口编程是什么<br>好好学习后再写</p><p>###什么是多线程<br>针对计算机多核设计的一套并发操作，多个任务同时进行，目前iOS上的多线程操作包括:NSThread,NSOperation,GCD,其中苹果推荐使用GCD</p><p>###App的性能优化可以从哪方面入手<br>正确重用Cell，图片缓存，避免加载大的Xib文件，不要把主线程放到block里面，用好多线程，选择合理的方式进行数据的持久化，使用ARC,autoPool<br>View尽量使用不透明的，使用gzip获取大量数据，解压工作放在后台，尽量避免格式转换一定要用可以使用单例，重用大开销对象，，使用好Cache,重用延时加载Views,处理内存警告，避免反复使用或处理数据，使用wkWeb加载数据</p><p>###SDWebImage的实现原理<br>主要运用来加载网络图片，根据网络请求先去内存查找对应的图片，然后去硬盘（如果设置的话），如果都没有去网络下载放到缓存，下次直接本地加载,使用NSCache作为缓存，异步操作，在回调中处理结果，使用NSOperation回调结果。</p><p>Jsonkit(Json格式转换器)<br>MJRefresh:刷新工具<br>MJExtention:数模转换<br>Masonry：约束布局<br>FMDB:sqlite数据器操作封闭<br>UShare:友盟第三方分享工具<br>ShareSDK:Mob第三方分享<br>JPush:极光推送<br>Open SSl:加密库<br>微信支付SDK<br>支付宝SDK<br>SVProgressAssistant:加载框<br>MBProgressAssistant:加载框<br>ImageBrowerVC:图片展示器<br>IQKeyboardManager:文本输入自己调整屏幕<br>DQAlertView:应用Model弹框<br>BlocksKit:代码块方式实现控件消息响应<br>KYVedioPlayer:第三方播放器<br>UIView+RSAdditions：视图定位器<br>UITableView+FDTemplateLayoutCell：TableViewCell高度自动计算器<br>KAlertView:弹框<br>AFNetworking:第三方网络库<br>BaiduMap:百度地图库<br>SDScrollView：图片轮播<br>LBXScanView:二维码扫描<br>RongIMKit:融云通信<br>AliyunOSSiOS:阿里云数据上传库</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>item的简单高效使用</title>
      <link href="/2019/03/06/item%E7%9A%84%E7%AE%80%E5%8D%95%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/03/06/item%E7%9A%84%E7%AE%80%E5%8D%95%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在项目开发中我们往往需要进行模型设计，为一个对象配置多个属性，以前的方法前后端都需要分别进行设置，往往还容易出错，重复编写，实际上谷歌早就提供了一套成熟可行的方法可以统一开发中的模型，那就是：<br><a href="https://developers.google.com/protocol-buffers/docs/proto?hl=zh-cn" target="_blank" rel="noopener">Protobuf</a></p><p>先在Github下载<a href="https://github.com/protocolbuffers/protobuf" target="_blank" rel="noopener">源代码</a><br>下载后通过命令行进行安装：</p><pre><code>1 $ ./autogen.sh 2 $ ./configure 3 $ make 4 $ make check 5 $ sudo make install</code></pre><p>安装耗时较多，完成最后一步后可以看到命令行中多了protoc这个命令，主要的作用是把proto源文件转化为目标文件（包括Java\python\oc\go）中的类型定义文件。<br>主要命令示例：</p><pre><code>//DIR为路径protoc --proto_path=$DIR --objc_out=$DIR  Define.proto --cpp_out=OUT_DIR           Generate C++ header and source. --csharp_out=OUT_DIR        Generate C# source file. --java_out=OUT_DIR          Generate Java source file. --js_out=OUT_DIR            Generate JavaScript source. --objc_out=OUT_DIR          Generate Objective C header and source. --php_out=OUT_DIR           Generate PHP source file. --python_out=OUT_DIR        Generate Python source file. --ruby_out=OUT_DIR          Generate Ruby source file.</code></pre><p>以OC为例，转换成功后会生成.h和.m文件，把生成后的放入项目中，在项目Pod中引入：<br>  pod ‘Protobuf’, ‘~&gt; 3.4.0’</p><p>如果手动加入需要添加:-fno-objc-arc  因为该类不支<a href="https://blog.csdn.net/u010019717/article/details/44830601持ARC" target="_blank" rel="noopener">https://blog.csdn.net/u010019717/article/details/44830601持ARC</a><br>配置好会在项目中就可以直接使用该类了，特别方便。</p><p>关于proto书写格式</p><pre><code>syntax = &quot;proto2&quot;;package XHR.Group;import &quot;XHR.BaseDefine.proto&quot;;option optimize_for = LITE_RUNTIME;// CID_GROUP_REQ_GROUP_LIST             0x0301      获取群列表message XHRGroupListReq{        required string uid = 1;        required uint64 latest_update_time = 2;}// CID_GROUP_RSP_GROUP_LIST             0x0302   message XHRGroupListRsp{        required XHR.BaseDefine.ResultType result_code = 1;    required string result_string = 2;    required string uid = 3;    repeated XHR.BaseDefine.GroupInfo group_list = 4;    required uint64 latest_update_time = 5;}</code></pre><p>参考文章：<br><a href="https://blog.csdn.net/u010019717/article/details/44830573" target="_blank" rel="noopener">Protocol Buffers(Protobuf)开发者指南—概览</a><br><a href="https://blog.csdn.net/u011518120/article/details/54604615#JSONMapping" target="_blank" rel="noopener">Protobuf3语言指南</a><br> <a href="https://www.cnblogs.com/NeilZhang/p/8410589.html" target="_blank" rel="noopener">Protobuf 从入门到实战</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Chrom+Vimium实现全键盘操作</title>
      <link href="/2019/03/06/Chrom-Vimium%E5%AE%9E%E7%8E%B0%E5%85%A8%E9%94%AE%E7%9B%98%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/03/06/Chrom-Vimium%E5%AE%9E%E7%8E%B0%E5%85%A8%E9%94%AE%E7%9B%98%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>不用移动，确定，点击，全键盘搞定，不过部分文本选中这块要使用鼠标进行选中，当习惯键盘操作后会发现非常的快捷 </p><p>####Tab and window shortcuts窗口标签快捷键<br>| 快捷键组合                                                   | 功能                     | 说明               |      |<br>| ———————————————————— | ———————— | —————— | —- |<br>| Open a new window                                            | ⌘ + n                    | 新开窗口           |      |<br>| Open a new window in Incognito mode                          | ⌘ + Shift + n            | 新建窗口匿名模式   |      |<br>| Open a new tab, and jump to it                               | ⌘ + t                    | 进入新建标签       |      |<br>| Reopen the last closed tab, and jump to it                   | ⌘ + Shift + t            | 进入上次关闭标签   |      |<br>| Jump to the next open tab                                    | ⌘ + Option + Right arrow | 标签切换向后       |      |<br>| Jump to the previous open tab                                | ⌘ + Option + Left arrow  | 标签切换向前       |      |<br>| Jump to a specific tab                                       | ⌘ + 1 through ⌘ + 8      | 进入指定标签       |      |<br>| Jump to the last tab                                         | ⌘ + 9                    | 进入最后一个标签   |      |<br>| Open the previous page in your browsing history for the current tab | ⌘ + [ or ⌘ + Left arrow  | 向前               |      |<br>| Open the next page in your browsing history for the current tab | ⌘ + ] or ⌘ + Right arrow | 向后               |      |<br>| Closes the current tab or pop-up                             | ⌘ + w                    | 关闭标签或弹出     |      |<br>| Closes the current window                                    | ⌘ + Shift + w            | 关闭当前窗口       |      |<br>| Minimize the window                                          | ⌘ + m                    | 最小化Chrome       |      |<br>| Hide Google Chrome                                           | ⌘ + h                    | 隐藏               |      |<br>| Quit Google Chrome                                           | ⌘ + q                    | 关闭所有Chrome窗口 |      |</p><p>####Google Chrome feature shortcuts工具快捷键<br>| 功能                                               | 快捷键组合         | 说明           |      |<br>| ————————————————– | —————— | ————– | —- |<br>| Show or hide the Bookmarks Bar                     | ⌘ + Shift + b      | 显示隐藏书签   |      |<br>| Open the Bookmark Manager                          | ⌘ + Option + b     | 书签栏管理     |      |<br>| Open the Settings page in a new tab                | ⌘ + ,              | 打开设置页面   |      |<br>| Open the History page in a new tab                 | ⌘ + y              | 打开历史页面   |      |<br>| Open the Downloads page in a new tab               | ⌘ + Shift + j      | 打开下载页面   |      |<br>| Open the Find Bar to search the current page       | ⌘ + f              | 当前查找       |      |<br>| Jump to the next match to your Find Bar search     | ⌘ + g              | 查找下一个     |      |<br>| Jump to the previous match to your Find Bar search | ⌘ + Shift + g      | 想找前一个     |      |<br>| When Find Bar is open, search for selected text    | ⌘ + e              | 查找选中字段   |      |<br>| Open Developer Tools                               | ⌘ + Option + i     | 打开开发者工具 |      |<br>| Open the Clear Browsing Data options               | ⌘ + Shift + Delete | 清除记录       |      |<br>| Log in as a different user or browse as a Guest    | ⌘ + Shift + m      | 登录           |      |</p><p>####Address bar shortcuts<br>| 功能                    | 快捷键组合 | 说明         |      |<br>| ———————– | ———- | ———— | —- |<br>| Jump to the Address Bar | ⌘ + l      | 跳转到地址栏 |      |</p><p>###Webpage shortcuts<br>| 功能                                                       | 快捷键组合            | 说明                   |      |<br>| ———————————————————- | ——————— | ———————- | —- |<br>| Open options to print the current page                     | ⌘ + p                 | 打印                   |      |<br>| Open options to save the current page                      | ⌘ + s                 | 保存                   |      |<br>| Reload your current page            ⌘ + r                  | 重新加载              |                        |      |<br>| Reload your current page, ignoring cached content          | ⌘ + Shift + r         | 忽略缓存重新加载       |      |<br>| Stop the page loading                                      | Esc                   | 停止加载               |      |<br>| Browse clickable items moving forward                      | Tab                   | 切换                   |      |<br>| Browse clickable items moving backward                     | Shift + Tab           | 向后切换               |      |<br>| Open a file from your computer in Google Chrome            | ⌘ + o + Select a file | 浏览器打开             |      |<br>| Display non-editable HTML source code for the current page | ⌘ + Option + u        | 显示源码               |      |<br>| Open the JavaScript Console                                | ⌘ + Option + j        | 打开脚本编辑器         |      |<br>| Save your current webpage as a bookmark                    | ⌘ + d                 | 保存为书签             |      |<br>| Save all open tabs as bookmarks in a new folder            | ⌘ + Shift + d         | 保存所有打开页面为书签 |      |<br>| Turn full-screen mode on or off                            | ⌘ + Ctrl + f          | 全屏                   |      |<br>| Make everything on the page bigger                         | ⌘ and +               | 放大                   |      |<br>| Make everything on the page smaller                        | ⌘ and -               | 缩小                   |      |<br>| Return everything on the page to the default size          | ⌘ + 0                 | 还原                   |      |<br>| Scroll down a webpage, a screen at a time                  | Space                 | 向下                   |      |<br>| Scroll up a webpage, a screen at a time                    | Shift + Space         | 向上                   |      |<br>| Search the web                                             | ⌘ + Option + f        | 搜索                   |      |<br>| Open your home page in the current tab                     | ⌘ + Shift + h         | 打开首页               |      |</p><p>##Vimnum<br>作为Chrome的强大快捷器插件，实现快速浏览访问</p><p><img src="http://upload-images.jianshu.io/upload_images/4767765-f7b06159d95572d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screen Shot 2017-03-22 at 15.13.40.png"></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>使用protobuf统一创建项目类</title>
      <link href="/2019/03/06/%E4%BD%BF%E7%94%A8protobuf%E7%BB%9F%E4%B8%80%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%B1%BB/"/>
      <url>/2019/03/06/%E4%BD%BF%E7%94%A8protobuf%E7%BB%9F%E4%B8%80%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>在项目开发中我们往往需要进行模型设计，为一个对象配置多个属性，以前的方法前后端都需要分别进行设置，往往还容易出错，重复编写，实际上谷歌早就提供了一套成熟可行的方法可以统一开发中的模型，那就是：<br><a href="https://developers.google.com/protocol-buffers/docs/proto?hl=zh-cn" target="_blank" rel="noopener">Protobuf</a></p><p>先在Github下载<a href="https://github.com/protocolbuffers/protobuf" target="_blank" rel="noopener">源代码</a><br>下载后通过命令行进行安装：</p><pre><code>1 $ ./autogen.sh 2 $ ./configure 3 $ make 4 $ make check 5 $ sudo make install</code></pre><p>安装耗时较多，完成最后一步后可以看到命令行中多了protoc这个命令，主要的作用是把proto源文件转化为目标文件（包括Java\python\oc\go）中的类型定义文件。<br>主要命令示例：</p><pre><code>//DIR为路径protoc --proto_path=$DIR --objc_out=$DIR  Define.proto --cpp_out=OUT_DIR           Generate C++ header and source. --csharp_out=OUT_DIR        Generate C# source file. --java_out=OUT_DIR          Generate Java source file. --js_out=OUT_DIR            Generate JavaScript source. --objc_out=OUT_DIR          Generate Objective C header and source. --php_out=OUT_DIR           Generate PHP source file. --python_out=OUT_DIR        Generate Python source file. --ruby_out=OUT_DIR          Generate Ruby source file.</code></pre><p>以OC为例，转换成功后会生成.h和.m文件，把生成后的放入项目中，在项目Pod中引入：<br>  pod ‘Protobuf’, ‘~&gt; 3.4.0’</p><p>如果手动加入需要添加:-fno-objc-arc  因为该类不支<a href="https://blog.csdn.net/u010019717/article/details/44830601持ARC" target="_blank" rel="noopener">https://blog.csdn.net/u010019717/article/details/44830601持ARC</a><br>配置好会在项目中就可以直接使用该类了，特别方便。</p><p>关于proto书写格式</p><pre><code>syntax = &quot;proto2&quot;;package XHR.Group;import &quot;XHR.BaseDefine.proto&quot;;option optimize_for = LITE_RUNTIME;// CID_GROUP_REQ_GROUP_LIST             0x0301      获取群列表message XHRGroupListReq{        required string uid = 1;        required uint64 latest_update_time = 2;}// CID_GROUP_RSP_GROUP_LIST             0x0302   message XHRGroupListRsp{        required XHR.BaseDefine.ResultType result_code = 1;    required string result_string = 2;    required string uid = 3;    repeated XHR.BaseDefine.GroupInfo group_list = 4;    required uint64 latest_update_time = 5;}</code></pre><p>参考文章：<br><a href="https://blog.csdn.net/u010019717/article/details/44830573" target="_blank" rel="noopener">Protocol Buffers(Protobuf)开发者指南—概览</a><br><a href="https://blog.csdn.net/u011518120/article/details/54604615#JSONMapping" target="_blank" rel="noopener">Protobuf3语言指南</a><br> <a href="https://www.cnblogs.com/NeilZhang/p/8410589.html" target="_blank" rel="noopener">Protobuf 从入门到实战</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>vim操作</title>
      <link href="/2019/03/06/vim%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/03/06/vim%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>###命令模式<br>光标移动            hjkl<br>移动到当前行首    ++    0    ^(非空首部)<br>移动到上行首        —<br>移动到下行首        Enter<br>移动到文章首        gg<br>移动到文章未        G</p><p>向上翻页            Control + b<br>向下翻页            Control + f<br>屏幕非空首        H<br>屏幕非空尾        L<br>屏幕中间非空        M</p><p>移至次一个单词首    w    W(忽略标点)<br>移至次一个单词尾    e    E<br>移至前一个单词首    b    B</p><p>设置行号            set number<br>跳转到指定行        :n    nG</p><p>句首                (<br>句尾                ）<br>段首                {<br>段尾                ]<br>在括号上匹配        %</p><p>输入模式：<br>在单词首输入        i    insert<br>在行首输入        I<br>在单词尾输入        a    append<br>在行尾输入        A<br>在后插入一行输入    o    open<br>在前插入一行输入    O<br>连接后一行        J    Joint</p><p>删除命令<br>删除单行            dd<br>删除游标所在字元    x<br>删除游标所在前字元 X<br>删除至文章首        dgg<br>删除至文章尾        dG<br>删除至段尾        d$<br>删除至行首        d0 d^(包含游标字元)</p><p>替换命令<br>r                替换当前游标字<br>R                进入替换模式Esc返回<br>s                插入式替换内容<br>cc                替换当前行<br>c0,c^            替换到行首<br>c$                替换到行尾<br>cw                替换英文字母<br>u                返回上一步<br>U                回复当前行操作<br>Control + r        向前一步</p><p>数目操作命令<br>5dd                删除5行<br>8yy                复制8行<br>3r                重复3次输入字元<br>3x                删除3字元<br>5J                连接5行<br>2i hello ESC        重复两次hello<br>6G  :6            跳转到第6行</p><p>复制命令<br>yy                复制当行<br>2yy                复制两行<br>yw                复制word<br>y2w                复制两个字元<br>y0    y^            复制到行首<br>y$                复制到行尾<br>yG                复制到文尾<br>ygg                复制到文首<br>P                粘贴在游标前<br>p                粘贴游标后<br>Ayy                复制a缓存区    </p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>homeBrew</title>
      <link href="/2019/03/06/homeBrew/"/>
      <url>/2019/03/06/homeBrew/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>RVM管理Ruby</title>
      <link href="/2019/03/06/RVM%E7%AE%A1%E7%90%86Ruby/"/>
      <url>/2019/03/06/RVM%E7%AE%A1%E7%90%86Ruby/</url>
      
        <content type="html"><![CDATA[<hr><p>title: RVM管理Ruby<br>date: 2017-03-20 16:03:50</p><h2 id="tags-命令"><a href="#tags-命令" class="headerlink" title="tags: 命令"></a>tags: 命令</h2><p>###安装RVM</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3</span><br><span class="line">\curl -sSL https://get.rvm.io | bash -s stable</span><br></pre></td></tr></table></figure><p>###使用rvm管理Ruby </p><p>列出已知的 Ruby 版本  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm list known</span><br></pre></td></tr></table></figure><p>安装一个 Ruby 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm install 2.2.0 --disable-binary</span><br></pre></td></tr></table></figure><p>这里安装了最新的 2.2.0, rvm list known 列表里面的都可以拿来安装。<br>切换 Ruby 版本  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm use 2.2.0</span><br></pre></td></tr></table></figure><p>如果想设置为默认版本，这样一来以后新打开的控制台默认的 Ruby 就是这个版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm use 2.2.0 --default</span><br></pre></td></tr></table></figure><p>查询已经安装的ruby<br>rvm list<br>卸载一个已安装版本  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm remove 1.8.7</span><br></pre></td></tr></table></figure><p>###gemset 的使用<br>RVM 不仅可以提供一个多 Ruby 版本共存的环境，还可以根据项目管理不同的 gemset.<br>gemset 可以理解为是一个独立的虚拟 Gem 环境，每一个 gemset 都是相互独立的。<br>比如你有两个项目，一个是 Rails 2.3 一个是 rails3. gemset 可以帮你便捷的建立两套 Gem 开发环境，并且方便的切换。<br>gemset 是附加在 Ruby 语言版本下面的，例如你用了 1.9.2, 建立了一个叫 rails3 的 gemset,当切换到 1.8.7 的时候，rails3 这个 gemset 并不存在。<br>建立 gemset  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rvm use 1.8.7  </span><br><span class="line">rvm gemset create rails23</span><br></pre></td></tr></table></figure><p>然后可以设定已建立的 gemset 做为当前环境<br>use 可以用来切换语言或者 gemset<br>前提是他们已经被安装(或者建立)。并可以在 list 命令中看到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rvm use 1.8.7</span><br><span class="line">rvm use 1.8.7@rails23</span><br></pre></td></tr></table></figure><p>然后所有安装的 Gem 都是安装在这个 gemset 之下。<br>列出当前 Ruby 的 gemset</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm gemset list</span><br></pre></td></tr></table></figure><p>清空 gemset 中的 Gem<br>如果你想清空一个 gemset 的所有 Gem, 想重新安装所有 Gem，可以这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm gemset empty 1.8.7@rails23</span><br></pre></td></tr></table></figure><p>删除一个 gemset</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm gemset delete rails2-3</span><br></pre></td></tr></table></figure><p>项目自动加载 gemset<br>RVM 还可以自动加载 gemset。 例如我们有一个 Rails 3.1.3 项目，需要 1.9.3 版本 Ruby，整个流程可以这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rvm install 1.9.3</span><br><span class="line">rvm use 1.9.3</span><br><span class="line">rvm gemset create rails313</span><br><span class="line">rvm use 1.9.3@rails313</span><br></pre></td></tr></table></figure><p>下面进入到项目目录，建立一个 .rvmrc 文件。<br>在这个文件里可以很简单的加一个命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm use 1.9.3@rails313</span><br></pre></td></tr></table></figure><p>然后无论你当前 Ruby 设置是什么，cd 到这个项目的时候，RVM 会帮你加载 Ruby 1.9.3 和 rails313 gemset.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac常用快捷键</title>
      <link href="/2019/03/06/%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2019/03/06/%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p>###通用命令<br>Command + F            搜索<br>Command + ,            属性<br>Command + 方向        切换<br>Command + W            关闭<br>Command + O            打开<br>Command + A            全选<br>Command + S            保存<br>Command + C            剪切<br>Command + V            粘贴<br>Command + T            打开新标签<br>Command + Delete        删除<br>Command + Control + F    进入全屏框</p><p>###finder常用快捷键<br>Command + shift + N    新建文件夹<br>Command + N            打开文件夹<br>Command + L            查看信息<br>Command + delete        删除文件夹<br>Command + O            打开文件<br>Command + T            页内新开界面<br>Command + L            创建快捷方式<br>Command + ,            打开偏好设置<br>Command + H            隐藏当前Finder<br>Command + Shift + H    隐藏其它Finder<br>Command + W            关闭当前文件夹<br>Command + F            查找文件<br>Command + J            图标调整<br>Command + D            复制<br>Command + `            Finder切换<br>Command +    +            放大<br>Command + -            缩小<br>快速跳转：<br><img src="/2019/03/06/常用快捷键/6.png" alt=""></p><p>###Iterm常用快捷键<br><img src="/2019/03/06/常用快捷键/7.png" alt=""><br>Command + D            分屏横<br>Command + Shift + D    分屏竖<br>Command + N            新建窗口<br>Option  + Command + E 浏览所有窗口<br>Option + Command + Number  切换窗口</p><p>###MacDown快捷键<br>Control + Command + F    全屏<br>Shift + Command + S        另存为<br>Control + Command + Space     表情输入<br>Control + Command + F    进入全屏<br>Command +    M                放大缩小  </p><p>###Alfred常用操作命令<br>系统命令<br>ScreeenSaver<br>trash                         垃圾箱<br>emptytrash                 清空回收站<br>logout<br>sleep<br>sleepdisplays                关闭屏幕<br>lock<br>restart<br>shutdown<br>quit                         关闭某应用<br>forcequit                 强行关闭<br>quitall</p><p>###Chrome<br>Command + Shift + Delete     清除浏览记录<br>Command + Shift + N              匿名浏览<br>Command + Shift + T            重新打开关闭标签<br>Command + Number             进行标签切换<br>Command + Control + F        进入全屏<br>Command + Option + F        浏览器搜索<br>Command + Shift + H            首页<br>Command + Shift + J            进入下载页面<br>Command + ]                    前进<br>Command + [                    后退<br>Command + D                    添加书签<br>Command + Option + B        书签管理器<br>Command + Shift + 左右        书签移动<br>Command + Shift + W            关闭窗口  </p><p>###Note<br>Command + Shift + L            添加列表<br>Command + Shift + A            添加文件<br>Command + L                    添加链接<br>Command + Shift + N            新建文件夹<br>Command + Shift + Option + V    匹配样式粘贴<br>Command + 1                    显示附件浏览器<br>Command + Shift + T            标题样式<br>Command + Shift + H            小标题<br>Command + Shift + B            正文  </p><p>###Xcode<br>Command + T                    新建标签<br>Command + W                    关闭标签<br>Command + Control + W            关闭当前<br>Command + N                    新建文件<br>Command + Shift + N            新建工程  </p><p>Command + Shift + F            全局搜索<br>Control + 1,2,3,4,5                导航栏不同极切换<br>Command + 1,2,3,4,5,6            工具导航切换<br>Command + 0                    隐藏工具导航器<br>Command + Option + 1,2,3,4        左边工具栏切换<br>Command + Option + Control        左边下部工具切换<br>Command + Option + 0            隐藏工具面板<br>Control     + 6                    当前文件类跳转<br>Command + Shift + J            快速定位到当前文档导航区<br>Command + Shift + Open        快速打开项目文件<br>Command + Control + Arrow        前后切换，.h.m切换  </p><p>Command + B                    编译<br>Command + R                    运行<br>Command + .                    停止<br>F6                            单步<br>F7                            跳入<br>F8                            继续  </p><p>Command + L                    跳转行<br>Command + Shift + K            清除工程  </p><p>Command + Option + =            更新约束<br>Command + Option + []            上下移动代码<br>Command + Option + &lt;&gt;        隐藏展开代码<br>Command + Control + E            全局修改代码<br>Command + Shift + Y            打开控件台  </p><p>Command + up/down            跳转到头或尾<br>Command + delete                删除光标所在行前代码<br>Option     + delete                删除光标前一个单词<br>Command + left/right            移动光标到行前或行尾  </p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Jenv管理Java</title>
      <link href="/2019/03/06/Jenv%E7%AE%A1%E7%90%86Java/"/>
      <url>/2019/03/06/Jenv%E7%AE%A1%E7%90%86Java/</url>
      
        <content type="html"><![CDATA[<p>什么是Jenv：<a href="http://jenv.io/" target="_blank" rel="noopener">http://jenv.io/</a><br>jenv is Java environment manager, and it is a clone of RVM for Java. jenv can manage parallel versions of Java development kits on any Unix based system. It provides a convenient command line interface for installing, switching, removing and listing Candidates.</p><p>也就是各类JAVA环境的安装配置，如果手工去作是一件很麻烦的事情，但是有了这个工具后，简单命令即可实现快速配置。</p><p>Why jenv？</p><ul><li>Easy to manage Java version, such as 1.6, 1.7, 1.8 and 1.9</li><li>Easy to install Java tools, such as Ant, Maven, Tomcat etc.</li><li>Easy to manage candidate’s version such as install new version or uninstall the old one.</li><li>Directory is standard, and friendly to IDE</li><li>Easy to extend. You can setup your own jenv on your company to manage development environment.</li><li>Easy to backup your env.</li><li>Bash completion support. Use TAB to complete command name, candidate name and version.<br>为什么使用呢？很清楚<br>方便切换JDK环境，方便安装各类Java工具<br>方便更新包管理，界面友好、方便拓展备份、自动命令行补充等等</li></ul><p>下载步骤：<br>$ curl -L -s get.jenv.io | bash</p><p>$ mkdir -p $HOME/.jenv/candidates/java</p><p>配置Java环境：<br>从官网下载各类JAVA的JDK：<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br>安装后添加链接：<br>ln -s /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home ~/.jenv/candidates/java/1.8.0_151<br>启用该环境<br>Jenv default java 1.8.0_151 即可</p><p>安装第三方如Maven<br>$ jenv list maven<br>Final install the candidate with the version:<br>$ jenv install maven 3.3.9<br>In your terminal, input mvn –version to check the installation.</p><p>通过jenv -h可以知道很多常用的命令<br>可以使用jenv all查看所有支持的第三方</p><p>灵活的安装方式<br>Install candidates in other ways<br>Install from local folder:<br>$ jenv install java 1.8.0_71 /user/local/jdk-1.8.0_71<br>Install from git repository:<br> ​$ jenv install spike 0.0.1 <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:linux-china/groovy_scripts.git</p><p>方便的更新<br>How to sync candidates information with the repository<br>jenv stores the repository information with offline mode, please use following command to update repository information.<br>$ jenv repo update</p><p>How to update jenv<br>Please use selfupdate command to get last version.<br>$ jenv selfupdate</p><p>jenvrc support<br>jenvrc is jenv setup file which contains candidate and the version as following:<br>java=1.8.0_71<br>maven=3.3.9<br>After you enter this directory, jenv will setup environment automatically.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git操作</title>
      <link href="/2019/03/06/git%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/03/06/git%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>#重要性说明<br>Git作为目前项目版本管理的工具，其先进性和便捷性不言而喻，所以一定要深入掌握才行，这样对以后的管理非常方便。主要实现的功能</p><ul><li>个人或团队开发项目管理</li><li>项目版本恢复或指定版本打包</li><li>最近才经历过的用cocopod打包自己的插件作为私有库要用到tag标记版本号</li><li>目前Jenkins通过git源代码提取来进行打包</li><li>iOS个人开发的各种第三方库的引入</li></ul><p>#重要性补充说明</p><ul><li>使用码云进行私有库管理，可以创建组织和公司</li><li>复制Github上优秀的项目</li><li>公司GitLab项目维护管理</li></ul><p>#Git的通用操作</p><p>##Git工具命令安装下载</p><pre><code>brew install git //Mac安装    yum install git-core//CentOSapt-get install git//Ubuntu</code></pre><p>##Git克隆Git库的办法是</p><pre><code>git clone &lt;#库地址&gt;     库地址包括有HTTPS的和SSH的ssh://diaoyu@120.40.160.80:2222/home/Product/fishing.githttps://github.com/cooler112/Cooler</code></pre><p>##自建Git库</p><pre><code>git init  &lt;仓库名称,以.git结尾规范&gt;git init -bare &lt;仓库名称&gt; //创建裸仓库，没有工作区间，防止有人登录服务器去改文件</code></pre><p>##忽略提交的部分文件</p><pre><code>##以JAVA项目为例target/!.mvn/wrapper/maven-wrapper.jar### STS ###.apt_generated.classpath.factorypath.project.settings.springBeans.sts4-cache### IntelliJ IDEA ###.idea*.iws*.iml*.ipr### NetBeans ###nbproject/private/build/nbbuild/dist/nbdist/.nb-gradle/</code></pre><p><strong><em>以下为忽略规则</em></strong></p><pre><code># 此为注释 – 将被 Git 忽略# 忽略所有 .a 结尾的文件*.a# 但 lib.a 除外!lib.a# 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO/TODO# 忽略 build/ 目录下的所有文件build/# 会忽略 doc/notes.txt 但不包括 doc/server/arch.txtdoc/*.txt# 忽略 doc/ 目录下所有扩展名为 txt 的文件doc/**/*.txt</code></pre><p>##从拷贝到提交单人简单操作</p><pre><code>git add *  git add *  添加到缓存区git commit -m “”  提交git remote add origin &lt;仓库名称&gt;git push --set-upstream origin master  //直接提交到远程仓库或git push -u origin master //功能同上</code></pre><p>##撤消功能的使用：reset,checkout,–amend</p><pre><code>##已经commit 添加备注后发现还需要更改，更改完成后调用可以修改备注内容，push时只算作一次git commit —amend##将Add的文件从暂存区撤回到工作区git reset filename##将工作区的文件恢复到初始状态git checkout filename##回恢到某次提交git reset --hard ******//操作之前先处理好未提交文件git fsck --lost-found //在.git/lost-found找到只添加未提交的文件集git reflog//查看提交记录</code></pre><p>##远端仓库的操作git remote<br>    git remote //列出所有<br>    git remote show &lt;分支名&gt;//查看状态<br>    git remote add &lt;分支名称&gt;  &lt;分支地址&gt;<br>    git remove rename //改名，本地也会一一对应<br>    git remote rm &lt;分支名&gt;  //某个分支不再维护或不再贡献<br>    git pull   &lt;分支名,默认master&gt;//自动合并远端与目前的对应分支</p><p>  ##标签操作<br>标签是在commit 过后才进行的操作，在提交的时候需要指定分支和标签号才后有作用，标签相当于某一提交操作的快照</p><pre><code>git tag //简单标签git tag -a &quot;0.0.1&quot; -m &quot; &lt;标签内容&gt;git tag -a 0.0.1 &lt;某次提交编号&gt;git push origin 0.0.1  //标签生效</code></pre><p> ##分支操作<br>分支主要用于开发新版本而保证正式版本不受干扰或者Bug修复，主要操作是合并,在分支合并前清空暂存区</p><pre><code>git branch //查看所有，-v 查看详情 --merged 查看合并分支 --unmerged查看未合并git branch &lt;新分支名&gt;git checkout &lt;分支名&gt;切换分支git checkout -b &lt;新分支名&gt;//分支并切换git merge &lt;分支名&gt;//进行合并 git branch -d //删除分支git checkout -b awesomeBranch origin/awesomebranch   //将远程分支拷贝到本地新建分支git checkout --track origin/awesomebranch//同上</code></pre><p>   git push origin :awesomebranch//删除远程分支，比如已经合并到master   </p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>成为更好的程序员要做到的10个方法</title>
      <link href="/2019/03/06/%E6%88%90%E4%B8%BA%E6%9B%B4%E5%A5%BD%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E5%81%9A%E5%88%B0%E7%9A%8410%E4%B8%AA%E6%96%B9%E6%B3%95/"/>
      <url>/2019/03/06/%E6%88%90%E4%B8%BA%E6%9B%B4%E5%A5%BD%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E5%81%9A%E5%88%B0%E7%9A%8410%E4%B8%AA%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<img src="/2019/03/06/成为更好的程序员要做到的10个方法/1.png" title="image"><p>优秀程序员要做到的10件事情：</p><p>1、看别人的代码</p><p>2、让别人看你的代码</p><p>3、写新代码之前解决遗留的问题</p><p>4、学习新技术</p><p>5、保持简洁</p><p>6、以写博客的方式讲述你做的项目、写的代码、学到的东西</p><p>7、对开源作出贡献</p><p>8、修下它，而不是用暴力</p><p>9、增加代码%1的覆盖率（说的是重用吗）</p><p>10、经常活动不要一直坐着</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程思想 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Skills</title>
      <link href="/2019/03/06/Skills/"/>
      <url>/2019/03/06/Skills/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>程序员修炼之道-从小工到专家读书感悟</title>
      <link href="/2019/03/06/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93-%E4%BB%8E%E5%B0%8F%E5%B7%A5%E5%88%B0%E4%B8%93%E5%AE%B6%E8%AF%BB%E4%B9%A6%E6%84%9F%E6%82%9F/"/>
      <url>/2019/03/06/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93-%E4%BB%8E%E5%B0%8F%E5%B7%A5%E5%88%B0%E4%B8%93%E5%AE%B6%E8%AF%BB%E4%B9%A6%E6%84%9F%E6%82%9F/</url>
      
        <content type="html"><![CDATA[<img src="/2019/03/06/程序员修炼之道-从小工到专家读书感悟/1.jpg"><p>这是一本程序员思想各级，意识更新的书籍，软件不仅仅是一个工程项目，而更应该是一个严格的艺术品，我们需要更多的科学的方法，前辈的经验进行构造。</p><p>在软件开发中有很有红线，比如破窗理论，出现了质量差的代码维护很麻烦，项目会越来越糟糕</p><p>石头汤：软件的设计不断的增加的，但你心中要有个明确的框架，清晰的想法才能面对接下来要做的事情</p><p>煮青蛙：软件设计一定要规范，不然自己是怎么把程序写死的自己都不知道</p><p>正交性设计：各部分应该弱相关，最好的没有关系，不需要进行联运设计是最好的，写羞怯的代码非常重要。解耦设计，对外尽量影响内部的细节，外内模块化设计，元程序编程，方便后台的更换设计。</p><p>不要去重复自己，利用代码是很好的办法，不要去偷懒放弃长久的规范设计，不能靠巧合编程，去拼凑代码，这样是很不利的，其它使用一门技术不要用太多试错的方式去完成，而是有很熟悉的理解后再使用能够避免很多不必要的错误</p><p>做一个progmatic程序员要了解算法，降低计算的复杂维度，另外需要对以前不合适的代码进行重构，怎样减少优化，而不是去增加东西，写易于测试的代码，更方便开发打出Bug</p><p>做一名实效程序员重要的是关心自己的技艺，开发出漂亮的软件，不然用生命去编程是为什么呢？</p><p>必须熟练精通一门语言：C++</p><p>熟练一种开发工具：Xcode,Visual Studio</p><p>熟练一种纯文本工具：Vim</p><p>熟练进行源码控制：Git</p><p>另外像书中一样为自己定下学习目标：</p><p>每年至少一门编程语言，每三个月至少一本技术书籍，</p><p>学习IEEE 的文章和讨论的话题，学习Unix程序艺术、Effective C++等优秀的技术书籍</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>如何记住成都地铁新增线路-讲故事</title>
      <link href="/2019/03/06/%E5%A6%82%E4%BD%95%E8%AE%B0%E4%BD%8F%E6%88%90%E9%83%BD%E5%9C%B0%E9%93%81%E6%96%B0%E5%A2%9E%E7%BA%BF%E8%B7%AF-%E8%AE%B2%E6%95%85%E4%BA%8B/"/>
      <url>/2019/03/06/%E5%A6%82%E4%BD%95%E8%AE%B0%E4%BD%8F%E6%88%90%E9%83%BD%E5%9C%B0%E9%93%81%E6%96%B0%E5%A2%9E%E7%BA%BF%E8%B7%AF-%E8%AE%B2%E6%95%85%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<img src="/2019/03/06/如何记住成都地铁新增线路-讲故事/1.jpg"><p>关于成都地铁路线，现在看起来或许已经有点复杂了因为从最开始的一二号线一直不断的蓝颜或者背身到现在添加了3号线4号线以及7号线10号线等众多的路径，那么如何更好的利用方法来记住他们除了我们之前掌握的那些固有的地点相对于其他几个拓展的地方，通过地理位置来记忆以及通过故事场景来关联记忆的方法，在整个有趣生动的过程中，自然而然的记下了对应的站点的名称。</p><p>1号线根据地理位置，相当于整条线的话，从华阳这边，然后的话就想象成在中国地图上从往东走，然后到福州这个地方再往下走。到达广州</p><p>1号线的南面非常的有意思相当于他是从四合那边进行了分差，一面往广都五送您走里面网华阳这边走华阳这边的话，由于是新修的地铁站，到现在还没通，但是有一个非常好紧好记的场景，记忆，那就是华阳武昌香山段家山，武汉宁波广州兴隆湖科学城</p><p>2号线可以想象成是说犀浦是一个环境不错热情好客的地方，犀浦是一个有河有草的地方，那么他有一条金洲路，金州哪儿有一个有金科大道金开大道是用来迎宾的，迎宾的话需要查合阳邀请宾客一起品尝蜀汉这边的白果白果是一味中药材，能够通慧根让人民到达天府</p><p>我这个故事大家就可以发现2号线至天府广场以东北的地方，实际上它的主要路径就是金州路金科大道茶店子羊西立交迎宾路一品天下蜀汉路白果林中医大省医院通惠门人民公园天府广场</p><p>2号线你懂得，这边讲的是惠王在成都执政的事情，从成渝立交这边开始，惠王主要就在洪河这边行政，下班吃面翻几个山坡就能够到达自己领域的边界，这个边界有书房正好他的路非常的平坦的，能够到达他所住的驿站啊？这个皇帝太寒碜了</p><p>所以我们可以看到从成都东站成渝立交过后的路分别惠王陵红河行政学院大面镇连山坡界牌书房龙平路龙泉驿</p><p>那3号线的话讲的是万盛是一个非常不得了的地方，出凤凰</p><p>说的是啊，万圣这个地方有一条河，这个荷兰上面有洋妞，然后凤凰的话也在这个上面居住经常性的南面话被熏涛出现的五彩十色的这个光，而且还有泉水涌出来，因此我们就把南面这条路叫做凤凰大街，然后呢？这个地方还有马场，马上是古迹呀，他是非，但是非遗产的，那么说这个凤凰啊，就通过这个桥，难道中八个地方中白了是在成都的西边，而且那种办那个和要不亲将</p><p>那3号线的话，他的被东北方向分别是讲了一个红军老革命的英勇事迹</p><p>说的是这个红军的前锋，他姓李有点驼，然后这个人啦，它不仅有觉醒技能，他能够召唤动物特别是我们的国宝还能够召唤这个军医治疗植物，还能够召唤寺庙里面的和尚在这个河场里面的人以及锦水里面的人团结在一起，还能够让马超早上在钟楼那儿挖石油开医学院，这是根据地理位置来记的，相当于整条线的话，从华阳这边，然后的话就想象成在中国地图上从往东走，然后到福州这个地方再往下走。到达广州</p><p>1号线的南面非常的有意思相当于他是从四合那边进行了分差，一面往广都五送您走里面网华阳这边走华阳这边的话，由于是新修的地铁站，到现在还没通，但是有一个非常好紧好记的场景，记忆，那就是华阳武昌段家山，武汉宁波广州兴隆湖科学城</p><p>2号线可以想象成是说犀浦是一个环境不错热情好客的地方，犀浦是一个有河有草的地方，那么他有一条金洲路，金州哪儿有一个有金科大道金开大道是用来迎宾的，迎宾的话需要查合阳邀请宾客一起品尝蜀汉这边的白果白果是一味中药材，能够通慧根让人民到达天府</p><p>我这个故事大家就可以发现2号线至天府广场以东北的地方，实际上它的主要路径就是金州路金科大道茶店子羊西立交迎宾路一品天下蜀汉路白果林中医大省医院通惠门人民公园天府广场</p><p>2号线你懂得，这边讲的是惠王在成都执政的事情，从成渝立交这边开始，惠王主要就在洪河这边行政，下班吃面翻几个山坡就能够到达自己领域的边界，这个边界有书房正好他的路非常的平坦的，能够到达他所住的驿站啊？这个皇帝太寒碜了😬</p><p>所以我们可以看到从成都东站成渝立交过后的路分别惠王陵红河行政学院大面镇连山坡界牌书房龙平路龙泉驿</p><p>那3号线的话讲的是万盛是一个非常不得了的地方，出凤凰</p><p>说的是啊，万圣这个地方有一条河，河边有杨柳，然后凤凰的话也在这个上面居住，所以南面被熏的发光，而且还有泉水涌出来，因此人多了有街道嘛，还有马场，马上是古迹呀，马是非遗产的，过了桥就来到河中间的中大这条河是清江啊恰好在成都的西面而且是文化人居多的地方而且这些人很有钱当然杜甫除外</p><p>因此说4号线的左面的顺序一次就是万盛杨柳河凤溪河南熏大道泉涌凤凰大街马场吧非遗博物管蔡桥中坝成都西站清江西路文化宫西南财大杜甫草堂</p><p>那3号线的话，他的被东北方向分别是讲了一个红军老革命的英勇事迹</p><p>说的是这个红军的前锋，他姓李，然后这个人骑四匹马，它不仅有觉醒技能，他能够召唤动物特别是我们的国宝还能够召唤这个军医治疗植物，还能够召唤寺庙里面的和尚在这个河场里面的人以及锦河里面的人团结在一起，还能够让马超早上在钟楼那儿挖石油开医学院</p><p>所以你说呀，这样的人奇葩不奇葩吗</p><p>所以说3号线周边从市二医院站一直往北走分别是行路前锋路李家沱驷马桥昭觉寺动物园熊猫大道军区总医院植物金华寺三河场锦水河团结镇马超西路钟楼石油大学成都医学院</p><p>那第十号线路东南面，主要讲的是双流这个地方出口将才</p><p>双流这个地方往西面走三公里有一个广场，这个广场呢，再往东面走就一直是上升的，仿佛跟迎春了一样而且啊，还能够到达航天大道，通过龙桥看到两条凤凰这些都是有寓意的，说是一个会武功的年轻人，后面能变成一个会武功的王爷所以到川藏那边去发财</p><p>所以说地名呢，就是双流西站你爸双流广场东升路迎春路航天大道龙桥路双凤路母亲路5号路川藏路一直到太平园衣冠冢省体育馆这是根据地理位置来记的，相当于整条线的话，从华阳这边，然后的话就想象成在中国地图上从往东走，然后到福州这个地方再往下走。到达广州</p><p>一号线的南面非常的有意思相当于他是从四合那边进行了分差，一面往广都五送您走里面网华阳这边走华阳这边的话，由于是新修的地铁站，到现在还没通，但是有一个非常好紧好记的场景，记忆，那就是华阳武昌段家山，武汉宁波广州兴隆湖科学城</p><p>2号线可以想象成是说犀浦是一个环境不错热情好客的地方，犀浦是一个有河有草的地方，那么他有一条金洲路，金州哪儿有一个有金科大道金开大道是用来迎宾的，迎宾的话需要查合阳邀请宾客一起品尝蜀汉这边的白果白果是一味中药材，能够通慧根让人民到达天府</p><p>我这个故事大家就可以发现2号线至天府广场以东北的地方，实际上它的主要路径就是金州路金科大道茶店子羊西立交迎宾路一品天下蜀汉路白果林中医大省医院通惠门人民公园天府广场</p><p>2号线你懂得，这边讲的是惠王在成都执政的事情，从成渝立交这边开始，惠王主要就在洪河这边行政，下班吃面翻几个山坡就能够到达自己领域的边界，这个边界有书房正好他的路非常的平坦的，能够到达他所住的驿站啊？这个皇帝太寒碜了</p><p>所以我们可以看到从成都东站成渝立交过后的路分别惠王陵红河行政学院大面镇连山坡界牌书房龙平路龙泉驿</p><p>那3号线的话讲的是万盛是一个非常不得了的地方，出凤凰</p><p>说的是啊，万圣这个地方有一条河，这个荷兰上面有洋妞，然后凤凰的话也在这个上面居住经常性的南面话被熏涛出现的五彩十色的这个光，而且还有泉水涌出来，因此我们就把南面这条路叫做凤凰大街，然后呢？这个地方还有马场，马上是古迹呀，他是非，但是非遗产的，那么说这个凤凰啊，就通过这个桥，难道中八个地方中白了是在成都的西边，而且那种办那个和要不亲将</p><p>那3号线的话，他的被东北方向分别是讲了一个红军老革命的英勇事迹</p><p>说的是这个红军的前锋，他姓李有点驼，然后这个人啦，它不仅有觉醒技能，他能够召唤动物特别是我们的国宝还能够召唤这个军医治疗植物，还能够召唤寺庙里面的和尚在这个河场里面的人以及锦水里面的人团结在一起，还能够让马超早上在钟楼那儿挖石油开医学院，这是根据地理位置来记的，相当于整条线的话，从华阳这边，然后的话就想象成在中国地图上从往东走，然后到福州这个地方再往下走。到达广州</p><p>一号线的南面非常的有意思相当于他是从四合那边进行了分差，一面往广都五送您走里面网华阳这边走华阳这边的话，由于是新修的地铁站，到现在还没通，但是有一个非常好紧好记的场景，记忆，那就是华阳武昌段家山，武汉宁波广州兴隆湖科学城</p><p>2号线可以想象成是说犀浦是一个环境不错热情好客的地方，犀浦是一个有河有草的地方，那么他有一条金洲路，金州哪儿有一个有金科大道金开大道是用来迎宾的，迎宾的话需要查合阳邀请宾客一起品尝蜀汉这边的白果白果是一味中药材，能够通慧根让人民到达天府</p><p>我这个故事大家就可以发现2号线至天府广场以东北的地方，实际上它的主要路径就是金州路金科大道茶店子羊西立交迎宾路一品天下蜀汉路白果林中医大省医院通惠门人民公园天府广场</p><p>2号线你懂得，这边讲的是惠王在成都执政的事情，从成渝立交这边开始，惠王主要就在洪河这边行政，下班吃面翻几个山坡就能够到达自己领域的边界，这个边界有书房正好他的路非常的平坦的，能够到达他所住的驿站啊？这个皇帝太寒碜了</p><p>所以我们可以看到从成都东站成渝立交过后的路分别惠王陵红河行政学院大面镇连山坡界牌书房龙平路龙泉驿</p><p>那3号线的话讲的是万盛是一个非常不得了的地方，出凤凰</p><p>说的是啊，万圣这个地方有一条河，河边有杨柳，然后凤凰的话也在这个上面居住，所以南面被熏的发光，而且还有泉水涌出来，因此人多了有街道嘛，还有马场，马上是古迹呀，马是非遗产的，过了桥就来到河中间的中大这条河是清江啊恰好在成都的西面而且是文化人居多的地方而且这些人很有钱当然杜甫除外</p><p>因此说4号线的左面的顺序一次就是万盛杨柳河凤溪河南熏大道泉涌凤凰大街马场吧非遗博物管蔡桥中坝成都西站清江西路文化宫西南财大杜甫草堂</p><p>那3号线的话，他的被东北方向分别是讲了一个红军老革命的英勇事迹</p><p>说的是这个红军的前锋，他姓李，然后这个人骑四匹马，它不仅有觉醒技能，他能够召唤动物特别是我们的国宝还能够召唤这个军医治疗植物，还能够召唤寺庙里面的和尚在这个河场里面的人以及锦河里面的人团结在一起，还能够让马超早上在钟楼那儿挖石油开医学院</p><p>所以你说呀，这样的人奇葩不奇葩吗</p><p>所以说3号线周边从市二医院站一直往北走分别是行路前锋路李家沱驷马桥昭觉寺动物园熊猫大道军区总医院植物金华寺三河场锦水河团结镇马超西路钟楼石油大学成都医学院</p><p>那第十号线路东南面，主要讲的是双流这个地方出口将才</p><p>双流这个地方往西面走三公里有一个广场，这个广场呢，再往东面走就一直是上升的，仿佛跟迎春了一样而且啊，还能够到达航天大道，通过龙桥看到两条凤凰这些都是有寓意的，说是一个会武功的年轻人，后面能变成一个会武功的王爷所以到川藏那边去发财</p><p>所以说地名呢，就是双流西站三里坝双流广场东升路迎春路航天大道龙桥路双凤路母亲路5号路川藏路一直到太平园红牌楼高升桥衣冠冢深体育馆</p><p>那第七号线的话，我发现就更有意思了，因为从西北角的一到东北角的二到东南角的宾客西南角的神仙等等，都是非常有趣的内容</p><p>在品一口茶的时候，旁边有个花照，在西南有九里宽的堤坝，在西边呢，有两条路火车北站有四匹马都是青颜色，在这个地方的有八个村庄两座桥很多的理工男有崔家店还有和她成对的槐树店都是为了迎接成都东的客人来大饱眼福的因为压的地方有虱子和狮子的大学，然后读完有漂亮的琉璃，最开始13块瓦片一直在南站南面的时候有很多的神仙，他们都是得道高人，保卫太平了，当然还有武侯非常厉害，他有龙爪不仅保卫了文化，还保卫了金子</p><p>所以说7号线的整条路径是一品天下茶店子花壁路西南大学九里提北二站火车北站驷马桥金府路八里庄二仙桥成都理工崔家店双电路槐树店迎晖路成都东大观狮子山师范大学琉璃路三瓦窑火车南站神仙树高朋大道太平园武侯大道龙爪路文化宫金沙博物馆</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>成都嗨帮App构想</title>
      <link href="/2019/03/06/%E6%88%90%E9%83%BD%E5%97%A8%E5%B8%AEApp%E6%9E%84%E6%83%B3/"/>
      <url>/2019/03/06/%E6%88%90%E9%83%BD%E5%97%A8%E5%B8%AEApp%E6%9E%84%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p>主要用于年轻人交友游玩，解决青年人周未在家宅，上面发布各类活动聚会，周未不空虚，不冷寂寞，考虑到手机操作才是主流，结合开源的wordress和已有的iOS技术，逐步实现App化</p><img src="/2019/03/06/成都嗨帮App构想/2.png">]]></content>
      
      
      
        <tags>
            
            <tag> 创意软件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于技术实验室网站的创建设想</title>
      <link href="/2019/03/06/%E5%85%B3%E4%BA%8E%E6%8A%80%E6%9C%AF%E5%AE%9E%E9%AA%8C%E5%AE%A4%E7%BD%91%E7%AB%99%E7%9A%84%E5%88%9B%E5%BB%BA%E8%AE%BE%E6%83%B3/"/>
      <url>/2019/03/06/%E5%85%B3%E4%BA%8E%E6%8A%80%E6%9C%AF%E5%AE%9E%E9%AA%8C%E5%AE%A4%E7%BD%91%E7%AB%99%E7%9A%84%E5%88%9B%E5%BB%BA%E8%AE%BE%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<img src="/2019/03/06/关于技术实验室网站的创建设想/1.jpg"><p>初衷：这个社会都很浮躁，那么如何做好坚持的自己，保持清心寡欲呢？除了内心要足够强大的克制自己的贪欲外，更是要找到和你频率相近的人。也就是一群志同道合的小伙伴。现在叫做社群，一个你可以融入的圈子。比如我最近想提高自己的开发技术，但是获取有用的信息知识面的能力有限，所以可以找多个一起搞这方面技术的朋友来共同提高啊，于是我想到了大家一起分享自己的技术主立章，规定在某个时段要分享自己有价值的内容供大学学习交流，另外为了使更多的人关注和参与进来，我们可以建设一个网站用于技术交流，进而我们搭建博客平台。原来WordPress并没有我们想像的那么复杂，几步轻松建站的同时我们可以创建多个账号共同发表自己的技术在这个平台上。随着后面影响力的逐步扩大，可以所广告链接进来像麦芒实验室<a href="http://www.awnlab.com/" target="_blank" rel="noopener">http://www.awnlab.com/</a>一个。最后形成一个技术社区。</p><p>这样做甚少有三个好处：</p><ol><li>给大家展示自己技术的机会和交流的机会，在这个过程中不断提高自己的开发技术</li></ol><p>2.去学习了解平台运营的模式，网站建设的方法</p><p>3.通过后期的流量变现让大家看到自已分享的价值，提高大家的积极性</p><p>另外还可以去探索搜索引擎优化SEO，及广告技术的接入，运营管理，宣传吸粉提高影响力，因此是件任重到远但是趣味十足的事情。</p><p>这不仅是个实验室，也是实战练习的地方，还是去实现价值的地方。</p><p>目前需要进行建设的地方：</p><p>域名：申请中的域名:coolester.top,如果觉得有不错没被占用的域名可以提出来进行购买。</p><p>网站名称：根据初衷来进行扩展取名</p><p>关于赢利模式：前期作为大家技术分享成长的平台，同时研究广告的不反感接入。后期要求高质量的技术文章，让用户为内容付费。</p><p>关于发展规划：先网站做好，后面接入App客户端（有开放的第三方控件可能较方便的使用接入）后面逐步形成影响力。</p><p>其它方面还没有想好，上面提的可以大家一起讨论优化。</p><p>总结:想像很美好，但是往往迈出第一步很难，更可贵的是找到黄金搭挡，强力CP或者志同道合的小团队就可以产生强大的影响力。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 创意软件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>好分期</title>
      <link href="/2019/03/06/haofenqi/"/>
      <url>/2019/03/06/haofenqi/</url>
      
        <content type="html"><![CDATA[<h1 id="好分期后台管理iOS端维护要点总结："><a href="#好分期后台管理iOS端维护要点总结：" class="headerlink" title="好分期后台管理iOS端维护要点总结："></a>好分期后台管理iOS端维护要点总结：</h1><img src="/2019/03/06/haofenqi/1.png"><p>项目概况：主要为后台审核人员操作手机端操作，已经有人开发得差不多了，所以我的工作主要是维护，在维护中学到了些新东西，总结下</p><p>好分期后台管理iOS端开发总结：<br><strong>标准化开发，明确你每句代码的意图</strong></p><p>在前人做了详细备注的基础下，代码一看就懂，没有丝毫入坑的感觉，数据的收发非常的规范，而且后期的扩展相对轻松，不经感叹做好项目代码记录是规范化备注是多么重要的一件事情，不过也不一定是每句代码都 要说明 点什么，除非你是新手第一次接手项目。另外发现几个稍微有点欠妥的地方，一是把网络请求接口直接写在项目代码里面不分层虽然方便了，但是后台如果要统一改接口名称 要一个个去找，不是很方便 。二是搜索这个控件在取消的时候并没进行重新请求（已经修改）。界面全部采用TableView作为基础在Cell上布局控件，这种做法让我耳目一新，但是模块化的效果好很明显。不过重复控件太多，有些可以通过Cell重用实现的。还有就是在加载的时候如果网络出现问题，用户只能等待，这样的体验不是很好，这点也是我以后写代码要注意的地方。这款App主要的功能作用是显示数据，复杂的计算和操作后台都处理好了，所以项目并不算大。维护起来也很轻松</p><p><strong>键盘弹出界面自动移动防止遮挡</strong></p><pre><code>///IQKeyboardManager:自动处理键盘事件的第三方库​    IQKeyboardManager *manager = [IQKeyboardManager sharedManager];​    manager.enable = YES;//控制整个功能是否启用​    manager.shouldResignOnTouchOutside = YES;//控制点击背景是否收起键盘​    manager.shouldToolbarUsesTextFieldTintColor = YES;//控制键盘上的工具条文字颜色是否用户自定义​    manager.enableAutoToolbar = NO;//控制是否显示键盘上的工具条​    manager.preventShowingBottomBlankSpace = NO;//防止IQKeyboardManager让rootview上滑过度,默认是YES</code></pre><p><strong>IPS**</strong>不用第三方可以手动进行采取上传到服务器，用于点对点推送：** </p><p>  //注册UserNotification,以获取推送通知的权限</p><pre><code>​    UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeSound | UIUserNotificationTypeAlert | UIUserNotificationTypeBadge categories:nil];​    [application registerUserNotificationSettings:settings];​    //注册远程推送​    [application registerForRemoteNotifications];​    ​    // Override point for customization after application launch.​    return YES;}– (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {//处理推送消息​    NSLog(@”userinfo：%@”, userInfo);​    NSLog(@”收到推送消息：%@”, [[userInfo objectForKey:@”aps”] objectForKey:@”alert”]);}///如果注册失败，比如没有证书等等调用– (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {​    NSLog(@”远程通知注册失败：%@”, error);}///用户同意后，会调用此程序，获取系统的deviceToken，应把deviceToken传给服务器保存，此函数会在程序每次启动时调用(前提是用户允许通知)– (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {​    //NSLog(@”获取到的Token值为：%@”, deviceToken);​    [Defaults setObject:deviceToken forKey:@”deviceToken”];//Token值，用于登录的时候向后台发送用户对应的设备，方便针对进行推送    }    </code></pre><p><strong>强制更新模块：本地调用 版本号与服务器返回版本号对比大小进行控制</strong> </p><pre><code>    – (void)versionUpdate:(double)versionInfo {    ​    ///系统版本更新    ​    NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];    ​    NSString *app_Version = [infoDictionary objectForKey:@”CFBundleShortVersionString”];//app版本    ​        ​    if (versionInfo &gt; [app_Version doubleValue]) {    ​        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@”提示” message:@”有新版本请立即更新” preferredStyle:UIAlertControllerStyleAlert];    ​        UIAlertAction *firstAction = [UIAlertAction actionWithTitle:@”立即更新” style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {    ​            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@”https://www.pgyer.com/obUA”]];    ​        }];    ​        [alert addAction:firstAction];    ​        [self presentViewController:alert animated:YES completion:nil];​    }}</code></pre><p><strong>关于列表的动态添加或删除</strong></p><p>对于TableView或CollectionView 的操作，从网络获取列表数据后，可以直接在本地列表进行操作，后台只需要返回成都或失败即可，没有必要去重新请求，刷新列表</p><p><strong>将上传图片加入主线程队列进行，防止阻断，界面更新放到放线程进行</strong></p><p>​        项目概况：主要为后台审核人员操作手机端操作，已经有人开发得差不多了，所以我的工作主要是维护，在维护中学到了些新东西，总结下</p><p>好分期后台管理iOS端开发总结：<br><strong>标准化开发，明确你每句代码的意图</strong></p><p>在前人做了详细备注的基础下，代码一看就懂，没有丝毫入坑的感觉，数据的收发非常的规范，而且后期的扩展相对轻松，不经感叹做好项目代码记录是规范化备注是多么重要的一件事情，不过也不一定是每句代码都 要说明 点什么，除非你是新手第一次接手项目。另外发现几个稍微有点欠妥的地方，一是把网络请求接口直接写在项目代码里面不分层虽然方便了，但是后台如果要统一改接口名称 要一个个去找，不是很方便 。二是搜索这个控件在取消的时候并没进行重新请求（已经修改）。界面全部采用TableView作为基础在Cell上布局控件，这种做法让我耳目一新，但是模块化的效果好很明显。不过重复控件太多，有些可以通过Cell重用实现的。还有就是在加载的时候如果网络出现问题，用户只能等待，这样的体验不是很好，这点也是我以后写代码要注意的地方。这款App主要的功能作用是显示数据，复杂的计算和操作后台都处理好了，所以项目并不算大。维护起来也很轻松</p><p><strong>键盘弹出界面自动移动防止遮挡</strong></p><pre><code>///IQKeyboardManager:自动处理键盘事件的第三方库​    IQKeyboardManager *manager = [IQKeyboardManager sharedManager];​    manager.enable = YES;//控制整个功能是否启用​    manager.shouldResignOnTouchOutside = YES;//控制点击背景是否收起键盘​    manager.shouldToolbarUsesTextFieldTintColor = YES;//控制键盘上的工具条文字颜色是否用户自定义​    manager.enableAutoToolbar = NO;//控制是否显示键盘上的工具条​    manager.preventShowingBottomBlankSpace = NO;//防止IQKeyboardManager让rootview上滑过度,默认是YES</code></pre><p><strong>IPS**</strong>不用第三方可以手动进行采取上传到服务器，用于点对点推送：** </p><pre><code>      //注册UserNotification,以获取推送通知的权限    ​    UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeSound | UIUserNotificationTypeAlert | UIUserNotificationTypeBadge categories:nil];    ​    [application registerUserNotificationSettings:settings];    ​    //注册远程推送    ​    [application registerForRemoteNotifications];    ​        ​    // Override point for customization after application launch.    ​    return YES;    }    – (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {//处理推送消息    ​    NSLog(@”userinfo：%@”, userInfo);    ​    NSLog(@”收到推送消息：%@”, [[userInfo objectForKey:@”aps”] objectForKey:@”alert”]);    }    ///如果注册失败，比如没有证书等等调用    – (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {    ​    NSLog(@”远程通知注册失败：%@”, error);    }    ///用户同意后，会调用此程序，获取系统的deviceToken，应把deviceToken传给服务器保存，此函数会在程序每次启动时调用(前提是用户允许通知)    – (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {    ​    //NSLog(@”获取到的Token值为：%@”, deviceToken);    ​    [Defaults setObject:deviceToken forKey:@”deviceToken”];//Token值，用于登录的时候向后台发送用户对应的设备，方便针对进行推送    }    **强制更新模块：本地调用 版本号与服务器返回版本号对比大小进行控制**     – (void)versionUpdate:(double)versionInfo {    ​    ///系统版本更新    ​    NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];    ​    NSString *app_Version = [infoDictionary objectForKey:@”CFBundleShortVersionString”];//app版本    ​        ​    if (versionInfo &gt; [app_Version doubleValue]) {    ​        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@”提示” message:@”有新版本请立即更新” preferredStyle:UIAlertControllerStyleAlert];    ​        UIAlertAction *firstAction = [UIAlertAction actionWithTitle:@”立即更新” style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {    ​            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@”https://www.pgyer.com/obUA”]];    ​        }];    ​        [alert addAction:firstAction];    ​        [self presentViewController:alert animated:YES completion:nil];​    }}</code></pre><p><strong>关于列表的动态添加或删除</strong></p><p>对于TableView或CollectionView 的操作，从网络获取列表数据后，可以直接在本地列表进行操作，后台只需要返回成都或失败即可，没有必要去重新请求，刷新列表</p><p><strong>将上传图片加入主线程队列进行，防止阻断，界面更新放到放线程进行</strong></p><pre><code>      dispatch_async(dispatch_get_global_queue(0, 0), ^{       队列操作。。。            ​        [Service serviceWithJAVAUrl:@”” params:params images:imgArr message:@”” controller:self succeedBlock:^(id response) {    ​            dispatch_async(dispatch_get_main_queue(), ^{    ​                 ​            });    ​        } failBlock:^{    ​            dispatch_async(dispatch_get_main_queue(), ^{    ​            });    ​        }];    ​    });    带图片带参数AFNetworking上传:    \+ (void)serviceWithUrl:(NSString *)url    ​                params:(NSDictionary *)params    ​                images:(NSArray *)images    ​               message:(NSString *)message    ​            controller:(id)controller    ​          succeedBlock:(void (^) (id response))succeedBlock    ​             failBlock:(void (^) (void))failBlock    {    ​    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];    //设置可以接收的数据类型    ​    manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@”application/json”, @”text/json”, @”text/javascript”, @”text/html”, nil];    //设置是否对发送数据进行Json格式化    ​      //manager.requestSerializer=[AFJSONRequestSerializer serializer];    //报头标记，只是作为双方识别的记号而已    ​    [manager.requestSerializer setAuthorizationHeaderFieldWithUsername:@”RqPs” password:@“***********”];    ​        ​    if (![message isEqualToString:@””]) {    ​        [SVProgressHUD showWithStatus:message maskType:SVProgressHUDMaskTypeBlack];    ​    }    ​        ​    NSString *URL = [NSString stringWithFormat:@”%@%@”,BASEURL,url];    ​    [manager POST:URL parameters:params constructingBodyWithBlock:^(id&lt;AFMultipartFormData&gt; formData) {    ​        //[SVProgressHUD dismiss];    ​            ​        NSMutableArray *arr = [[NSMutableArray alloc] init];    ​        for (int i = 0; i &lt; images.count; i++) {    ​            NSDictionary *image = images[i];    ​            NSString *fileName = image.allKeys[0];    ​            int nameCount = 0;    ​            for (NSString *str in arr) {    ​                if ([str containsString:image.allKeys[0]]) {    ​                    nameCount++;    ​                    ///图片等比例压缩    ​                }    ​            }    ​                ​            ///重名 添加后缀    ​            if (nameCount != 0) {    ​                fileName = [NSString stringWithFormat:@”%@%d”, image.allKeys[0], nameCount+1];    ​            }    ​                ​            NSDateFormatter *formatter = [[NSDateFormatter alloc] init];    ​            [formatter setDateFormat:@”yyyyMMddHHmmssSSS”];    ​            NSString *dateTime = [formatter stringFromDate:[NSDate date]];    ​            [arr addObject:[NSString stringWithFormat:@”%@_%@”, fileName, dateTime]];    ​        }    ​            ​       for (int i = 0; i &lt; images.count; i++) {    ​           NSDictionary *image = images[i];    ​           [formData appendPartWithFileData: UIImageJPEGRepresentation(image.allValues[0], 0.0) name:arr[i] fileName:[arr[i] stringByAppendingFormat:@”.png”] mimeType:@”image/png”];    ​       }    ​            ​    } success:^(AFHTTPRequestOperation *operation, id responseObject) {    ​        [SVProgressHUD dismiss];    ​        NSLog(@”%@”, responseObject);    ​            ​        NSDictionary *result = responseObject;    ​        if (![[NSString stringWithFormat:@”%@”, result[@”Flag”]] isEqualToString:@”1″]) {    ​            [ExtensionMethod simpleAlertWithMessage:responseObject[@”Message”] controller:controller handler:^{    ​                if (failBlock == NULL) {    ​                    return;    ​                }    ​                failBlock();    ​            }];    ​            return;    ​        } else if (result == nil) {    ​            [ExtensionMethod simpleAlertWithMessage:@”后台服务异常，请稍后再试” controller:controller handler:nil];    ​            return;    ​        }    ​            ​        succeedBlock(responseObject);    ​    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {    ​        [SVProgressHUD dismiss];    ​        if (failBlock) {    ​            [ExtensionMethod simpleAlertWithMessage:@”网络异常，请稍后再试” controller:controller handler:^{    ​                if (failBlock == NULL) {    ​                    return;    ​                }​                failBlock();​            }];​        }​    }];}</code></pre><p>​    </p><p>另外使用了比较好用的第三方控件：RMPickerViewController第三方选择器，UUID设备唯一标记方法</p>]]></content>
      
      
      
        <tags>
            
            <tag> 项目经历 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>heidakeng</title>
      <link href="/2019/03/06/heidakeng/"/>
      <url>/2019/03/06/heidakeng/</url>
      
        <content type="html"><![CDATA[<h1 id="黑大坑iOS端开发体"><a href="#黑大坑iOS端开发体" class="headerlink" title="黑大坑iOS端开发体"></a>黑大坑iOS端开发体</h1><img src="/2019/03/06/heidakeng/1.png" title="产品图片"><p>说好听叫创业叫外水，说不好听叫折腾，本来挑50斤的人要去挑百斤的担子，自己一个人挑还不够，硬是要叫一伙人挑，我都有点佩服自己作死的勇气。</p><p><strong>机缘巧合认识老板</strong></p><p>不得不说，一个圈子很重要，特别是个优质的圈子。</p><p>为什么ACM比赛，电子科技大学的编程就是那么牛，因为他们有传统，除了选手优质外，有那么多老司机带路，能不厉害吗？</p><p>为什么同样是两年，有的人在小公司闭门造车，有的人在BAT进步神速。你是资源是远远比不上别人的，直接输在起跑线上，要追不得不付出代价。</p><p>明白了之前滴滴同城开比我小还却宝马的小伙给我说过人走茶凉的道理，你走了关系不一定能带走，因为你当时建立的关系别人看重的是你背后公司的资源。所以平台特别重要，特别是优质的平台，回报超出了你的付出。</p><p>头马是个优质而广阔的圈子，圈子里的人来自各行各业，而且由于有英语水平限制，进来的人算得上比较优质。在这里你的官员职位，你做的演讲级别是个很有用的铭牌。不仅仅是锻炼了你的社交能力，更是让你与其他人有不少的合作机会。于是结识了很厉害的David，通过他认识了很厉害的老G，因为我的工作和他们的需求联系起来。同样，你有某方面的需求，也会找到对应的人才。比如前段时间找职业规划师，就在群里面推荐了很优秀的阿舟老师。</p><p>圈子越大，机会越多，圈子优质，人就越可靠。</p><p><strong>如果产品需求和设计可以重来，我宁愿花一半的时间做这个事情</strong></p><p>客户对于产品的认识是不够全面的，所以你需要帮助他确定产品的预期效果，越准确越好，好处也非常的明显：帮助他清楚的知道自己要做哪一块，比如最开始我们这边得到的信息是做一个钓鱼资讯类的App，结果到后来卖票实现就可以了。导致做了很多无用的模块，最后被一一砍去。</p><p>关于界面效果一定要拿非常细致的设计图出来，原因有三：1、让他自己对看到的效果非常确信，这样后面他不会说你这个设计不如我看到的某个好看之类的2、你的开发任务更加明确，防止做重复工作和无用功。3、避免团队士气受打击，如果要推倒重做或者重要修改是非常麻烦的事情，因为不仅仅关系到个人，而是团队，从美工，到后台再到前端效果可能都需要修改，牵一发动全身。如果有临时要改的，要么列到下一个开发周期内进行。不然会造成非常混乱的结果。</p><p>这方面经验严重不足，导致后面出了很多问题。</p><p><strong>进度缓慢是谁的责任，不要和最好的朋友合伙开公司</strong></p><p>都说亲兄弟可以明算帐，但是在真正重视的人面前说狠话真的很难，特别是中国这个环境，工作和生活是分不开的，你不可能说今天我是你老板你工作干得不好臭骂你一顿，下班就找你出来玩，唱酒KTV，大家嗨起来当上班事情没发生，太难。项目容不能差错，兄弟伙也不能将就 ，该说指正的就要去说服。我也知道这个道理，但是往往会出现执行能力太差，做事拖拉你也不好明说。他也是有势无恐，我们这么铁的关系，我没时间做，你不能强制我吧。一方面老板要求的任务，另一方面要顾全面子，左右为难。</p><p>最好开始就说清楚，利益怎么分，你这个完成多少，你如果没有及时完成扣多少，如果你干不下来，那怎么办，这些不是因为相信就可以不先商量的。虽然这样开始关系会有点僵，但真的效果要好得多。</p><p><strong>需要担当，更需要实际行动</strong></p><p>一开始我想的合伙人模式，你完成你的模块，我完成我的模块，然后我们交接打通，项目就成了，钱也到手了，大家都高兴。但是发现这个过程中有三个很大的弊端：</p><p>1、软件开发是个体系动作，不是拼积木这么简单。从需求不明确就产生错误指导开始，数据库开始设计如果我就能参与其中，就不会有两个后台各自设计自已的数据库表，也会有一套详细的数据库设计文档，字段对应。另外后台也不会出现两种不同的调用方式、数据处理不统一，后台代码提交也出现问题。为什么做后台的人往往能成为一个公司的技术总监，因为他们往往掌握了核心技术，前端只是用户显示而已。所以需要担当，去把握核心的技术，制定标准的数据处理步骤和代码规范前期相当的重要。</p><p>2、有效沟通，为什么程序员会留给外界死板的印像，因为他们总是在开发的角度想问题，没有在客户的角度考虑问题，第一反应是这个该用什么来实现，或者这个东西我觉得这样挺好的，为什么你偏偏要改。以前有个段子说：什么方法让程序员自杀，那就是改三次需求。因为对于需求的理解和修改优化的目的非常的不了解，没有换位思考。在他觉技术没有问题这种情况下，你的优化方案是很难说服他的，特别是涉及我这个模块已经写了很多代码了，为什么你要改。你费了半天都可能在做无用功，另外有些时候重构要比修改来得高效。需求是不断变化的，这也是要求代码有良好拓展性和细分模块的原因所在。</p><p>3、确定他能不能做，程序员的核心能力我觉得应该是不断的学习实践能力。快速尝试学习使用新鲜技术，好奇心驱动应该是很重要的一环。当项目分工时，你真的要学会去判定他到底能不能做，做得出哪个效果。因为这个关心到整个项目的进度问题，他做不出来，不愿意去学习，那么开始的所有交代，沟通白搭。中途换人可能要从零开始，损失非常惨重，他固然有原因，但是属于你决策失误，预估不足，负主要责任。</p><p>合伙人制真的需要强力CP才能完成，在经验和能力缺少的情况下一味相信是不够的，而应该采取老板制，首先个人把头带好，然后强势、严格的要求每一个人和我一样做好自己的工作，开头说明直接与利益挂钩，合理安排时间完成规定任务，不妥协，不心软、不将就。虽然看似过份，但大家都有看得见的好处。值！</p><p><strong>涉及经验积累：</strong></p><p>阿里云服务器开通使用</p><p>阿里云OSS调用</p><p>微信开放平台微信支付申请</p><p>腾讯开发者平台申请</p><p>新浪平台申请</p><p>第三方地图使用及导航</p><p>优酷SDK调用</p><p>数据库创建与使用</p><p>PHP标记语言使用</p><p>HTML+CSS实践</p><p>Bootstrap研究学习</p><p>Linux WordPress的搭建</p><p>视频SDK调用</p><p>来一波视图：</p><img src="/2019/03/06/heidakeng/2.png" title="产品图片"><img src="/2019/03/06/heidakeng/3.png" title="产品图片"><img src="/2019/03/06/heidakeng/4.png" title="产品图片"><img src="/2019/03/06/heidakeng/5.png" title="产品图片"><img src="/2019/03/06/heidakeng/6.png" title="产品图片"><img src="/2019/03/06/heidakeng/7.png" title="产品图片"><img src="/2019/03/06/heidakeng/8.png" title="产品图片"><img src="/2019/03/06/heidakeng/9.png" title="产品图片">]]></content>
      
      
      
        <tags>
            
            <tag> 项目经历 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>lgfishing</title>
      <link href="/2019/03/06/lgfishing/"/>
      <url>/2019/03/06/lgfishing/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>hexi_travel</title>
      <link href="/2019/03/06/hexi-travel/"/>
      <url>/2019/03/06/hexi-travel/</url>
      
        <content type="html"><![CDATA[<img src="/2019/03/06/hexi-travel/1.png"><p>项目概况：</p><p>这两款软件是和系的洐生软件，一开始和系要做一个综合平台，包括电子商务、家政服务、周边旅游，后面进行了业务拆分，自然就有了和家政和和乡游，一个是针对成都本地的家政服务，一个针对成都周边的乡村旅游，都有很好的布局，很大的市场前景。不过最后还是因为多方面考虑，公司叫停了这两个项目，这算是自己最开始完全负责的App,体会也很多，收获也很大。</p><p>技术上</p><p>1、学习了TableView控件的headerView的使用，TableCell的拓展，</p><p>2、较为复杂的页面布局，逐步单独接触并完成聊天、地图、及网页加载一系列功能</p><p>看似简单，但是要求很细致才行，比如WebView的高度老是算不准确，场景切换不能多样化，以前等比例布局。这两个软件都为我提供了很好的实战参考。</p><p>苹果的图已经全部找不到了，就用安卓的代替了，另外和家政找不到了，只有项目图标，小型项目的开发其实在已经有和系的基础上很方快的。</p><p>&lt;% asset_img 2.png %&gt;</p><p>&lt;% asset_img 3.png %&gt;</p>]]></content>
      
      
      
        <tags>
            
            <tag> 项目经历 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexi_assist</title>
      <link href="/2019/03/06/hexi-assist/"/>
      <url>/2019/03/06/hexi-assist/</url>
      
        <content type="html"><![CDATA[<h1 id="和商助手开发记录"><a href="#和商助手开发记录" class="headerlink" title="和商助手开发记录"></a>和商助手开发记录</h1><h3 id="项目概况："><a href="#项目概况：" class="headerlink" title="项目概况："></a>项目概况：</h3><p>和商助手是和系的商家端，和系是个类似小京东的平台，助手是为了帮助商家进行发货，与买家互动、提现等一系列操作。功能相对简单，但是比较实用。个人负责和商助手新模块的开发与对现有模块进行功能优化，负责实现美工设计界面，负责与后台沟通接收网络数据，按进度完成开发任务。</p><p>主要包括了下面一系列功能：</p><p>1、免费开店，操作简单，只要两步就能开店。</p><p>2、管理方便，随时随地添加商品、查看并处理订单。</p><p>3、提现周期短，申请提现后1-2个工作日到账。</p><p>4、快捷分享，一键分享商品到微信、QQ等多个平台</p><h3 id="项目难点："><a href="#项目难点：" class="headerlink" title="项目难点："></a>项目难点：</h3><p>商品上传模块过于复杂，技术不成熟代码也写得最复杂。这是我写过的最艰难的代码，可能确定内功不够，模块的设计也是不成功，技术上受限制，想采用Masonry的技术来实现。</p><p>1、实现商品上传，有图有没有图是两种不一样的显示状态，自己还运用了Masonry的动态进行实现。</p><p>2、要实现类别联动，也就是选择一个父类后要显示对应的子类，如果没有父类则显示默认，选择还需要选择变动请求网络，所以独立出来了一个模块</p><p>3、标签多种选择，一个类别有几个规格，比如尺寸有：大中小，颜色有红黄绿，最开始产品设计不能满足产品多样规格的需求，后面我们虽然即时想去了列表显示的方式解决问题，但是所有商品使用同一个规格表，导致哪怕是新加一个商品，都要做选择，只有一两个属性还好，想想20多个属性去选择是什么概念，每点一个要显示出来，每个列表的规格值还可以动态添加或者删除，另外提交的时候要去判断是不是该商品所有的规格选中了，没有选择还要提示，另外如果商品没有设置规格那么使用另外一种方式显示。总之逻辑上就够你确定半天了。技术上当时最让我头痛的就是不断增加的属性列表，以及最后的提交计算，你可能觉得可能没那么复杂。但是涉及到TableViewCell不动态刷新，Masonry动态添加删除控件，以及20多个属性的组合，就有点让人觉得疯狂了，最好还是做出来了，但是不想再去看第二眼，大大小小的各类模块和不规范的代码让自己读起来都有点吃力。程序设计一定要严谨。</p><h3 id="二：动态图文列表"><a href="#二：动态图文列表" class="headerlink" title="二：动态图文列表"></a>二：动态图文列表</h3><p>要做到图文混排，很多人觉得可能TableView就可以了，但是TableView不好处理单位Cell的长度增长，就是我在中间的文字区域编辑，内容增加或减少引起的行变化。TableView每次都得去刷新，非常麻烦，而且刷新你是不能编辑的，也就是刷新的时候没有输入焦点，无法输入。图片好处理，文字的动态变化非常伤脑筋。幸好当时深入研究了Masonry的约束规则，采用了约束的办法动态调整TextView的高度变化，还可以在文字删除完毕时把对应的TextView也干掉，比较合适的解决了这个问题。后面我发现这方面处理的最好的是wordpress的App版本，采用JS与html交互的方式，可能对文字加粗变长斜之类的，非常方便。功能非常强大，关系是完成后直接生成html代码，方便Web直接使用。非常完善的解决了这个需求。后面自己的项目也想接入这个模块用于发布文章，无奈老是有那么几个链接错误找不到原因解决。后面要尝试解决。</p><h3 id="三：没有做本地缓存和缺少有效通知机制"><a href="#三：没有做本地缓存和缺少有效通知机制" class="headerlink" title="三：没有做本地缓存和缺少有效通知机制"></a>三：没有做本地缓存和缺少有效通知机制</h3><p>虽然有WebImageChache这个类别减少图片的请求，但每次进入首页都要请求一次各种消息：比如商户帮助文字、用户是否有某个状态更改了，非常的消耗流量，特别是帮助，并不是经常更新的东西，安全可以采用本地缓存加通知更新的方式解决，特别是把推送和本地数据库的功能用好，采用Version判断是不是要更新某个信息，重新请求。包括和系在内都可以采用这种方式减少不必要的流量消耗，当时提出来了，可惜由于各种原因，最终没有实现。</p><p>总的来说和商助手基本满足用户使用需求，但是技术和设计上还有许多要改进优化的地方。</p><img src="/2019/03/06/hexi-assist/2.jpg" title="产品图片"><img src="/2019/03/06/hexi-assist/3.jpg" title="产品图片"><img src="/2019/03/06/hexi-assist/4.jpg" title="产品图片">]]></content>
      
      
      
        <tags>
            
            <tag> 项目经历 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexi</title>
      <link href="/2019/03/06/Hexi/"/>
      <url>/2019/03/06/Hexi/</url>
      
        <content type="html"><![CDATA[<img src="/2019/03/06/Hexi/1.jpg" title="产品图片"><h3 id="项目概述："><a href="#项目概述：" class="headerlink" title="项目概述："></a>项目概述：</h3><p>自从毕业就在和系网络科技股份有限公司担任iOS工程师一职，公司主要是电子商务方向。在工作上全权负责公司iOS端系列产品的开发。参与公司业务模块的技术讨论与需求分析并负责实现。重构或者优化公司的相关开发模块，最开始的时候是每周加个版本并进行更新，后面完成的差不多了基本每两周迭代一个版本添加一个功能界面模块。曾将和系从原来的80多兆（采用了PhoneGap）的体积重构优化到了20多兆(Object-C原生)并进行框架上的重构。自集成相关通用类提高开发技术。开发倾向纯代码流（受苹果原生应用与移植和适配的影响）。</p><p>和系App主要是服务于广大消费者的购物平台。不同于其它常规的购物平台，和系包括了抢红包抵现、签到获得积分换购商品，9块9包邮、众筹、新人福利等一系列的吸引用户购买的功能，引入了淘宝客的商品，另外有一套比较完善的类似直销发展会员的体系。这种方式促进用户邀请自己的好友注册成为和系会员，用户保有率较高，存留方式较好。公司一直在界面设计上下功夫，从无到有，越做越好，参考了大量的同行设计，也逐渐形成了自己的一套风格。</p><h3 id="产品亮点："><a href="#产品亮点：" class="headerlink" title="产品亮点："></a>产品亮点：</h3><p>蓝莓娃娃logo:公司是集团产业，旗下拥有自己的蓝莓产业基地，从去年开始在都江堰天马镇开了第一届蓝莓采摘节，邀请网红与游客互动，增加人气。总之蓝莓娃娃形像淘气可爱，还自带叶子作的翅膀，就像一个小仙子一样生动有趣。</p><p>完善的营销体系：从购物-分享-收益形成了正向循环，一方面有购物上通过红包抵销部分价格、签到积分换购商品（签到一个月可以换30元话费）等一系列方式吸引流量，另一方面分享可以提高用户等级，最高到至尊（主要是返利收益）促进用户推广，再到收益，你的下线消费后你将会获得收益。整个体系各个环节有机结合，增加用户活跃度和粘性</p><p>红包：每天都会有红包，等级越高能够抢的大红包就越多，不过只能抵用部分，不像以前可以全额。</p><h3 id="技术难度："><a href="#技术难度：" class="headerlink" title="技术难度："></a>技术难度：</h3><p>支付难度：自有和系支付钱包，接入第三方包括银联，微信支付宝等，银联由于大幅调整过一次，导致过之前的版本不能使用银联支付。后面采用了动态显示支付方式的办法进行后端控制。之前由于支付宝安全漏洞导致被攻击过，所面做了调整，把安全部分的计算放到了后端进行验证。</p><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>1.最好写个SDK用于系列产品统一调用，方便集成开发使用。另一方面方便后台统一进行支付显示控制。</p><p>2.支付数据一定要做好加密处理，不能外泄。</p><p>安全难度：作为电子商务平台，对安全是相关关注的，目前自己就职的瑞骐金服的拳头产品就完成了一次安全升级：放弃了.NET的后台，而采取多线程处理能力更为强大的JAVA，另外数据库也换成了Orancle（这个是重点）。所以数据库作为核心，一定要建立一套严密的防范机制，防止SQL注入和直接操作。</p><p>公司之前采用的最简单http传输的办法，所有核心数据暴露无疑，所以当然成为了被练手的对象，包括被无数次的调用短信发送Api。以前被各种攻击。后台采用了混合加密的办法，但是没有考虑很关键的问题：效率，一方面App每次加密都要进行ASP加密，128位资源消耗巨大，另一方面服务器还要解密，也是需要强大的计算能力，更关系的是请求量大的时候将无从下手，另外有效保护了数据安全，但效率不敢维恭，另外不能防止重放攻击。不过也是感谢那次经历，个人对DES加密和RSA加密有了更加深入的了解，个人实现了苹果端的加密。</p><p>后面进行架构调整采用HTTPS加载方式增加安全性，不过由于App端兼容性设计不到位，导致了接口一个一个的换，后台返回的数据也有较大的变化，导致还要逐个去调试，大大降低了开发效率，不过技术还是没有完全到位，只保证了传输过程中不被窃取，但是发送源头还是存在被获取源数据的风险。</p><p>解决办法：为什么当时我们没有想到Token呢，早就被大量使用的技术，另外还可能 采用报头加密和前后端序列协商等一系列安全组合，保证安全。网络传输明文真的太危险，核心的支付验证一定要放在后台，还要防止中间人攻击，还有就是App端的数据收发要独立出来成为一个单独的模块，提高扩展性与灵活性，最好接口都可以放在一个专门的地方。</p><p>团队配合：公司团队组合能力不够强，虽然大家都各司其职，但是缺少一个技术出身的项目经理，要是有的话在软件开发，产品设计和开发架构上一开始就设计好，可以减少很多不必要的重新调整，另外核心技术在外包，一定要舍得培养自己的技术队伍，搞好技术成长的建设，很多公司有自己的研发中心这是个很明显的例子，这也是我离开最主要的原因。技术上属于闭门造车，缺少技术有效交流。还有就是技术团队应该是个敢于冒风险，尝试新技术的团队。不仅仅界面上要做得好看，技术上也要跟上才行。还有就是标准化开发，后面由于后台太忙，没有时间写接口，导致苹果端需要自发去解决，导致开发落后，非常浪费时间，让人沮丧。</p><h3 id="开发体会："><a href="#开发体会：" class="headerlink" title="开发体会："></a>开发体会：</h3><p>和系是我第一次接手的中型项目，也是技术成长的一个主要见证，主要对整个项目进行了两次重构，第一次是从PhoneGap框架修改为了纯原生，另一次是受框架启发，重新对项目进行调整，一方面删除了很多不用的模块，另一方面使项目更加的规范可拓展。掌握了第三方支付集成、第三方登录集成、聊天融去SDK集成、自定义聊天界面开发、混合加密、Masonry约束布局及屏幕适配还有大量其它类别的使用等相关技术。</p><p>附相关App界面：<br><img src="/2019/03/06/Hexi/2.jpg"><br><img src="/2019/03/06/Hexi/3.jpg"><br><img src="/2019/03/06/Hexi/4.jpg"><br><img src="/2019/03/06/Hexi/5.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 项目经历 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo使用方法</title>
      <link href="/2018/09/26/hello-world/"/>
      <url>/2018/09/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Hexo静态博客工具基于先安装node.js<br>什么是Node.js:<br>Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js’ package ecosystem, npm, is the largest ecosystem of open source libraries in the world.<br><img src="http://baike.baidu.com/link?url=SyWoc-jV1q9IBR9lG6X1vII3xPpd0MGrorW2H5Y_I-Hy0Ba-DEIIuPaMk1WTLrpjyfdrUhP_27Ulhl72mLNd__" alt="Node.js是一个Javascript运行环境(runtime)。实际上它是对Google V8引擎进行了封装。V8引 擎执行Javascript的速度非常快，性能非常好。"><br>使用brew快速安装<br>brew install node.js  </p><p>安装Hexo工具(NPM是随同NodeJS一起安装的包管理工具)  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli --no-optional</span><br></pre></td></tr></table></figure><p>创建hexo博客位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mkdir  ~/Document/blog</span><br></pre></td></tr></table></figure></p><p>进行初始化<br>Hexo init </p><h2 id="Praperation"><a href="#Praperation" class="headerlink" title="Praperation"></a>Praperation</h2><p>Install <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Nodejs</a> or Use Command </p><p>###安装主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/wizardforcel/hexo-theme-cyanstyle.git themes/cyanstyle</span><br></pre></td></tr></table></figure><p>修改 Hexo 的 _config.yml 中的 theme 为 cyanstyle。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install nodejs</span><br></pre></td></tr></table></figure><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Command-for-Hexo"><a href="#Command-for-Hexo" class="headerlink" title="Command for Hexo"></a>Command for Hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Usage: hexo &lt;command&gt;</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">clean     Removed generated files and cache.</span><br><span class="line">config    Get or set configurations.</span><br><span class="line">deploy    Deploy your website.</span><br><span class="line">generate  Generate static files.</span><br><span class="line">help      Get help on a command.</span><br><span class="line">init      Create a new Hexo folder.</span><br><span class="line">list      List the information of the site</span><br><span class="line">migrate   Migrate your site from other system to Hexo.</span><br><span class="line">new       Create a new post.</span><br><span class="line">publish   Moves a draft post from _drafts to _posts folder.</span><br><span class="line">render    Render files with renderer plugins.</span><br><span class="line">server    Start the server.</span><br><span class="line">version   Display version information.</span><br><span class="line"></span><br><span class="line">Global Options:</span><br><span class="line">--config  Specify config file instead of using _config.yml</span><br><span class="line">--cwd     Specify the CWD</span><br><span class="line">--debug   Display all verbose messages in the terminal</span><br><span class="line">--draft   Display draft posts</span><br><span class="line">--safe    Disable all plugins and scripts</span><br><span class="line">--silent  Hide output on console</span><br><span class="line"></span><br><span class="line">For more help, you can use &apos;hexo help [command]&apos; for the detailed information</span><br><span class="line">or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure><p>For more help, you can use ‘hexo help [command]’ for the detailed information<br>or you can check the docs: <a href="http://hexo.io/docs/" target="_blank" rel="noopener">http://hexo.io/docs/</a></p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start-1"><a href="#Quick-Start-1" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-1"><a href="#Create-a-new-post-1" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server-1"><a href="#Run-server-1" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files-1"><a href="#Generate-static-files-1" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites-1"><a href="#Deploy-to-remote-sites-1" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
